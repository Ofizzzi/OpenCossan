%% Test All the Tutorials
function runAllTutorials(Sowner)

clear global TresultsTutorialTest;
global Cfiles TresultsTutorialTest

SworkingPath='/tmp/Tutorials/';
mkdir (SworkingPath)
Spwd=pwd; % Store corrent directory

[~]=CossanX('NverboseLevel',0,'Sworkingpath',SworkingPath, ...
    'Scossanpath','/home/bg/workspace/COSSAN-X_SVN/OPENCOSSANengine/',...
    'Sexternalpath','/home/bg/workspace/COSSAN-X_SVN/OpenSourceSoftware');

cd(Spwd);

%% Run the following command to recreated the list of the tutorials

%system('tree --dirsfirst -i -f > listOfFiles.txt')

% import list of files
% Nfid=fopen('listOfFiles.txt');
%
% Cfiles{1} = fgetl(Nfid);
% while ischar(Cfiles{end})
%     Cfiles{end+1} = fgetl(Nfid); %#ok<AGROW>
% end

%fclose(Nfid);
Spwd=pwd; % Store corrent directory
Cfiles={ ...
% Process CossanObjects Tutorials         
% Common
        'EP' 'CossanObjects/TutorialOpenCossan.m'; ...
        'BG' 'CossanObjects/TutorialDataseries.m'; ...
        'EP' 'CossanObjects/TutorialEvaluator.m'; ...  
        'PB' 'CossanObjects/TutorialMarkovChain.m';...        
        'EP' 'CossanObjects/TutorialModel.m';...       
        'PB' 'CossanObjects/TutorialSamples.m';...  
        'EP' 'CossanObjects/TutorialSolutionSequence.m';...
        'MB' 'CossanObjects/TutorialTimer.m';...        
% Connector       
        'MB'  'CossanObjects/TutorialConnectorABAQUS.m'; ...
        'MB'  'CossanObjects/TutorialConnectorANSYS.m'; ...
        'MB'  'CossanObjects/TutorialConnectorASTER.m'; ...
        'MB'  'CossanObjects/TutorialConnectorNASTRAN.m'; ...
        'MB'  'CossanObjects/TutorialConnectorFEAP.m'; ...
        'MB' 'CossanObjects/TutorialExtractor.m'; ...
        'MB' 'CossanObjects/TutorialHBExtractor.m'; ...
        'MB'  'CossanObjects/TutorialIdentifier.m'; ...      
        'MB'  'CossanObjects/TutorialInjector.m'; ...        
        'HMP' 'CossanObjects/TutorialMappingExtractor.m'; ...     
        'BG'  'CossanObjects/TutorialMTXExtractor.m'; ...
        'MB' 'CossanObjects/TutorialOp4Extractor.m'; ...
        'MB' 'CossanObjects/TutorialPunchExtractor.m'; ...
        'MB'  'CossanObjects/TutorialResponse.m'; ...     
        'MB'  'CossanObjects/TutorialTableExtractor.m'; ...           
        'MB'  'CossanObjects/TutorialMio.m';...
% FatigueFracture 
        'PB'  'CossanObjects/TutorialFatigueFracture.m';...
        'PB'  'CossanObjects/TutorialFracture.m';...
        'PB'  'CossanObjects/TutorialCrackGrowth.m';...
% HighPerformanceComputing
        'MB'  'CossanObjects/TutorialJobManager.m';...
        'MB'  'CossanObjects/TutorialJobManagerInterface.m';...       
% Input
        'BG'  'CossanObjects/TutorialCovarianceFunction.m';... 
        'PB'  'CossanObjects/TutorialDesignVariable.m';...
        'PB'  'CossanObjects/TutorialFunction.m';...
        'PB'  'CossanObjects/TutorialGaussianMixtureRandomVariableSet.m'; ...        
        'PB'  'CossanObjects/TutorialInput.m'; ...
        'PB'  'CossanObjects/TutorialParameter.m'; ...
        'PB'  'CossanObjects/TutorialRandomVariable.m';...
        'PB'  'CossanObjects/TutorialRandomVariableSet.m';...
        'BG'  'CossanObjects/TutorialStochasticProcess.m';...
        'PB'  'CossanObjects/TutorialUserDefRandomVariable.m';...
% MetaModel        
        'MB'  'CossanObjects/TutorialMetaModel.m';...
        'BG'  'CossanObjects/TutorialModeBased.m';...       
        'MB'  'CossanObjects/TutorialNeuralNetwork.m';...
        'BG' 'CossanObjects/TutorialPolynomialChaos.m';...
        'MB'  'CossanObjects/TutorialResponseSurface.m';...
% Optimization         
        'EP'  'CossanObjects/TutorialBFGS.m';...
        'EP'  'CossanObjects/TutorialCobyla.m';...      
        'EP'  'CossanObjects/TutorialConstraint.m'; ...
        'EP'  'CossanObjects/TutorialCrossEntropy.m';...
        'EP'  'CossanObjects/TutorialEvolutionStrategy.m';...
        'EP'  'CossanObjects/TutorialGeneticAlgorithms.m';...
        'EP'  'CossanObjects/TutorialMiniMax.m';...
        'EP'  'CossanObjects/TutorialObjectiveFunction.m';...
        'EP'  'CossanObjects/TutorialOptimizationProblem.m';...
        'EP'  'CossanObjects/TutorialOptimizer.m';...
        'EP'  'CossanObjects/TutorialRBOProblem.m';...
        'EP'  'CossanObjects/TutorialSequentialQuadraticProgramming.m';...
        'EP'  'CossanObjects/TutorialSimplex.m';...
        'EP'  'CossanObjects/TutorialSimulatedAnnealing.m';... 
        'MB'  'CossanObjects/TutorialRobustDesign.m';... 
% Output        
        'EP'  'CossanObjects/TutorialCutSet.m'; ...    
        'EP'  'CossanObjects/TutorialDesignPoint.m'; ...   
        'EP'  'CossanObjects/TutorialFailureProbability.m'; ...
        'EP'  'CossanObjects/TutorialGradient.m'; ... 
        'PB'  'CossanObjects/TutorialLineSamplingOutput.m'; ... 
        'BG'  'CossanObjects/TutorialModes.m'; ...  
        'EP'  'CossanObjects/TutorialOptimum.m'; ...         
        'EP'  'CossanObjects/TutorialSensitivityMeasures.m'; ...   
        'HMP' 'CossanObjects/TutorialSfemOutput.m'; ...           
        'BG'  'CossanObjects/TutorialSimulationData.m';...      
        'PB'  'CossanObjects/TutorialSubsetOutput.m';...        
% Reliability          
        'EP' 'CossanObjects/TutorialFaultTree.m'; ...
        'EP' 'CossanObjects/TutorialPerformanceFunction.m'; ...
        'EP' 'CossanObjects/TutorialProbabilisticModel.m'; ...
        'EP' 'CossanObjects/TutorialSystemReliability.m';...
% Sensitivity     
        'EP' 'CossanObjects/TutorialLocalSensitivityMeasures.m';...
        'EP' 'CossanObjects/TutorialSensitivity.m';...
% sfem          
        'BG' 'CossanObjects/TutorialNastsem.m'; ...        
        'BG' 'CossanObjects/TutorialNeumann.m'; ...   
        'BG' 'CossanObjects/TutorialPerturbation.m'; ...   
        'BG' 'CossanObjects/TutorialSfem.m'; ...   
        'BG' 'CossanObjects/TutorialSfemPolynomialChaos.m'; ...            
% simulations
        'HMP' 'CossanObjects/TutorialDesignOfExperiment.m'; ...
        'EP'  'CossanObjects/TutorialHaltonSampling.m'; ...
        'EP'  'CossanObjects/TutorialImportanceSampling.m'; ...
        'EP'  'CossanObjects/TutorialLatinHypercubeSampling.m';...
        'EP'  'CossanObjects/TutorialLineSampling.m';...        
        'EP'  'CossanObjects/TutorialMonteCarlo.m';...
        'EP'  'CossanObjects/TutorialSimulations.m';...
        'EP'  'CossanObjects/TutorialSobolSampling.m';...        
        'EP'  'CossanObjects/TutorialSubSet.m';...           
% Process real tutorials
        'BG' '6StoreyBuilding/Tutorial6StoreyBuildingAbaqus.m';...
        'BG' '6StoreyBuilding/Tutorial6StoreyBuildingAnsys.m';...
        'BG' '6StoreyBuilding/Tutorial6StoreyBuildingNastran.m';...
        'BG' '6StoreyBuilding/Tutorial6StoreyBuildingFeap.m';...
        'BG' '6StoreyBuilding/Tutorial6StoreyBuildingFeapSensitivityAnalysis.m';...
        'BG' '6StoreyBuilding/Tutorial6StoreyBuildingPerformPerturbationAnalysis.m';...
        'MB'  'AntennaTower/TutorialAntennaTowerSixSigma.m'; ...
        'PB'  'BikeFrame/TutorialBikeFrame.m';...
        'EP'  'BridgeModel/TutorialBridgeModel.m';...
        'EP'  'CantileverBeam/TutorialCantileverBeam.m'; ...
        'EP'  'CantileverBeam/TutorialCantileverBeamAnsys.m'; ...     
        'EP'  'CantileverBeam/TutorialCantileverBeamAnsysOptimization.m'; ...
        'EP'  'CantileverBeam/TutorialCantileverBeamMatlab.m'; ...
        'EP'  'CantileverBeam/TutorialCantileverBeamMatlabOptimization.m'; ...
        'EP'  'CantileverBeam/TutorialCantileverMatlabReliabilityAnalysis.m'; ...  
        'EP'  'CantileverBeam/TutorialCantileverMatlabReliabilityBasedOptimization.m'; ...  
        'EP'  'CantileverBeam/TutorialCantileverBeamOptimization.m'; ...
        'BG'  'CargoCrane/TutorialCargoCrane.m';...
        'MB'  'CarModel/TutorialCarModel.m';...
        'MB'  'CylindricalShell/TutorialCylindricalShell.m';...
        'BG'  'GOCEsatellite/TutorialGOCEsatellite.m';...        
        'EP'  'InfectionDynamicModel/TutorialInfectionDynamicModel.m';...
        'EP'  'InfectionDynamicModel/TutorialInfectionDynamicModelGlobalSensitivityAnalysis.m';...
        'EP'  'ParallelSystem/TutorialParallelSystemReliabilityAnalysis.m';...
        'BG' 'SmallSatellite/TutorialSmallSatelliteModal.m'; ...
        'BG' 'SmallSatellite/TutorialSmallSatelliteStatic.m'; ...
        'PB'  'SuspensionArm/TutorialSuspensionArm.m'; ...
        'BG'  'TrussBridgeStructure/TutorialTrussBridgeStructure.m'; ...
        'BG' 'TurbineBlade/TutorialTurbineBladeAbaqus.m'; ...  
        'BG' 'TurbineBlade/TutorialTurbineBladeNastran.m'; ...  
    };

Cusers={'EP' 'HMP' 'BG' 'MB' 'PB'};

Nsuccess=0;
for n=1:size(Cfiles,1)
    
    disp(['Test number ' num2str(n) '/' num2str(size(Cfiles,1)) ])
    [Spath, Sname, Sext] = fileparts(Cfiles{n,2});
    TresultsTutorialTest(end+1).Sname=Sname;  %#ok<AGROW>
    TresultsTutorialTest(end).Cmess = {''};
    
    
    if exist('Sowner','var')
        if ~strcmp(Cfiles{n,1},Sowner)
            TresultsTutorialTest(end).Cmess={'Not tested'};
            continue
        end
    end
    disp(['Run ' Cfiles{n,2} ])
    % Check if the entriy is a directory
    if isdir(fullfile(Spwd,Cfiles{n}))
        % Enter in the folder
        warning(strcat(Cfiles{n,2},' is a folder (position ',num2str(n),')'))
        TresultsTutorialTest(end).Cmess={'This is a folder'};
        %cd(fullfile(Spwd,Cfiles{n}))
    else
        cd(fullfile(Spwd,Spath))
        if strcmp(Sext,'.m')
            tic
            % Check if the matlab file is a function or a script
            if exist(Sname,'file')
                Nfid2=fopen([Sname,'.m']);
                Sfirstline = fgetl(Nfid2);
                Ntodo=0;
                Sstring=Sfirstline;
                while ischar(Sstring)
                    if ~isempty(strfind(Sstring,'TODO')) ||  ~isempty(strfind(Sstring,'FIXME'))
                        Ntodo=Ntodo+1;
                    end
                    Sstring = fgetl(Nfid2);
                end
                
                fclose(Nfid2);
                TresultsTutorialTest(end).Ntodo=Ntodo;
                
                if isempty(strfind(Sfirstline,'function '))
                    TresultsTutorialTest(end).Sfolder=Spath;
                    TresultsTutorialTest(end).Sdate=datestr(now);
                    % Run tutorial
                    try
                        evalin('base',['run ' Sname ]);
                        TresultsTutorialTest(end).Lstatus=true;
                        TresultsTutorialTest(end).Cidentifier={};
                        Nsuccess=Nsuccess+1;
                    catch ME
                        if ~exist('TresultsTutorialTest','var')
                            disp('Variables cleared' )
                            ME.message
                        end
                        TresultsTutorialTest(end).Lstatus=false;
                        TresultsTutorialTest(end).Cidentifier={ME.identifier};
                        TresultsTutorialTest(end).Cmess={ME.message};
                    end
                    
                end
            else
                TresultsTutorialTest(end).Cmess={'File not found'};
            end
            TresultsTutorialTest(end).wallclocktime=toc;
        end
    end
    % Close matlab figure
    close all;
    %close open files
    fclose all;
end

Ntest=length(TresultsTutorialTest);

%% Print Report
Tinfo=getSystemInfo;
cd(Spwd);
if exist('Sowner','var')
    Nfid=fopen(['ReportTutorials' Sowner '.txt'],'w+');
else
    Nfid=fopen('ReportTutorials.txt','w+');
end

fprintf(Nfid,'%s\n','*********************************************************************');
fprintf(Nfid,'%s\n',[' REPORT OF TUTORIALS TEST (' datestr(now) ')']);
fprintf(Nfid,'%s\n',' ');
fprintf(Nfid,'%s\n',[' Matlab version : ' Tinfo.Smatlabversion ' Architecture: ' Tinfo.Sarch]);
fprintf(Nfid,'%s\n',[' Host Machine OS: ' Tinfo.Sdistribution ' (' Tinfo.Srelease ')']);
fprintf(Nfid,'%s\n',' ');
fprintf(Nfid,'%s\n',[' Successful: ' num2str(100*(Nsuccess/Ntest)) '%']);
fprintf(Nfid,'%s\n','*********************************************************************');


%% Show summary for each users
for n=1:length(Cusers)
    
    fprintf(Nfid,'\n\n%s\n','*********************************************************************')  ;
    fprintf(Nfid,'%s\n',[' REPORT FOR ' Cusers{n}]);
    fprintf(Nfid,'%s\n','test number -  Function Names - CPU TIME - STATUS - TODO/FIXME or Error message');
    fprintf(Nfid,'%s\n','---------------------------------------------------------------------');
    for itest=1:size(Cfiles,1)
        if strcmp(Cfiles{itest,1},Cusers{n});
            Sresult=[sprintf('%3i',itest) ' * ' sprintf('%35s',TresultsTutorialTest(itest).Sname)];
            Sresult=[Sresult ' * CPU Time ' sprintf('%8.3e',TresultsTutorialTest(itest).wallclocktime)];  %#ok<AGROW>
            if TresultsTutorialTest(itest).Lstatus
                if TresultsTutorialTest(itest).Ntodo==0
                    Sresult=[Sresult ' * OK      * ']; %#ok<AGROW>
                else
                    Sresult=[Sresult ' * WARNING * ']; %#ok<AGROW>
                end
                
                Sresult=[Sresult ' (' num2str(TresultsTutorialTest(itest).Ntodo)  ') ']; %#ok<AGROW>
            else
                if isempty(TresultsTutorialTest(itest).Sfolder)
                    Sresult=[Sresult ' * SKIPPED * ']; %#ok<AGROW>
                else
                    Sresult=[Sresult ' * FAILED  * ']; %#ok<AGROW>
                    
                    if isempty(TresultsTutorialTest(itest).Cidentifier)
                        Sresult=strcat(Sresult,'- Fail in: NoIdentifier -', TresultsTutorialTest(itest).Cmess{:});
                    else
                        Sresult=strcat(Sresult,'- Fail in: ',TresultsTutorialTest(itest).Cidentifier{:},'-', TresultsTutorialTest(itest).Cmess{:});
                    end
                end
            end
            

            
            
            

            fprintf(Nfid,'%s\n',Sresult);
        end
    end
    fprintf(Nfid,'%s\n','*********************************************************************');
end

fprintf(Nfid,'\n\n%s\n','*********************************************************************');
fprintf(Nfid,'%s\n',' ID Tutorials  Owner Full Path' );
fprintf(Nfid,'%s\n','------------------------------' );

for itest=1:size(Cfiles,1)
    fprintf(Nfid,'%s\n',[num2str(itest) ' * ' Cfiles{itest,1}, ' * ' Cfiles{itest,2} ]);
end

%% Show summary
fclose(Nfid);



