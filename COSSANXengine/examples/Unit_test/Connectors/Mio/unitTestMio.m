function varargout = unitTestMio

Ntest=58;
Vtest(1:Ntest)=false;
Cmess=cell(Ntest,1);

StestPath = fullfile(OpenCossan.getCossanRoot,'examples','Unit_test','Connectors','Mio');

% In the unitTest, runJob is also tested (tests 7-10). These tests are
% possible only if the grid is available. Thus, the number of tests that
% are executed is adapted to whether or not there is the grid.
try
    % inizialize JobManagerInterface
    Xjm = JobManagerInterface('Stype','GridEngine_matlab');
    % try to get the available queues
    Xjm.getQueues;
    % if successfull, set a flag indicating that grid is available
    Lgrid = true;
catch ME %#ok<*NASGU>
    % if the queue request failed, unset the flag of the grid
    Lgrid = false;
    % and change the number of tests
    Ntest=Ntest-4;
    Vtest(Ntest+1:end)=[];
    Cmess(Ntest+1:end)=[];
end

Xrv1    = RandomVariable('Sdistribution','uniform','par1',9,'par2',11);  %define first random variable
Xrv2    = RandomVariable('Sdistribution','uniform','par1',14,'par2',16); %define second random variable
Xrvs    = RandomVariableSet('Cmembers',{'Xrv1','Xrv2'},...               %define set of random variables
    'CXrandomvariables',{Xrv1,Xrv2});
Xin     = Input;            %create input object
Xin     = add(Xin,Xrvs);    %add random variable set to Input object

%% Positive tests
%% 1 display method
itest=1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',fullfile(StestPath, 'FunctionForMio'), ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
    
    display(Xm)
    Vtest(itest)=true;
    Cmess{itest} = 'Check display method';
catch ME
    Cmess{itest} = ME.message;
end

%% 2 deterministicAnalysis Mio with a structure i/o
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',fullfile(StestPath, 'FunctionForMio'), ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
    
    Pout1 = deterministicAnalysis(Xm,Xin);
    Vtest(itest)=true;
catch ME
    Cmess{itest} = ME.message;
end

for testdeployed=0:1 % all these tests are run twice, once to test the normal and once the deployed version
    %% Method run, positive tests
    %% 3 run Mio with a structure using sampled values, passing Input
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'FunctionForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',true, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',10);
        Pout2 = run(Xm,Xin);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 4 run Mio with a structure using sampled values, passing Samples
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'FunctionForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',true, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',10);
        Pout2 = run(Xm,Xin.Xsamples);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 5 run Mio with a structure using sampled values, passing a structure
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'FunctionForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',true, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',10);
        Pout2 = run(Xm,Xin.getStructure);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 6 run Mio with a structure using sampled values, passing a matrix
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'FunctionForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',true, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',10);
        Pout2 = run(Xm,Xin.Xsamples.MsamplesPhysicalSpace);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 7 run Mio with a Matrix as Input and Output, passing a Input
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'FunctionForMio'), ...
            'Sfile','differenceMatrix.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',10);
        Pout3 = run(Xm,Xin);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 8 run Mio with a Matrix as Input and Output, passing a Samples
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'FunctionForMio'), ...
            'Sfile','differenceMatrix.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',10);
        Pout3 = run(Xm,Xin.Xsamples);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 9 run Mio with a Matrix as Input and Output, passing a structure
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'FunctionForMio'), ...
            'Sfile','differenceMatrix.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',10);
        Pout3 = run(Xm,Xin.getStructure);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 10 run Mio with a Matrix as Input and Output, passing a matrix
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'FunctionForMio'), ...
            'Sfile','differenceMatrix.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',10);
        Pout3 = run(Xm,Xin.Xsamples.MsamplesPhysicalSpace);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 11 run Mio with multiple vectors as Input and Output, passing a Input
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'FunctionForMio'), ...
            'Sfile','differenceFunction.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',10);
        Pout4 = run(Xm,Xin);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 12 run Mio with multiple vectors as Input and Output, passing a Samples
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'FunctionForMio'), ...
            'Sfile','differenceFunction.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',10);
        Pout4 = run(Xm,Xin.Xsamples);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 13 run Mio with multiple vectors as Input and Output, passing a structure
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'FunctionForMio'), ...
            'Sfile','differenceFunction.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',10);
        Pout4 = run(Xm,Xin.getStructure);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 14 run Mio with multiple vectors as Input and Output, passing a matrix
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'FunctionForMio'), ...
            'Sfile','differenceFunction.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',10);
        Pout4 = run(Xm,Xin.Xsamples.MsamplesPhysicalSpace);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    
    %% 15 run Mio using a script with a structure as input and output, passing Input
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'FunctionForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',false, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Pout5 = run(Xm,Xin);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 16 run Mio using a script with a structure as input and output, passing Samples
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'ScriptForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',false, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Pout5 = run(Xm,Xin.Xsamples);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 17 run Mio using a script with a structure as input and output, passing structure
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'ScriptForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',false, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Pout5 = run(Xm,Xin.getStructure);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 18 run Mio using a script with a structure as input and output, passing matrix
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'ScriptForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',false, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Pout5 = run(Xm,Xin.Xsamples.MsamplesPhysicalSpace);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 19 run Mio using a script with a matrix as input and output, passing Input
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'ScriptForMio'), ...
            'Sfile','differenceMatrix.m', ...
            'Lfunction',false, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Pout6 = run(Xm,Xin);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 20 run Mio using a script with a matrix as input and output, passing Samples
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'ScriptForMio'), ...
            'Sfile','differenceMatrix.m', ...
            'Lfunction',false, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Pout6 = run(Xm,Xin.Xsamples);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 21 run Mio using a script with a matrix as input and output, passing structure
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'ScriptForMio'), ...
            'Sfile','differenceMatrix.m', ...
            'Lfunction',false, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Pout6 = run(Xm,Xin.getStructure);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 22 run Mio using a script with a matrix as input and output, passing matrix
    itest=itest+1;
    try
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',fullfile(StestPath, 'ScriptForMio'), ...
            'Sfile','differenceMatrix.m', ...
            'Lfunction',false, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Pout6 = run(Xm,Xin.Xsamples.MsamplesPhysicalSpace);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    %%
    if testdeployed==0
        % overwrite the isdeployed function to test the run method in a
        % deployed-like situation
        addpath(fullfile(StestPath,'AdditionalFiles'));
    else
        % remove the custom isdeployed function from path
        rmpath(fullfile(StestPath,'AdditionalFiles'));
    end
end
%% Negative tests
%% 43 pass wrong inputs to the constructor
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',fullfile(StestPath, 'FunctionForMio'), ...
        'Sfile','differenceStructure.m', ...
        'Sunexistingproperty',':-)', ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
    
    display(Xm)
    Cmess{itest} = 'This test should fail';
catch ME
    Vtest(itest)=true;
    Cmess{itest} = ME.message;
end

%% 44 pass input of wrong type to the constructor
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',fullfile(StestPath, 'FunctionForMio'), ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',':-)', ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
    
    display(Xm)
    Cmess{itest} = 'This test should fail';
catch ME
    Vtest(itest)=true;
    Cmess{itest} = ME.message;
end

%% 45 give a non existing file to the constructor
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',StestPath, ...
        'Sfile','thisfiledoesntexist.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
    
    display(Xm)
    Cmess{itest} = 'This test should fail';
catch ME
    Vtest(itest)=true;
    Cmess{itest} = ME.message;
end

%% 46 set impossible combination of flags: set Lfuction with a script
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',fullfile(StestPath, 'ScriptForMio'), ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
    
    display(Xm)
    Cmess{itest} = 'This test should fail';
catch ME
    Vtest(itest)=true;
    Cmess{itest} = ME.message;
end

%% 47 set impossible combination of flags: unsetting Lfuction with a function
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',fullfile(StestPath,'FunctionForMio'), ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',false, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
    
    display(Xm)
    Cmess{itest} = 'This test should fail';
catch ME
    Vtest(itest)=true;
    Cmess{itest} = ME.message;
end

%% 48 set impossible combination of flags: Liomatrix/Liostructure both true
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',[StestPath '/FunctionForMio'], ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', true, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
    
    display(Xm)
    Cmess{itest} = 'This test should fail';
catch ME
    Vtest(itest)=true;
    Cmess{itest} = ME.message;
end

%% 49 run Mio passing an empty Input
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',[StestPath '/FunctionForMio'], ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
    
    XemptyInput = Input;
    Pout2 = run(Xm,XemptyInput);
    Cmess{itest} = 'This test should fail';
catch ME
    Vtest(itest)=true;
    Cmess{itest} = ME.message;
end

%% 50 run Mio passing an Input where not all the input quantities are available
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',[StestPath '/FunctionForMio'], ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'missinginput'});
    
    run(Xm,Xin);
    Cmess{itest} = 'This test should fail';
catch ME
    Vtest(itest)=true;
    Cmess{itest} = ME.message;
end

%% 51 run Mio passing an empty Samples
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',[StestPath '/FunctionForMio'], ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
    
    Xsamples = Xin.Xsamples;
    Xsamples.MsamplesHyperCube = [];
    run(Xm,Xsamples);
    Cmess{itest} = 'This test should fail';
catch ME
    Vtest(itest)=true;
    Cmess{itest} = ME.message;
end

%% 52 run Mio passing a Samples where not all the input quantities are available
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',[StestPath '/FunctionForMio'], ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'missinginput'});
    
    Xsamples = Xin.Xsamples;
    run(Xm,Xsamples);
    Cmess{itest} = 'This test should fail';
catch ME
    Vtest(itest)=true;
    Cmess{itest} = ME.message;
end

%% 53 run Mio passing a structure with wrong fieldnames
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',[StestPath '/FunctionForMio'], ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'missinginput'});
    
    Tsamples = Xin.getStructure;
    run(Xm,Tsamples);
    Cmess{itest} = 'This test should fail';
catch ME
    Vtest(itest)=true;
    Cmess{itest} = ME.message;
end

%% 54 run Mio passing a matrix of wrong size
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',[StestPath '/FunctionForMio'], ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
    
    Msamples = [1 2 3; 1 2 3; 1 2 3];
    run(Xm,Msamples);
    Cmess{itest} = 'This test should fail';
catch ME
    Vtest(itest)=true;
    Cmess{itest} = ME.message;
end

%% 55 run a Mio that does not return enough outputs, matrix I/O
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',[StestPath '/FunctionForMio'], ...
        'Sfile','differenceMatrix.m', ...
        'Lfunction',true, ...
        'Liostructure', false, ...
        'Liomatrix', true, ...
        'Coutputnames',{'diff1';'diff2';'thisoutputdoesnotexists'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
    
    Tsamples = Xin.getStructure;
    run(Xm,Tsamples);
    Cmess{itest} = 'This test should fail';
catch ME
    Vtest(itest)=true;
    Cmess{itest} = ME.message;
end

%% 56 run a Mio that does not return correct outputs, structure I/O
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',[StestPath '/FunctionForMio'], ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'thisoutputdoesnotexists';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
    
    Tsamples = Xin.getStructure;
    run(Xm,Tsamples);
    Cmess{itest} = 'This test should fail';
catch ME
    Vtest(itest)=true;
    Cmess{itest} = ME.message;
end

%% 57 run a Mio that returns an empty output, structure I/O
itest=itest+1;
try
    Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',[StestPath '/FunctionForMio'], ...
        'Sfile','differenceStructureEmptyOutput.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
    
    Tsamples = Xin.getStructure;
    run(Xm,Tsamples);
    Cmess{itest} = 'This test should fail';
catch ME
    Vtest(itest)=true;
    Cmess{itest} = ME.message;
end

%% These tests are available only if we have access to the grid
if Lgrid
    % these unit tests must be executed in a network reachable folder
    SoldPath = '/tmp/UnitTest';
    cd(StestPath) %#ok<*MCCD>
    %% 58 run a compiled mio using a Script with an input and output matrix
    itest=itest+1;
    try
        Xm1=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',[StestPath '/ScriptForCompiledMio'], ...
            'Sfile','differenceMatrix.m', ...
            'Sadditionalpath',[StestPath '/AdditionalFiles'],...
            'Lfunction',false, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',4);
        Xm1 = compile(Xm1);
        Xjm = JobManagerInterface('Stype','GridEngine_matlab');
        Xg = JobManager('Xjobmanagerinterface',Xjm,'Nconcurrent',1,'Squeue','pizzas64.q');
        Pout7 = runJob(Xm1,'Xinput',Xin,'Xjobmanager',Xg);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 59 run a compiled mio using a Script with an input and output structure
    itest=itest+1;
    try
        Xm2=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',[StestPath '/ScriptForCompiledMio'], ...
            'Sfile','differenceStructure.m', ...
            'Sadditionalpath',[StestPath '/AdditionalFiles'],...
            'Lfunction',false, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',4);
        Xm2 = compile(Xm2);
        Xjm = JobManagerInterface('Stype','GridEngine_matlab');
        Xg = JobManager('Xjobmanagerinterface',Xjm,'Nconcurrent',1,'Squeue','pizzas64.q');
        Pout8 = runJob(Xm2,'Xinput',Xin,'Xjobmanager',Xg);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 60 run a compiled mio using a Function with an input and output matrix
    itest=itest+1;
    try
        Xm3=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',[StestPath '/FunctionForCompiledMio'], ...
            'Sfile','differenceMatrix.m', ...
            'Sadditionalpath',[StestPath '/AdditionalFiles'],...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',4);
        Xm3 = compile(Xm3);
        Xjm = JobManagerInterface('Stype','GridEngine_matlab');
        Xg = JobManager('Xjobmanagerinterface',Xjm,'Nconcurrent',1,'Squeue','pizzas64.q');
        Pout9 = runJob(Xm3,'Xinput',Xin,'Xjobmanager',Xg);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    %% 61 run a compiled mio using a Function with an input and output structure
    itest=itest+1;
    try
        Xm4=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',[StestPath '/FunctionForCompiledMio'], ...
            'Sfile','differenceStructure.m', ...
            'Sadditionalpath',[StestPath '/AdditionalFiles'],...
            'Lfunction',true, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        Xin = sample(Xin,'Nsamples',4);
        Xm4 = compile(Xm4);
        Xjm = JobManagerInterface('Stype','GridEngine_matlab');
        Xg = JobManager('Xjobmanagerinterface',Xjm,'Nconcurrent',1,'Squeue','pizzas64.q');
        Pout10 = runJob(Xm4,'Xinput',Xin,'Xjobmanager',Xg);
        Vtest(itest)=true;
    catch ME
        Cmess{itest} = ME.message;
    end
    
    % return to the original folder
    cd(SoldPath)
    
    % Clean up folder
    delete('*.err')
    delete('*.out')
end

%% finalize unit test
if nargout>0
    % Export name of the UnitTest
    varargout{1}='Mio';
    % Export Results of the UnitTest
    varargout{2}=Vtest;
    varargout{3}=Cmess;
else
    %% Show summary of the test
    disp('--------------------------------------------------------------------')
    disp([' Unit Test of Mio (' datestr(now) ')'])
    disp('--------------------------------------------------------------------')
    for i=1:length(Vtest)
        if Vtest(i)
            disp(['Test #' sprintf('%3i',i) ': passed  (' Cmess{i} ')' ]);
        else
            disp(['Test #' sprintf('%3i',i) ': failed  (' Cmess{i} ')' ]);
        end
    end
end
end
