%% Test All the  unit tests
% This script will write the results of this test in a report file named
% ReportUnitTest.txt!
%
% prepared by EP

%clear all;
SworkingPath='/tmp/UnitTest/';
mkdir (SworkingPath)
Spwd=pwd; % Store corrent directory

OpenCossan.setVerbosityLevel(0);
OpenCossan.setAnalysisName('UnitTest')
OpenCossan.setWorkingPath(SworkingPath)

addpath(fullfile(Spwd,'common'),...
    fullfile(Spwd,'Connectors'),...
    fullfile(Spwd,'Connectors','Connector'),...
    fullfile(Spwd,'Connectors','Extractor'),...
    fullfile(Spwd,'Connectors','HBExtractor'),...
    fullfile(Spwd,'Connectors','Injector'),...
    fullfile(Spwd,'Connectors','MappingExtractor'),...
    fullfile(Spwd,'Connectors','Mio'),...
    fullfile(Spwd,'Connectors','MTXExtractor'),...
    fullfile(Spwd,'Connectors','Op4Extractor'),...
    fullfile(Spwd,'Connectors','PunchExtractor'),...
    fullfile(Spwd,'Connectors','Response'),...
    fullfile(Spwd,'Connectors','TableExtractor'),...
    fullfile(Spwd,'HighPerformanceComputing'),...
    fullfile(Spwd,'Inputs'),...
    fullfile(Spwd,'MetaModel'),...
    fullfile(Spwd,'Optimization'),...
    fullfile(Spwd,'outputs'),...
    fullfile(Spwd,'Reliability'),...
    fullfile(Spwd,'Sensitivity'),...
    fullfile(Spwd,'SFEM'),...
    fullfile(Spwd,'Simulation') ...
    ); %#ok<MCAP>

Cusers={'EP' 'HMP' 'BG' 'MB' 'PB'};


CunitTestNames={ ...
    % common package
    'BG' 'UnitTestDataseries'; ...
    'EP' 'UnitTestEvaluator'; ...        - Summary of this function goes here
    'EP' 'UnitTestMarkovChain'; ...      - UNITTESTEVALUATOR Summary of this function goes here
    'EP' 'UnitTestModel'; ...            - Summary of this function goes here
    'EP' 'UnitTestSamples'; ...           - Unit Test of the Samples object
    'EP'  'UnitTestSolutionSequence'; ... - UNITTESTEVALUATOR Summary of this function goes here
    'EP'  'UnitTestTimer'; ...
    % common connectors package
    'MB' 'unitTestExtractor'; ...
    'MB' 'UnitTestHBExtractor'; ...
    'MB' 'unitTestIdentifier'; ...
    'MB' 'unitTestInjector'; ...
    'MB' 'unitTestMappingExtractor'; ...
    'BG' 'UnitTestMTXExtractor'; ...
    'MB' 'UnitTestOP4Extractor'; ...
    'MB' 'UnitTestPunchExtractor'; ...
    'MB' 'unitTestResponse'; ...
    'BG' 'UnitTestTableExtractor'; ...
    'MB' 'unitTestConnector'; ...
    'MB' 'unitTestMio'; ...
    %  HighPerformanceComputing package
    'MB' 'UnitTestJobManager'; ...
    'EP' 'UnitTestJobManagerInterface'; ...  % sorry, but I donÂ´t know this class weel enough anymore...
    %  Input package (10 tests)
    'BG' 'UnitTestCovarianceFunction'; ...
    'PB' 'UnitTestFunction'; ...
    'PB' 'UnitTestGaussianMixtureRandomVariableSet'; ...
    'EP' 'UnitTestInput'; ...
    'PB' 'UnitTestParameter'; ...
    'PB' 'UnitTestRandomVariables'; ...
    'PB' 'UnitTestRandomVariableSet'; ...
    'BG' 'UnitTestStochasticProcess'; ...
    'PB' 'UnitTestUserDefinedRandomVariable'; ...
    'PB' 'UnitTestDesignVariable'; ...
    % MetaModel package
    'BG' 'UnitTestModeBased'; ...
    'MB' 'UnitTestNeuralNetwork'; ...
    'BG' 'UnitTestPolynomicalChaos'; ...
    'MB' 'UnitTestResponseSurface'; ...
    % Optimization package 14 classes
    'EP' 'UnitTestCobyla'; ...
    'EP' 'UnitTestConstraint'; ...
    'EP' 'UnitTestCrossEntropy'; ...
    'EP' 'UnitTestEvolutionStrategy'; ...
    'EP' 'UnitTestGeneticAlgorithms'; ...
    'EP' 'UnitTestObjectiveFunction'; ...
    'EP' 'UnitTestOptimization'; ...
    'EP' 'UnitTestOptimizationProblem'; ...
    'EP' 'UnitTestSequentialQuadraticProgramming'; ...
    'EP' 'UnitTestSimulatedAnnealing'; ...
    'EP'  'UnitTestRBOproblem'; ...
    'MB'  'UnitTestRobustDesign'; ...
    'EP' 'UnitTestMiniMax'; ...
    'EP' 'UnitTestSimplex'; ...
    'EP' 'UnitTestBFGS'; ...
    % Output package (12 classes)
    'EP' 'UnitTestCutSet'; ...
    'EP' 'UnitTestDesignPoint'; ...
    'EP' 'UnitTestFailureProbability'; ...
    'EP' 'UnitTestGradient'; ...
    'PB' 'UnitTestLineSamplingOutput'; ...
    'EP' 'UnitTestLocalSensitivityMeasures'; ...
    'BG' 'UnitTestModes'; ...
    'BG' 'UnitTestOptimum'; ...
    'EP' 'UnitTestSensitivityMeasures'; ...
    'BG' 'UnitTestSFEMoutput'; ...
    'BG' 'UnitTestSimulationData'; ...
    'PB' 'UnitTestSubSetOutput'; ...
    % Reliability package
    'EP' 'UnitTestFaultTree'; ...
    'EP' 'UnitTestPerformanceFunction'; ...
    'EP' 'UnitTestProbabilisticModel'; ...
%    'EP' 'UnitTestSystemReliability'; ...  % TODO
    % Sensitivity package
    'EP' 'UnitTestSensitivity'; ...
    % SFEM package  (5 classes)
    'BG' 'UnitTestNastsem'; ...
    'BG' 'UnitTestNeumann'; ...
    'BG' 'UnitTestPerturbation'; ...
    'BG' 'UnitTestSfemPolynomialChaos'; ...
    % Simulation package (9 classes)
    'PB' 'UnitTestDesignOfExperiments'; ...
    'EP' 'UnitTestHaltonSampling'; ...
    'EP' 'UnitTestImportanceSampling'; ...
    'EP' 'UnitTestLatinHypercubeSampling'; ...
    'EP' 'UnitTestLineSampling'; ...
    'EP' 'UnitTestMonteCarlo'; ...
    'EP' 'UnitTestSobolSampling'; ...
    'PB' 'UnitTestSubsetSimulation'; ...
    };


%% Missing UNITTEST
CunitTestMissing={ ... % common package
    'BG' 'UnitTestSystemReliability'; ...  % TODO (Not now)
    };

Ntest=0;
Nsuccess=0;
Tresults=struct;


for n=1:size(CunitTestNames,1)
    disp(['Test number ' num2str(n) '/' num2str(size(CunitTestNames,1)) ])
    % Run Unit Test
    try
        Nfid2=fopen([CunitTestNames{n,2},'.m']);
        Sfirstline = fgetl(Nfid2);
        Ntodo=0;
        Sstring=Sfirstline;
        while ischar(Sstring)
            if ~isempty(strfind(Sstring,'TODO')) ||  ~isempty(strfind(Sstring,'FIXME'))
                Ntodo=Ntodo+1;
            end
            Sstring = fgetl(Nfid2);
        end
        
        fclose(Nfid2);
        Tresults(n).Ntodo=Ntodo;
        
        Tresults(n).Sowner=CunitTestNames{n,1};
        Tresults(n).Sdate=datestr(now);
        tic
        [Tresults(n).Sname Tresults(n).Vstatus Tresults(n).Cmess]=eval(CunitTestNames{n,2});
        Tresults(n).wallclocktime=toc;
    catch ME
        Tresults(n).wallclocktime=toc;
        Tresults(n).Sname=CunitTestNames{n,2};
        Tresults(n).Vstatus=false;
        Tresults(n).Cmess={ME.message};
    end
    Ntest=Ntest+length(Tresults(n).Vstatus);
    Nsuccess=Nsuccess+sum(Tresults(n).Vstatus);
end


rmpath(fullfile(Spwd,'common'),...
    fullfile(Spwd,'Connectors'),...
    fullfile(Spwd,'Connectors','Connector'),...
    fullfile(Spwd,'Connectors','Extractor'),...
    fullfile(Spwd,'Connectors','HBExtractor'),...
    fullfile(Spwd,'Connectors','Injector'),...
    fullfile(Spwd,'Connectors','MappingExtractor'),...
    fullfile(Spwd,'Connectors','Mio'),...
    fullfile(Spwd,'Connectors','MTXExtractor'),...
    fullfile(Spwd,'Connectors','Op4Extractor'),...
    fullfile(Spwd,'Connectors','PunchExtractor'),...
    fullfile(Spwd,'Connectors','Response'),...
    fullfile(Spwd,'Connectors','TableExtractor'),...
    fullfile(Spwd,'HighPerformanceComputing'),...
    fullfile(Spwd,'Inputs'),...
    fullfile(Spwd,'MetaModel'),...
    fullfile(Spwd,'Optimization'),...
    fullfile(Spwd,'outputs'),...
    fullfile(Spwd,'Reliability'),...
    fullfile(Spwd,'Sensitivity'),...
    fullfile(Spwd,'SFEM'),...
    fullfile(Spwd,'Simulation') ...
    );


close all

cd(Spwd)
%% Print Report
Tinfo=getSystemInfo;

Nfid=fopen('ReportUnitTest.txt','w+');
fprintf(Nfid,'%s\n','********************************************************************************');
fprintf(Nfid,'%s\n',[' REPORT OF UNIT TEST (' datestr(now) ')']);
fprintf(Nfid,'%s\n',' ');
fprintf(Nfid,'%s\n',[' Matlab version : ' Tinfo.Smatlabversion ' Architecture: ' Tinfo.Sarch]);
fprintf(Nfid,'%s\n',[' Host Machine OS: ' Tinfo.Sdistribution ' (' Tinfo.Srelease ')']);
fprintf(Nfid,'%s\n',' ');
fprintf(Nfid,'%s\n',[' Successful: ' num2str(100*(Nsuccess/Ntest)) '%']);
fprintf(Nfid,'%s\n','********************************************************************************');

%% Show summary for each users
for n=1:length(Cusers)
    fprintf(Nfid,'\n\n%s\n','********************************************************************************')  ;
    fprintf(Nfid,'%s\n',[' REPORT FOR ' Cusers{n}]);
    for itest=1:length(Tresults);
        if strcmp(CunitTestNames{itest,1},Cusers{n});
            
            fprintf(Nfid,'%40s',CunitTestNames{itest,2});
            fprintf(Nfid,' Successful: %6.2f%% of %2i tests', ...
                100*(sum(Tresults(itest).Vstatus)/length(Tresults(itest).Vstatus)), ...
                length(Tresults(itest).Vstatus));
            fprintf(Nfid,' TODO/FIXME: %2i \n', Tresults(itest).Ntodo);
            
        end
    end
    fprintf(Nfid,'%s\n','********************************************************************************');
end

%% Show missing UNIT TEST for each users
fprintf(Nfid,'\n\n%s\n','********************************************************************************');  ;
fprintf(Nfid,'%s\n','*  MISSING UNIT-TESTS ');
fprintf(Nfid,'%s\n','********************************************************************************');

    for itest=1:size(CunitTestMissing,1)
           fprintf(Nfid,'%i) %5s - %s\n',itest,CunitTestMissing{itest,1},CunitTestMissing{itest,2});
    end


for n=1:length(Tresults)
    %% Show details of each UNIT TESTS
    fprintf(Nfid,'\n\n%s\n','--------------------------------------------------------------------');
    fprintf(Nfid,'%s\n',[' Unit Test of ' Tresults(n).Sname ]);
    fprintf(Nfid,'%s\n',[' Unit Test executed in  ' num2str(Tresults(n).wallclocktime) ' seconds']);
    fprintf(Nfid,'%s\n','--------------------------------------------------------------------');
    for i=1:length(Tresults(n).Vstatus)
        if Tresults(n).Vstatus(i)
            fprintf(Nfid,'%s\n',['Test #' sprintf('%3i',i) ': passed  (' Tresults(n).Cmess{i} ')' ]);
        else
            fprintf(Nfid,'%s\n',['Test #' sprintf('%3i',i) ': failed  (' Tresults(n).Cmess{i} ')' ]);
        end
    end
end

fclose(Nfid);
rmdir (SworkingPath,'s')
