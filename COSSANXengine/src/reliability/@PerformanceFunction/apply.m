function [varargout] = apply(Xpf,XSimulationData)

% APPLY    Apply SimulationData to the performance function object 
%
%           
%   MANDATORY ARGUMENTS:
%    - SimulationData is generated by a Model object 
%
%   OPTIONAL ARGUMENTS:
%   varargout{1} = SimulationData object
%
%   Usage:  Xout = Xpf.apply(XSimulationData)
%
%   see also: 
%   Model,  ProbabilisticModel
%
% =========================================================================
% COSSAN - COmputational Stochastic Structural Analysis
% 4th-floor, Department Civil Engineering, University of Innsbruck, Austria,
% EU, Earth planet, Milk galassy 
% =========================================================================

%%  Check inputs
if ~isa(XSimulationData,'SimulationData')
    error('openCOSSAN:reliability:PerformaceFunction:apply',...
            'An object SimulationData is mandatory.');
end

if ~isempty(Xpf.Xmio)
     XsoTMP=Xpf.Xmio.run(XSimulationData.Tvalues);        
     Vg = XsoTMP.getValues('Sname',Xpf.Xmio.Coutputnames{:});        
else
    %% Compute PerformanceFunction as Capacity-Demand
    %capacity=XSimulationData.getValues('Sname',Xpf.Scapacity);
    %demand=XSimulationData.getValues('Sname',Xpf.Sdemand);
    
    Vg=XSimulationData.compute('Cnames',{Xpf.Scapacity;Xpf.Sdemand},'Soperation','-');
    % TODO: workaround until compute method is fixed
    if size(Vg,2)~=1
        Vg = Vg';
    end
    
end

Xout    = XSimulationData.addData('Cnames',{Xpf.Soutputname},'Mvalues',Vg);
varargout{1}    = Xout;
varargout{2}    = Vg;
