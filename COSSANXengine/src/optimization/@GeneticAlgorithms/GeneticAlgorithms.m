classdef GeneticAlgorithms < Optimizer
    %   GeneticAlgorithms is intended for
    %   solving an optimization problem by evaluating the objective function
    %   and constraints, i.e. gradients are not required.
    
    properties % Public access
        NPopulationSize             = 20    %scalar, number of individuals in population
        NEliteCount                 = 2     %scalar, indicates the number of elite individuals that are passed directly to the next generation
        crossoverFraction           = 0.8   %percentage of individuals of the next generation that are generated by means of crossover operations
        NStallGenLimit              = 50    %scalar; the optimization algorithm stops if there has been no improvement in the objective function for 'NStallGenLimit' consecutive generations
        initialPenalty              = 10    %Initial value of penalty parameter; used in constrained optimization
        SFitnessScalingFcn          = 'fitscalingrank'      %scaling of fitness function
        SSelectionFcn               = 'selectionstochunif'  %function for selecting parents for crossover and mutation
        SCrossoverFcn               = 'crossoverscattered'  %function for generating crossover children
        SMutationFcn                = 'mutationgaussian'    %function for generating mutation children
        SCreationFcn                = 'gacreationlinearfeasible' % function for generate initial population
        mutationRate                = 0.01  %parameter that controls probability of mutation of an invidual variable within an individual when the method 'mutationuniform' is employed
        Vscale                      = 1     %parameter that controls magnitude of perturbation introduced when 'mutationgaussian' is employed; it controls the standard deviation of a Gaussian distribution. This parameter can be either a scalar or a vector of length equal to the total number of design variables
        Vshrink                     = 1     %this parameter controls the width of the parameter 'Vscale' through successive generations
        LextremeOptima              =false  %condition for seeking the extreme values of the objective function, i.e. min and max at the same time.
    end
    
    properties (Hidden,SetAccess = private)
        CcreationFunction={'gacreationuniform' 'gacreationlinearfeasible'}
        
        CmutationFunction={'mutationuniform' 'mutationadaptfeasible' 'mutationgaussian'}
        
        CfitnessScalingFunction={'fitscalingshiftlinear' 'fitscalingprop' ...
            'fitscalingtop' 'fitscalingrank'}
        
        CcrossoverFunction={'crossoverheuristic' 'crossoverscattered' 'crossoverintermediate' ...
            'crossoversinglepoint' 'crossovertwopoint' 'crossoverarithmetic'}
        
        CselectionFunction={'selectionremainder' 'selectionuniform' ...
            'selectionstochunif' 'selectionroulette' 'selectiontournament'}
    end
    
    methods
        varargout    = apply(Xobj,varargin)  %This method perform the simulation adopting the Xobj
        [Tstate,Toptions,Loptchanged] = outputFunction(Xobj,Toptions,Tstate,Sflag)
        
        function Xobj   = GeneticAlgorithms(varargin)
            %GENETICALGORITHMS   Constructor function for class GeneticAlgorithms
            %
            %   GeneticAlgorithms
            %
            %   This is the contructor for class GeneticAlgorithms; it is intended for
            %   solving an optimization problem by evaluating the objective function
            %   and constraints, i.e. gradients are not required. When generating the
            %   constructor, it is possible to select the parameters of the
            %   optimization algorithm. It should be noted that default parameters are
            %   provided for the algorithm; nonetheless, the user should always check
            %   whether or not a particular set of parameters is appropriate for the
            %   problem at hand. A poor selection on these parameters may prevent
            %   finding the correct solution.
            %
            %   GeneticAlgorithms are intended for solving the following class of
            %   problems
            %
            %                       min     f_obj(x)
            %                       subject to
            %                               ceq(x)      =  0
            %                               cineq(x)    <= 0
            %                               lb <= x <= ub
            %
            % Author: Edoardo Patelli
            % Institute for Risk and Uncertainty, University of Liverpool, UK
            % email address: openengine@cossan.co.uk
            % Website: http://www.cossan.co.uk
            
            % =====================================================================
            % This file is part of openCOSSAN.  The open general purpose matlab
            % toolbox for numerical analysis, risk and uncertainty quantification.
            %
            % openCOSSAN is free software: you can redistribute it and/or modify
            % it under the terms of the GNU General Public License as published by
            % the Free Software Foundation, either version 3 of the License.
            %
            % openCOSSAN is distributed in the hope that it will be useful,
            % but WITHOUT ANY WARRANTY; without even the implied warranty of
            % MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            % GNU General Public License for more details.
            %
            %  You should have received a copy of the GNU General Public License
            %  along with openCOSSAN.  If not, see <http://www.gnu.org/licenses/>.
            % =====================================================================
            
            %  Optimization Options - default parameters
            Xobj.Sdescription   = 'GeneticAlgorithms object';
            Xobj.Nmax           = 1e5;
            
            % Argument Check
            OpenCossan.validateCossanInputs(varargin{:})
            
            % Process input arguments
            for k=1:2:length(varargin)
                switch lower(varargin{k})
                    % From the super-class
                    case {'nmaxiterations','ngenerations'}
                        Xobj.NmaxIterations=varargin{k+1};
                    case 'sdescription'
                        Xobj.Sdescription=varargin{k+1};
                    case  {'nmax','nmaxmodelevaluations'}
                        Xobj.Nmax=varargin{k+1};
                    case  'objectivelimit'
                        Xobj.objectiveLimit=varargin{k+1};
                    case  'timeout'
                        Xobj.timeout=varargin{k+1};
                    case  'toleranceobjectivefunction'
                        Xobj.toleranceObjectiveFunction=varargin{k+1};
                    case  'toleranceconstraint'
                        Xobj.toleranceConstraint=varargin{k+1};
                    case 'lintermediedresults'
                        Xobj.Lintermediedresults=varargin{k+1};
                    case  'scalingfactor'
                        Xobj.scalingFactor=varargin{k+1};
                    case  'penalityfactor'
                        Xobj.penalityFactor=varargin{k+1};
                    case  'xjobmanager'
                        Xobj.XjobManager=varargin{k+1};
                        
                    case {'nseedrandomnumbergenerator'}
                        Nseed       = varargin{k+1};
                        Xobj.RandomNumberGenerator = ...
                            RandStream('mt19937ar','Seed',Nseed);
                    case {'xrandomnumbergenerator'}
                        if isa(varargin{k+1},'RandStream'),
                            Xobj.XrandomNumberGenerator  = varargin{k+1};
                        else
                            error('openCOSSAN:GeneticAlgorithms',...
                                ['argument associated with (' varargin{k} ') is not a RandStream object']);
                        end
                    case  'npopulationsize'
                        Xobj.NPopulationSize=varargin{k+1};
                    case  'crossoverfraction'
                        Xobj.crossoverFraction=varargin{k+1};
                    case  'nelitecount'
                        Xobj.NEliteCount=varargin{k+1};
                    case  'nstallgenlimit'
                        Xobj.NStallGenLimit=varargin{k+1};
                    case  'sfitnessscalingfcn'
                        assert(ismember(varargin{k+1},Xobj.CfitnessScalingFunction), ...
                            'openCOSSAN:GeneticAlgorithms', ...
                            strcat('Available options for SFitnessscalingFcn are: ',sprintf('\n* %s',Xobj.CfitnessScalingFunction{:})))
                        
                        Xobj.SFitnessScalingFcn=varargin{k+1};
                    case  'sselectionfcn'
                        assert(ismember(varargin{k+1},Xobj.CselectionFunction), ...
                            'openCOSSAN:GeneticAlgorithms', ...
                            strcat('Available options for SSelectionFcn are: ',sprintf('\n* %s', Xobj.CselectionFunction{:})))
                        Xobj.SSelectionFcn=varargin{k+1};
                    case  'smutationfcn'
                        assert(ismember(varargin{k+1},Xobj.CmutationFunction), ...
                            'openCOSSAN:GeneticAlgorithms', ...
                            strcat('Available options for SMutationFcn are: ',sprintf('\n*  %s', Xobj.CmutationFunction{:})))
                        
                        Xobj.SMutationFcn=varargin{k+1};
                    case  'scrossoverfcn'
                        assert(ismember(varargin{k+1},Xobj.CcrossoverFunction), ...
                            'openCOSSAN:GeneticAlgorithms', ...
                            strcat('Available options for SCrossoverFcn are: ',sprintf('\n*  %s', Xobj.CcrossoverFunction{:})))
                        
                        Xobj.SCrossoverFcn=varargin{k+1};
                    case  'screationfcn'
                        assert(ismember(varargin{k+1},Xobj.CcreationFunction), ...
                            'openCOSSAN:GeneticAlgorithms', ...
                            strcat('Available options for SCreationFcn are: ',sprintf('\n*  %s', Xobj.CcreationFunction{:})))
                        
                        Xobj.SCreationFcn=varargin{k+1};
                    case  'mutationrate'
                        Xobj.mutationRate=varargin{k+1};
                    case  'vscale'
                        Xobj.Vscale=varargin{k+1};
                    case  'vshrink'
                        Xobj.Vshrink=varargin{k+1};
                    case 'lextremeoptima'
                        Xobj.LextremeOptima=varargin{k+1};
                    otherwise
                        error('openCOSSAN:GeneticAlgorithms',...
                            'PropertyName %s not valid ',varargin{k} );
                end
                
            end % input check
            
        end
        
    end
    
end
