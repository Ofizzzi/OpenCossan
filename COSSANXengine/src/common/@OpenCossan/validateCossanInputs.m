function validateCossanInputs(varargin)
% VALIDATECOSSANINPUTS This function checks if the input argument of
% OpenCossan function has been passed correctly
%
% See Also: http://cossan.co.uk/wiki/index.php/ValidateCossanInputs@OpenCossan
%
% Author: Edoardo Patelli
% Institute for Risk and Uncertainty, University of Liverpool, UK
% email address: openengine@cossan.co.uk
% Website: http://www.cossan.co.uk

% =====================================================================
% This file is part of openCOSSAN.  The open general purpose matlab
% toolbox for numerical analysis, risk and uncertainty quantification.
%
% openCOSSAN is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License.
%
% openCOSSAN is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
%  You should have received a copy of the GNU General Public License
%  along with openCOSSAN.  If not, see <http://www.gnu.org/licenses/>.
% =====================================================================

%% Check if the arguments has been passed as pairs of PropertyName/Value
if mod(length(varargin),2)
    exception = MException('openCOSSAN:validateCOSSANInputs', ...
        ['each PropertyName field must be followed by its corresponding VALUE' ...
        ' \n * Length of arguments: ' num2str(length(varargin))]);
    % Report error
    throwAsCaller(exception)
end

%% Check individual arguments
for k=1:2:length(varargin)
    if ~isa(varargin{k},'char')
        exception = MException('openCOSSAN:validateCOSSANInputs', ...
            ['The PropertyName at position ' num2str(k) ' must be a string' ...
            ' instead of a ' class(varargin{k}) ]);
        % Report error
        throwAsCaller(exception)
    end
    
    % Check the first letter of the PropertyName to identified the expected
    % type of object
    try
        switch (varargin{k}(1))
            case 'L'
                % Logical value
                assert(isa(varargin{k+1},'logical'),...
                    'openCOSSAN:validateCOSSANInputs', ...
                    ['The input value after the PropertyName ' varargin{k} ...
                    ' must be a logical value. ' ...
                    '\n * Value provided is of type ' class(varargin{k+1})  ])
            case 'S'
                % String value
                assert(isa(varargin{k+1},'char'),...
                    'openCOSSAN:validateCOSSANInputs', ...
                    ['The input value after the PropertyName ' varargin{k} ...
                    ' must be a string' ...
                    '\n * Value provided is of type ' class(varargin{k+1})  ])
            case 'N'
                % Integer value
                assert(isa(varargin{k+1},'numeric'),...
                    'openCOSSAN:validateCOSSANInputs', ...
                    ['The input value after the PropertyName %s must be an integer.' ...
                    ' \n * Value provided is of type %s'], ...
                    varargin{k},class(varargin{k+1}))
                assert(length(varargin{k+1})==1,...
                    'openCOSSAN:validateCOSSANInputs', ...
                    ['The input value after the PropertyName ' varargin{k} ...
                    ' must be a single integer' ...
                    '\n * Value provided is of length %s'],sprintf('%i ',length(varargin{k+1})))
                assert(isempty(regexp(num2str(varargin{k+1}),'[\.i]','once')),...
                    'openCOSSAN:validateCOSSANInputs', ...
                    ['The input value after the PropertyName ' varargin{k} ...
                    ' must be an integer' ...
                    '\n * Value provided is of type %s (%f)'],class(varargin{k+1}),varargin{k+1})
                assert(varargin{k+1}>=0, ...
                    'openCOSSAN:validateCOSSANInputs', ...
                    ['The input value after the PropertyName ' varargin{k} ...
                    ' must be positive' ...
                    '\n * Value provided is of type %s (%f)'], class(varargin{k+1}),varargin{k+1})
            case 'C'
                % Cell
                assert(isa(varargin{k+1},'cell'),...
                    'openCOSSAN:validateCOSSANInputs', ...
                    ['The input value after the PropertyName ' varargin{k} ...
                    ' must be a cell' ...
                    '\n * Value provided is of type ' class(varargin{k+1})  ])
                switch (varargin{k}(2))
                    case 'C'
                        assert(isa(varargin{k+1}{1},'cell'),...
                            'openCOSSAN:validateCOSSANInputs', ...
                            ['The input value after the PropertyName ' varargin{k} ...
                            ' must be an cell of cell array' ...
                            '\n * Value provided is of type ' class(varargin{k+1})  ])
                        for ncell=1:length(varargin{k+1}{1})
                            assert(~isempty(regexp(class(varargin{k+1}{1}{ncell}),'^[A-Z]', 'once')), ...
                                'openCOSSAN:validateCOSSANInputs', ...
                                ['The input value after the PropertyName ' varargin{k} ...
                                ' must be a cell of cell of COSSAN objects \n ' ...
                                'The object inside the cell at position ' num2str(ncell) ...
                                ' is of type: ' class(varargin{k+1}{1}{ncell})])
                        end
                    case 'S'
                        assert(iscellstr(varargin{k+1}),...
                            'openCOSSAN:validateCOSSANInputs', ...
                            ['The input value after the PropertyName ' varargin{k} ...
                            ' must be a cell of strings' ...
                            '\n * Value provided is of type ' class(varargin{k+1})  ])
                    case 'X'
                        for ncell=1:length(varargin{k+1})
                            assert(~isempty(regexp(class(varargin{k+1}{ncell}),'^[A-Z]', 'once')), ...
                                'openCOSSAN:validateCOSSANInputs', ...
                                ['The input value after the PropertyName ' varargin{k} ...
                                ' must be a cell of COSSAN objects \n' , ...
                                'The object inside the cell at position ' num2str(ncell) ...
                                ' is of type: ' class(varargin{k+1}{ncell})])
                        end
                end
            case 'V'
                % Array of double
                assert(isa(varargin{k+1},'float'),...
                    'openCOSSAN:validateCOSSANInputs', ...
                    ['The input value after the PropertyName ' varargin{k} ...
                    ' must be a array of Single- or double-precision floating-point array' ...
                    '\n * Value provided is of type ' class(varargin{k+1})  ])
                assert (isvector(varargin{k+1}), ...
                    'openCOSSAN:validateCOSSANInputs', ...
                    ['The input value after the PropertyName ' varargin{k} ...
                    ' must be a Vector' ...
                    '\n * Value provided is of type ' class(varargin{k+1})  ])
            case 'M'
                % Array of double
                assert(isa(varargin{k+1},'float'),...
                    'openCOSSAN:validateCOSSANInputs', ...
                    ['The input value after the PropertyName ' varargin{k} ...
                    ' must be a array of Single- or double-precision floating-point array ' ...
                    '\n * Value provided is of type ' class(varargin{k+1})  ])
                
            case {'A'}
                % Function Handle
                assert(isa(varargin{k+1},'function_handle'),...
                    'openCOSSAN:validateCOSSANInputs', ...
                    ['The input value after the PropertyName ' varargin{k} ...
                    ' must be a function handle ' ...
                    '\n * Value provided is of type ' class(varargin{k+1})  ])
            case {'H'}
                % Figure Handle
                assert(all(ishandle(varargin{k+1})),...
                    'openCOSSAN:validateCOSSANInputs', ...
                    ['The input value after the PropertyName ' varargin{k} ...
                    ' must be a fighandle ' ...
                    '\n * Value provided is of type ' class(varargin{k+1})  ])
            case {'T'}
                % Array of double
                assert(isa(varargin{k+1},'struct'),'openCOSSAN:validateCOSSANInputs', ...
                    ['The input value after the PropertyName ' varargin{k} ...
                    ' must be a structure ' ...
                    '\n * Value provided is of type ' class(varargin{k+1})  ])
            case {'X'}
                % COSSAN object
                assert(~isempty(regexp(class(varargin{k+1}),'^[A-Z]', 'once')), ...
                    'openCOSSAN:validateCOSSANInputs', ...
                    ['The object after the PropertyName ' varargin{k} ...
                    ' is not a COSSAN object. It is a ' ...
                    class(varargin{k+1}) ' object '])
            otherwise
                % It should be a double
                % It can not be any of the recognized type
                assert(isnumeric(varargin{k+1}),...
                    'openCOSSAN:validateCOSSANInputs', ...
                    ['The input value after the PropertyName ' varargin{k} ...
                    ' must be a numeric value' ...
                    '\n * Value provided is of type ' class(varargin{k+1})  ])
                
                assert(isscalar(varargin{k+1}), ...
                    'openCOSSAN:validateCOSSANInputs',...
                    'The valus after the PropertyName %s must be a scalar value ', varargin{k})
                
        end
        
    catch exception
        throwAsCaller(exception)
    end
end


