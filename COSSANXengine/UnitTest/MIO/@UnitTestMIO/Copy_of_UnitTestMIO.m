classdef UnitTestMIO < matlab.unittest.TestCase
    % This is a unit test fpr tje MIO connector
    %   Detailed explanation goes here
    
%     properties
%        Xinput;
% %        Xm;
%     end
%     
%     methods (TestClassSetup)
%         function AddPathAndCreateInputs(testCase) % the inputs must be created to be able to test the MIO
% %             testCase.OriginalPath = path %enables the removal of the path
%              addpath(fullfile(OpenCossan.getCossanRoot,'UnitTest','MIO','FunctionForMio')); % creates the path
% % StestPath = fullfile(OpenCossan.getCossanRoot,'examples','Unit_test','Connectors','Mio')
% %             Spath = fullfile(OpenCossan.getCossanRoot,'UnitTest', 'MIO'); %sets the test path for the 
%             Xrv1 = RandomVariable('Sdistribution', 'uniform', 'par1', 9,'par2', 11) ;%define the first random variable
%             Xrv2 = RandomVariable('Sdistribution', 'uniform', 'par1', 14,'par2', 16); %defines the second random variable
%             Xrvs = RandomVariableSet('Cmembers',{'Xrv1','Xrv2'},'CXrandomvariables',{Xrv1,Xrv2}); % defines the random variable set
%             testCase.Xinput = Input; %creates and input object
%             testCase.Xinput = add(testCase.Xinput,Xrvs); %adds a random variable set to the Input objects
%             %OpenCossan.setVerbosityLevel=0; %sets the minimum verbosity level
%         end
%     end
%     
% %     methods (TestClassTeardown)
% %         function restorePathandremoveInputs(testCase) %removes the added path and the inputs created for this class of Unit Tests
% %             path(testCase.OriginalPath); %resets the path
% %             clear Xrv1 Xrv2 Xrvs;
% %             clear Xinput;
% %         end
% %     end
            
    properties
        Xinput;
        Xm;
    end
    
    methods (TestClassSetup)
        function AddPathAndCreateInputs(testCase) % the inputs must be created to be able to test the MIO
            testCase.addTeardown(@path, addpath(fullfile(OpenCossan.getCossanRoot,'UnitTest','MIO','FunctionForMio'))); % creates the path and enables the removal of the path before and after each unit test
            testCase.addTeardown(@path, addpath(fullfile(OpenCossan.getCossanRoot,'UnitTest','MIO','ScriptForMio'))); % creates the path and enables the removal of the path before and after each unit test
%             StestPath = fullfile('UnitTest', 'MIO'); %sets the test path for the 
            Xrv1 = RandomVariable('Sdistribution', 'uniform', 'par1', 9,'par2', 11) ;%define the first random variable
            Xrv2 = RandomVariable('Sdistribution', 'uniform', 'par1', 14,'par2', 16); %defines the second random variable
            Xrvs = RandomVariableSet('Cmembers',{'Xrv1','Xrv2'},'CXrandomvariables',{Xrv1,Xrv2}); % defines the random variable set
            testCase.Xinput = Input; %creates and input object
            testCase.Xinput = add(testCase.Xinput,Xrvs); %adds a random variable set to the Input objects
        end
    end

    methods (Test)
        function DisplayMethod(testCase) % Testing the display method
            Xm = Mio('Sdescription','Mio for unit Test','Spath',('FunctionForMio'),'Sfile','differenceStructure.m','Lfunction',true,'Liostructure',true,'Liomatrix',false,'Coutputnames',{'diff1';'diff2'},'Cinputnames',{'Xrv1';'Xrv2'});
            
            testCase.assertTrue(Xm.Lfunction,1);
            testCase.assertTrue(Xm.Liostructure,1);
            testCase.assertFalse(Xm.Liomatrix,0);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function DeterministicAnalysisMioWithStructureIO(testCase) % Tests deterministicAnalysis Mio with a structure i/o
            Xm=Mio('Sdescription','Mio for Unit Test', ...
                'Spath',fullfile('FunctionForMio'), ...
                'Sfile','differenceStructure.m', ...
                'Lfunction',true, ...
                'Liostructure', true, ...
                'Liomatrix', false, ...
                'Coutputnames',{'diff1';'diff2'},...
                'Cinputnames',{'Xrv1';'Xrv2'});
            deterministicAnalysis(Xm,testCase.Xinput);
            
            testCase.assertTrue(Xm.Lfunction,1);
            testCase.assertTrue(Xm.Liostructure,1);
            testCase.assertFalse(Xm.Liomatrix,0);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
            
        end
        function MioWithStructureUsingSampleValuesPassingInput(testCase) % Test Mio with a structure using sampled values, passing Input
            Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('FunctionForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',true, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput);
        
            testCase.assertTrue(Xm.Lfunction,1);
            testCase.assertTrue(Xm.Liostructure,1);
            testCase.assertFalse(Xm.Liomatrix,0);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
            
        end
        function MioWithStructureUsingSampleValuesPassingSamples(testCase) % Test Mio with a structure using sampled values, passing Samples
            Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('FunctionForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',true, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput.Xsamples);
        
            testCase.assertTrue(Xm.Lfunction,1);
            testCase.assertTrue(Xm.Liostructure,1);
            testCase.assertFalse(Xm.Liomatrix,0);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioWithStructureUsingSampleValuesPassingStructure(testCase) % Test Mio with a structure using sampled values, passing Structure
            Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('FunctionForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',true, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput.getStructure);
        
            testCase.assertTrue(Xm.Lfunction,1);
            testCase.assertTrue(Xm.Liostructure,1);
            testCase.assertFalse(Xm.Liomatrix,0);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioWithStructureUsingSampleValuesPassingMatrix(testCase) % Test Mio with a structure using sampled values, passing a matrix
            Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('FunctionForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',true, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput.Xsamples.MsamplesPhysicalSpace);
        
            testCase.assertTrue(Xm.Lfunction,1);
            testCase.assertTrue(Xm.Liostructure,1);
            testCase.assertFalse(Xm.Liomatrix,0);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioWithMatrixInputOutputPassingInput(testCase) %  Test Mio with a Matrix as Input and Output, passing a Input
            Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('FunctionForMio'), ...
            'Sfile','differenceMatrix.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput);
        end
        function MioWithMatrixInputOutputPassingSample(testCase)  % Test Mio with a Matrix as Input and Output, passing a Samples
            Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('FunctionForMio'), ...
            'Sfile','differenceMatrix.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput.Xsamples);
        
            testCase.assertTrue(Xm.Lfunction,1);
            testCase.assertFalse(Xm.Liostructure,0);
            testCase.assertTrue(Xm.Liomatrix,1);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioWithMAtrixInputOutputPassingStructure(testCase) % Test Mio with a Matrix as Input and Output, passing a structure
            Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('FunctionForMio'), ...
            'Sfile','differenceMatrix.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput.getStructure);
        
            testCase.assertTrue(Xm.Lfunction,1);
            testCase.assertFalse(Xm.Liostructure,0);
            testCase.assertTrue(Xm.Liomatrix,1);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioWithMatrixInputOutputPassingMatrix(testCase)  % Testing Mio with a Matrix as Input and Output, passing a matrix
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('FunctionForMio'), ...
            'Sfile','differenceMatrix.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput.Xsamples.MsamplesPhysicalSpace);
        
            testCase.assertTrue(Xm.Lfunction,1);
            testCase.assertFalse(Xm.Liostructure,0);
            testCase.assertTrue(Xm.Liomatrix,1);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioWithMultipleVectorsInputOutputPassingInput(testCase) % Testing Mio with multiple vectors as Input and Output, passing a Input
            Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('FunctionForMio'), ...
            'Sfile','differenceFunction.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
            run(Xm,testCase.Xinput);
        
            testCase.assertTrue(Xm.Lfunction,1);
            testCase.assertFalse(Xm.Liostructure,0);
            testCase.assertFalse(Xm.Liomatrix,0);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioWithMultipleVectorsInputOutputPassingSamples(testCase) % Testing Mio with multiple vectors as Input and Output, passing a Samples
            Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('FunctionForMio'), ...
            'Sfile','differenceFunction.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput.Xsamples);
        
            testCase.assertTrue(Xm.Lfunction,1);
            testCase.assertFalse(Xm.Liostructure,0);
            testCase.assertFalse(Xm.Liomatrix,0);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioWithMultipleVectorsInputOutputPassingStructure(testCase) % Testing Mio with multiple vectors as Input and Output, passing a structure
            Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('FunctionForMio'), ...
            'Sfile','differenceFunction.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput.getStructure);
        
            testCase.assertTrue(Xm.Lfunction,1);
            testCase.assertFalse(Xm.Liostructure,0);
            testCase.assertFalse(Xm.Liomatrix,0);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioWithMultipleVectorsInputOutputPassingMatrix(testCase)  % Testing Mio with multiple vectors as Input and Output, passing a matrix
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('FunctionForMio'), ...
            'Sfile','differenceFunction.m', ...
            'Lfunction',true, ...
            'Liostructure', false, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput.Xsamples.MsamplesPhysicalSpace);
        
            testCase.assertTrue(Xm.Lfunction,1);
            testCase.assertFalse(Xm.Liostructure,0);
            testCase.assertFalse(Xm.Liomatrix,0);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
         function MioUsingScriptWithStructureInputOutputPassingInput(testCase)  % Testing Mio using a script with a structure as input and output, passing Input
            Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('ScriptForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',false, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
       testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput);
%         
%             testCase.assertFalse(Xm.Lfunction,0);
%             testCase.assertTrue(Xm.Liostructure,1);
%             testCase.assertFalse(Xm.Liomatrix,0);
%             testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
%             testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioWithScriptInputOutputPassingSamples(testCase) % Testing Mio using a script with a structure as input and output, passing Samples
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('ScriptForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',false, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput.Xsamples);
        
            testCase.assertFalse(Xm.Lfunction,0);
            testCase.assertTrue(Xm.Liostructure,1);
            testCase.assertFalse(Xm.Liomatrix,0);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioUsingScriptWithStructureInputOutputPassingStructure(testCase) % Testing Mio using a script with a structure as input and output, passing structure
            Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('ScriptForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',false, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput.getStructure);
        
            testCase.assertFalse(Xm.Lfunction,0);
            testCase.assertTrue(Xm.Liostructure,1);
            testCase.assertFalse(Xm.Liomatrix,0);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioUsingScriptWithStructureInputOutputPassingMatrix(testCase) % Testing Mio using a script with a structure as input and output, passing matrix
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('ScriptForMio'), ...
            'Sfile','differenceStructure.m', ...
            'Lfunction',false, ...
            'Liostructure', true, ...
            'Liomatrix', false, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput.Xsamples.MsamplesPhysicalSpace);
        
            testCase.assertFalse(Xm.Lfunction,0);
            testCase.assertTrue(Xm.Liostructure,1);
            testCase.assertFalse(Xm.Liomatrix,0);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioUsingScriptWithMatrixInputOutputPassingInput(testCase) % Testing Mio using a script with a matrix as input and output, passing Input
            Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('ScriptForMio'), ...
            'Sfile','differenceMatrix.m', ...
            'Lfunction',false, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput);
        
            testCase.assertFalse(Xm.Lfunction,0);
            testCase.assertFalse(Xm.Liostructure,0);
            testCase.assertTrue(Xm.Liomatrix,1);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioUsingScriptWithMatrixInputOutputPassingSamples(testCase) % Testing Mio using a script with a matrix as input and output, passing Samples
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('ScriptForMio'), ...
            'Sfile','differenceMatrix.m', ...
            'Lfunction',false, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput.Xsamples);
        
            testCase.assertFalse(Xm.Lfunction,0);
            testCase.assertFalse(Xm.Liostructure,0);
            testCase.assertTrue(Xm.Liomatrix,1);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioUsingScriptWithMatrixInputOutputPassingStructure(testCase) % Testing Mio using a script with a matrix as input and output, passing structure
        Xm=Mio('Sdescription','Mio for Unit Test', ...
            'Spath',('ScriptForMio'), ...
            'Sfile','differenceMatrix.m', ...
            'Lfunction',false, ...
            'Liostructure', false, ...
            'Liomatrix', true, ...
            'Coutputnames',{'diff1';'diff2'},...
            'Cinputnames',{'Xrv1';'Xrv2'});
        testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
        run(Xm,testCase.Xinput.getStructure);
        
            testCase.assertFalse(Xm.Lfunction,0);
            testCase.assertFalse(Xm.Liostructure,0);
            testCase.assertTrue(Xm.Liomatrix,1);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
        function MioUsingScriptWithMatrixInputOutputPassingMatrix(testCase)  % Testing Mio using a script with a matrix as input and output, passing matrix
            Xm=Mio('Sdescription','Mio for Unit Test', ...
                'Spath',('ScriptForMio'), ...
                'Sfile','differenceMatrix.m', ...
                'Lfunction',false, ...
                'Liostructure', false, ...
                'Liomatrix', true, ...
                'Coutputnames',{'diff1';'diff2'},...
                'Cinputnames',{'Xrv1';'Xrv2'});
         testCase.Xinput = sample(testCase.Xinput,'Nsamples',10);
         run(Xm,testCase.Xinput.Xsamples.MsamplesPhysicalSpace);
         
            testCase.assertFalse(Xm.Lfunction,0);
            testCase.assertFalse(Xm.Liostructure,0);
            testCase.assertTrue(Xm.Liomatrix,1);
            testCase.assertEqual(Xm.Coutputnames',{'diff1';'diff2'});
            testCase.assertEqual(Xm.Cinputnames',{'Xrv1';'Xrv2'});
        end
%% These Tests are to ensure that the if the parameters are not correct the command fails
        function WrongInputsToConstructor(testCase)  % Checks that the command fails when the wrong input is passed to the constructor
               testCase.verifyError(@()Mio('Sdescription','Mio for Unit Test', ...
               'Spath',('FunctionForMio'), ...
               'Sfile','differenceStructure.m', ...
               'Sunexistingproperty',':-)', ...
               'Liostructure', true, ...
               'Liomatrix', false, ...
               'Coutputnames',{'diff1';'diff2'},...
               'Cinputnames',{'Xrv1';'Xrv2'}),'openCOSSAN:connectors:Mio')
        end
        function PassInputOfWrongTypeToConstructor(testCase) % Checks that the command fails due to wrong type passed to the constructor
           testCase.verifyError(@()Mio('Sdescription','Mio for Unit Test', ...
        'Spath',('FunctionForMio'), ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',':-)', ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'}),'openCOSSAN:validateCOSSANInputs')
        end
        function GiveNonExistingFileToConstructor(testCase) % Checks that the command fails due to incorrect file specified to be passed to the constructor
           testCase.verifyError(@()Mio('Sdescription','Mio for Unit Test', ...
        'Spath',('FunctionForMio'), ...
        'Sfile','thisfiledoesntexist.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'}),'openCOSSAN:Mio')
        end
        function SetImpossibleCombinationOfFlagsSetLfunctionWithScript(testCase) %   Checks that the command fails when the Lfunction flag is set but a script is called 
         testCase.verifyError(@()Mio('Sdescription','Mio for Unit Test', ...
        'Spath',('ScriptForMio'), ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'}),'openCOSSAN:Mio')
        end
        function SetImpossibleCombinationOfFlagsUnsetLfunctionWithFunction(testCase) % Checks that the command fails when the Lfunction flag is clear but a function is called 
         testCase.verifyError(@()Mio('Sdescription','Mio for Unit Test', ...
        'Spath',('ScriptForMio'), ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'}),'openCOSSAN:Mio')
        end
        function SetImpossibleCombinationOfFlags(testCase) % Checks that the command fails when Input Output is set to both structure and matrix
         testCase.verifyError(@()Mio('Sdescription','Mio for Unit Test', ...
         'Spath',('FunctionForMio'), ...
         'Sfile','differenceStructure.m', ...
         'Lfunction',true, ...
         'Liostructure', true, ...
         'Liomatrix', true, ...
         'Coutputnames',{'diff1';'diff2'},...
         'Cinputnames',{'Xrv1';'Xrv2'}),'openCOSSAN:Mio')
        end
        function MioPassingEmptyInput(testCase) % Checks that command fails when input is empty
           Xm=Mio('Sdescription','Mio for Unit Test', ...
           'Spath',('FunctionForMio'), ...
           'Sfile','differenceStructure.m', ...
           'Lfunction',true, ...
           'Liostructure', true, ...
           'Liomatrix', false, ...
           'Coutputnames',{'diff1';'diff2'},...
           'Cinputnames',{'Xrv1';'Xrv2'});
          XemptyInput = Input;
          testCase.verifyError(@()run(Xm,XemptyInput),'openCOSSAN:Mio:run')
        end
        function MioPassingInputWithoutAllInputQuantities(testCase) % Checks that the command fails when the input values are not set
        Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',('FunctionForMio'), ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'missinginput'});
         testCase.verifyError(@()run(Xm,testCase.Xinput),'openCOSSAN:Mio:run')
        end
        function MioPasssingEmptySamples(testCase) % Checks that command fails when passing empty samples 
        Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',('/FunctionForMio'), ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
        Xsamples=testCase.Xinput.Xsamples;
        Xsamples.MsamplesHyperCube = [];
        testCase.verifyError(@()run(Xm,Xsamples),'openCOSSAN:mio:checkPinput');
        end
        function MioPassingSamplesWhereNotAllInputsAvailable(testCase) %Checks that the command fails when insufficient input quantities are available
            Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',('FunctionForMio'), ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'missinginput'});
        
        [~,Xsamples]=testCase.Xinput.sample('Nsamples',10);
        testCase.verifyError(@()run(Xm,Xsamples),'openCOSSAN:mio:checkPinput');
        end
        function MioPassingStructureWithWrongFieldnames(testCase) % Ensures that the program does not run when the wrong argumenst are used.
            Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',( 'FunctionForMio'), ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'missinginput'});
        Tsamples = testCase.Xinput.getDefaultValuesStructure;
        testCase.verifyError(@()run(Xm,Tsamples),'openCOSSAN:mio:checkPinput');
        end
        function MioPassingMatrixWrongSize(testCase); %Ensures that the command fails when passing a matrix of the wrong size
            Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',('FunctionForMio'), ...
        'Sfile','differenceStructure.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
        Msamples = [1 2 3; 1 2 3; 1 2 3];
        testCase.verifyError(@()run(Xm.Msamples),'MATLAB:noSuchMethodOrField');
        end
        function MioDoesNotReturnEnoughOutputsMatrixIO(testCase); % Ensures that the command fails when the
        Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',('FunctionForMio'), ...
        'Sfile','differenceMatrix.m', ...
        'Lfunction',true, ...
        'Liostructure', false, ...
        'Liomatrix', true, ...
        'Coutputnames',{'diff1';'diff2';'thisoutputdoesnotexists'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
            
        Tsamples = testCase.Xinput.getDefaultValuesStructure;
        testCase.verifyError(@()run(Xm,Tsamples),'openCOSSAN:mio:createSimulationOutput')
        end
        function MioDoesNotReturnCorrectOutputsStructureIO(testCase); % not sure what this tests
            Xm=Mio('Sdescription','Mio for Unit Test', ...
        'Spath',('FunctionForMio'), ...
        'Sfile','differenceStructureEmptyOutput.m', ...
        'Lfunction',true, ...
        'Liostructure', true, ...
        'Liomatrix', false, ...
        'Coutputnames',{'diff1';'diff2'},...
        'Cinputnames',{'Xrv1';'Xrv2'});
    
        Tsamples = testCase.Xinput.getDefaultValuesStructure;
        testCase.verifyError(@()run(Xm,Tsamples),'openCOSSAN:mio:createSimulationOutput');
        end
            
       
end
end

