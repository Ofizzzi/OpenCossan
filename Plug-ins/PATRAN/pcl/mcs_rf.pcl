$****************************
$ Written by Murat Panayirci 
$****************************

$******************************
$ Last Modified on 1-Oct-2008
$******************************

CLASS DMCS_GUI

$**************************************************
$ Performing Monte Carlo Simulation for RF problem
$**************************************************

FUNCTION mcs_rf()

$***************************
$ Defining GLOBAL variables 
$***************************

GLOBAL INTEGER channel7,channel5,channel, lrecl, k,q,i,p ,l,r,b,no_of_rfs, elem_ids(VIRTUAL),prim_id, second_id
GLOBAL INTEGER cons_count, num_elems, index_count, mat_id_new ,model_ids(2)
GLOBAL REAL    RF(100000)
GLOBAL STRING  no_of_sim [40],rf_names[20](30), db_name[256],anal_type2[40],anal_type[40], random_prop_name[4] 
GLOBAL STRING  res_type3[40],res_type[40],res_type2[40], id_number[40],elem_id[30],nastran_path[300], response_check[40]

$***************************
$ Defining LOCAL variables 
$***************************

STRING  group_name[100],group_names[100](100),line[100],prop_name[40], mat_des [20], mat_name [40],char_val[50]
STRING  node_list[40],derivation_method[20],coordinate_identifier[10],location[10], elem_list[12] ,labels[100](virtual)
INTEGER mode_no, no_of_val_to_read, group_id, num_words_mat, num_words_prop,word_ids_prop(10),group_counter,position_char,region_ids(10000)
INTEGER mat_l, mat_d, elem_type,dof_set_flag,co_f, geo_flag, f_f, layer_f ,lay_c,cat_id,lin_code,dir_code,mat_type,mat_id
INTEGER id_of_mat,int_val, coord_id,node_id, field_id,dat_ex,word_ids_mat(10), field_ids(10),resultids(5),result_ids(4), layer_ids(VIRTUAL)
INTEGER index_of_min_val(12), index_of_max_val(12) ,no_of_results_per_element(VIRTUAL),ncomp, mode_number,check_results
INTEGER no_of_load_cases, load_case_ids(virtual), no_of_subcase_ids(virtual) ,no_of_node_identifiers,subcase_ids(VIRTUAL)
INTEGER no_of_subcases,result_location,no_of_layers, data_type ,list_of_node_identifiers(VIRTUAL),num_nodes3,num_elems3
REAL    results(VIRTUAL), nat_freq(6),freq_check(200),freq_diff,real_val(40),word_values_mat(10)
LOGICAL Check_input_file, Check_session_file

model_ids (1)=1

$********************************************************************************
$ One additional dummmy group name has to be created to make the algorithm work
$********************************************************************************

rf_names(no_of_rfs+1)="dummy_e"

$************************************************************************************
$ Confirming deleting or overwriting of material & property cards, result cases, etc.
$************************************************************************************

ui_override_message(28003091,"YES")							
ui_override_message(29002006,"YES")
ui_override_message(29002007,"NO")
ui_override_message(29002020,"YES")
ui_override_message(6016027 ,"YES")
ui_override_message(6022070 ,"YES")
ui_override_message(4012012,"YES")
ui_override_message(6022037,"YES")


$****************************
$ Getting the database name
$****************************

db_name_get ( db_name )
			
$*****************************************************
$Checking if a valid response is assigned by the user
$*****************************************************

IF ( response_check == " " ) THEN

	user_message( "ERROR", 1, "COSSAN-PCL", "Please choose a valid response" )

	RETURN

END IF

$****************************************************
$ Perform some checks before starting the analysis
$****************************************************

Check_input_file   = file_exists_local ( "DMCS_RF_samples.dat")
Check_session_file = file_exists_local ( "cossan_analysis.ses.01")

IF (Check_input_file == FALSE ) THEN

	user_message( "ERROR", 1, "COSSAN-PCL", "The file which contains the samples does not exist in the current working directory" )

	RETURN

ELSE IF (Check_session_file == FALSE ) THEN

	user_message( "ERROR", 1, "COSSAN-PCL", "The session file which should prepare the NASTRAN input file does not exist in the current working directory" )

	RETURN

END IF


$*************************************************************************************************************
$ Creating new material & property cards for each element in the RF groups before starting the simulations
$*************************************************************************************************************

$****************************
$ Getting the first RF name
$****************************

position_char = str_index ( rf_names(1) , "_" )

group_names(1) = str_substr ( rf_names(1),1, position_char-1 )

db_create_constitutive_model (1 , 1, "Dummy Name",1)

$**************************************************************************************
$ Following loop prepares the new mat & prop cards to assign the values in simulations
$ It just creates new cards for the regions assigned as RF, others are left as they are
$**************************************************************************************

FOR ( k = 2 TO (no_of_rfs+1) )

	$*****************************
	$ Getting RF name until "_"
	$*****************************

	position_char = str_index ( rf_names(k) , "_" )

	group_names(k) = str_substr ( rf_names(k),1, position_char-1 )

	$*************************************************
	$ Determining how many RP's assigned to each group
	$*************************************************

	IF (group_names(k) != group_names(k-1) ) THEN
		
		$********************************************
		$ PCL proceeds with the current group by first 
		$ getting the data about group from database
		$********************************************

		db_get_group_id (group_names(k-1),group_id)

		db_count_elems_in_group (group_id,num_elems)

		$*********************************************************
		$ No need to check if there are any elements in the group
		$ This is already done in form.pcl
		$*********************************************************

		sys_allocate_array ( elem_ids, 1, num_elems )
		
		db_get_elem_ids_in_group ( num_elems, group_id, elem_ids )

		db_get_region_for_elements ( num_elems, elem_ids, region_ids )

		db_get_region_definition(region_ids(1),prop_name,elem_type,dof_set_flag,co_f,geo_flag,f_f,@
		layer_f,lay_c,mat_id,mat_l, mat_d)
		
		$****************************************************************
		$ Finding out how many values are entered to the property card
		$****************************************************************

		db_count_props (region_ids(1), num_words_prop )

		$****************************************************************
		$ Finding out the word ids related to those entered values
		$***************************************************************

		db_get_props_by_region ( num_words_prop, region_ids(1), word_ids_prop )

		$****************************************************************
		$ Finding out values of the material card related to the group
		$****************************************************************					

		db_get_matl_prop_value_count ( mat_id, num_words_mat )
		
		db_get_matl_prop_value ( mat_id, word_ids_mat, field_ids, word_values_mat )
		
		db_get_material (mat_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

		FOR ( p = 1 TO num_elems )

			$***********************************************************************************
			$ Creating new material cards with same initial values for each element in the group
			$***********************************************************************************	
				
			db_create_material (str_from_integer(elem_ids(p)), mat_des,cat_id,lin_code, dir_code, mat_type, mat_id_new )

			db_create_matl_prop_value (mat_id_new, word_ids_mat, field_ids, word_values_mat,num_words_mat)

			$****************************************************************************************************************
			$ Creating new property cards with same initial values for each element in the group
			$ NOTE: Here I introduced an offset (500) for the id of property cards
			$       The reason is the code wont work properly if the element ids are equal to the existing property card ids
			$       => the code still will not work if there is any element with ID 500 or higher and property card id with
			$          the same value
			$****************************************************************************************************************					

			db_create_phys_prop_region ((elem_ids(p)+500), str_from_integer(elem_ids(p)) ,elem_type, geo_flag,co_f,@
			f_f,layer_f,dof_set_flag )

			db_associate_element_to_region (elem_ids(p),elem_ids(p)+500)

			$*************************************************************************************************
			$ Finding out the property card values using obtained word ids and re-assigning them to new cards
			$**************************************************************************************************

			FOR ( q = 1 TO num_words_prop )
		
				db_get_prop_value(region_ids(1),word_ids_prop(q),id_of_mat,data_type,int_val,real_val,char_val,@
				coord_id,node_id,field_id)

				db_create_phys_prop_value ((elem_ids(p)+500), word_ids_prop(q),mat_id_new, data_type, @
				int_val, real_val, char_val,node_id, coord_id, field_id )

			END FOR

		END FOR

		$************************************************************************************************************************
		$ Following command is to delete the application regions of the initial prop cards by re-creating them with empty values
		$ This is necessary, otherwise PATRAN creates the NASTRAN input file according to the old prop cards, since they still
		$ contain the application regions (dont ask me why !!)
		$************************************************************************************************************************

		elementprops_create(prop_name,51,25,35,1,1,20,[13, 20, 36, 4037, 4111,4118,4119],[5, 9, 1, 1, 1, 1, 1],["","","`","","","",""],"")

	END IF

END FOR


dump str_from_integer(no_of_rfs)//" RF's defined"
dump "STARTING SIMULATIONS"

$************************************
$ Opening Files
$************************************

text_open("DMCS_RF_responses.dat", "NOW", 0, 0, channel7)
text_open("DMCS_RF_samples.dat", "OR", 0, 0, channel)

$***************************
$ Starting simulations 
$***************************

FOR (i = 1 TO str_to_integer(no_of_sim))

	group_counter = 1

	dump "Simulation no "//str_from_integer(i)//""

	$********************************************
	$ Getting RF name until "_"
	$********************************************

	position_char = str_index ( rf_names(1) , "_" )

	group_names(1) = str_substr ( rf_names(1),1, position_char-1 )

	$**********************************
	$ loop for the no of RF's defined 
	$**********************************

	FOR ( k = 2 TO (no_of_rfs+1) )

		$********************************************
		$ Getting RF name until "_"
		$********************************************

		position_char = str_index ( rf_names(k) , "_" )

		group_names(k) = str_substr ( rf_names(k),1, position_char-1 )

		$*************************************************
		$ Determining how many RP's assigned to each group
		$*************************************************

		IF (group_names(k) == group_names(k-1) ) THEN

			group_counter = group_counter + 1


		ELSE
			index_count = 0

			$********************************************
			$ PCL proceeds with the current group by first 
			$ getting the data about group from database
			$********************************************

			position_char = str_index ( rf_names(k-1) , "_" )

			group_name = str_substr ( rf_names(k-1),1, position_char-1 )
			
			db_get_group_id (group_name,group_id)
			
			db_count_elems_in_group ( group_id, num_elems )
			
			sys_allocate_array ( elem_ids, 1, num_elems )
			
			db_get_elem_ids_in_group ( num_elems, group_id, elem_ids )

			$********************************************************************
			$ Determining how many values should be read from samples file
			$********************************************************************

			no_of_val_to_read = num_elems*group_counter

			$***********************************************************************
			$ Reading the random values for the group and storing them in array RF
			$***********************************************************************

			FOR ( p = 1 TO no_of_val_to_read )

				text_read_string( channel , line, lrecl ) 
				RF(p) = str_to_real( line )

			END FOR

			$***********************************************************************
			$ cons_count keep track if any mat prop is assigned as random or not
			$***********************************************************************

			cons_count = 0

			$***********************************************************************
			$ Updating the deterministic model with samples for the chosen RP's 
			$***********************************************************************
			
			FOR ( q = (k-group_counter) TO (k-1) )

				$****************************
				$ Getting RF name until "_"
				$****************************
	
				position_char = str_index ( rf_names(q) , "_" )
	
				group_names(q) = str_substr ( rf_names(q),1, position_char-1 )

				$**********************************************************************
				$ Getting random property name by checking the 4 characters after "_"
				$**********************************************************************
	
				random_prop_name = str_substr ( rf_names(q),position_char+1 ,4 )
				
				$**************************************************
				$ If youngs modulus is chosen as random property
				$**************************************************
				
				IF (random_prop_name == "E") THEN
			
					FOR ( b = 1 TO num_elems )
						
						material.create( "Analysis code ID", 1, "Analysis type ID", 1, "`elem_ids(b)`", 1,  @
						" ", "Isotropic", 1, "Directionality",  @
						1, "Linearity", 1, "Homogeneous", 0, "Linear Elastic", 1,  @
						"Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, 0], "Active Flag",  @
						1, "Modify", 31, "External Flag", FALSE, "Property IDs", ["Youngs Modulus", ""] @
						, [2, 0], "Property Values", ["`RF(b)`", ""] )

					END FOR

					index_count = index_count + 1
					cons_count = 1
				$**************************************************
				$ If poisson ratio is chosen as random property
				$**************************************************
				
				ELSE IF (random_prop_name == "nu") THEN

					FOR ( b = 1 TO num_elems )
						
						material.create( "Analysis code ID", 1, "Analysis type ID", 1, "`elem_ids(b)`", 2,  @
						" ", "Isotropic", 1, "Directionality",  @
						1, "Linearity", 1, "Homogeneous", 0, "Linear Elastic", 1,  @
						"Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, 0], "Active Flag",  @
						1, "Modify", 31, "External Flag", FALSE, "Property IDs", ["Poisson Ratio", ""] @
						, [5, 0], "Property Values", ["`RF(b+(num_elems*index_count))`", ""] )

					END FOR

					index_count = index_count + 1
					cons_count = 1
				$**************************************************
				$ If shear modulus is chosen as random property
				$**************************************************
		
				ELSE IF (random_prop_name == "G") THEN
		
					FOR ( b = 1 TO num_elems )

						material.create( "Analysis code ID", 1, "Analysis type ID", 1, "`elem_ids(b)`", 3, " ", @
						"Isotropic", 1, "Directionality", 1, "Linearity", 1, "Homogeneous", 0, "Linear Elastic", @
						1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, 0], "Active Flag", 1, "Modify", @
						31, "External Flag", FALSE, "Property IDs", ["Shear Modulus", ""], [8, 0], @
						"Property Values", ["`RF(b+(num_elems*index_count))`", ""] )
		
					END FOR

					index_count = index_count + 1
					cons_count = 1
				$**************************************************
				$ If mass density is chosen as random property
				$**************************************************
			
				ELSE IF (random_prop_name == "rho") THEN

					FOR ( b = 1 TO num_elems )
		
						material.create( "Analysis code ID", 1, "Analysis type ID", 1,"`elem_ids(b)`", @
						4, " ", "Isotropic", @
						1, "Directionality", 1, "Linearity", 1, "Homogeneous", 0, "Linear Elastic", 1, @
						"Model Options & IDs",@ 
						["", "", "", "", ""], [0, 0, 0, 0, 0], "Active Flag", 1, "Modify", 31, "External Flag",@
						FALSE, "Property IDs", ["Density", ""], [16, 0], "Property Values", @	
						["`RF(b+(num_elems*index_count))`", ""] )
		
					END FOR

					index_count = index_count + 1				
					cons_count = 1

				$**************************************************
				$ If thickness is chosen as random property
				$**************************************************
				
				ELSE IF (random_prop_name == "t") THEN

					FOR ( b = 1 TO num_elems )

						elementprops_create(str_from_integer(elem_ids(b)),51,25,35,1,1,20,[13, 20, 36, 4037, 4111,  @
						4118,4119],[5, 9, 1, 1, 1, 1, 1],["m:`elem_ids(b)`","","`RF((num_elems*index_count)+b)`","","",@
						"",""],"Element `elem_ids(b)`")

						db_get_region_definition(elem_ids(b),prop_name,elem_type,dof_set_flag,co_f,geo_flag,f_f,@
						layer_f,lay_c,mat_id,mat_l, mat_d)

						$****************************************************************************
						$ For the groups that have no mat prop assigned as random
						$ mat const. model has to be assigned (otherwise results wont be obtained)
						$ for other groups this is taken care of by "material.create" function
						$****************************************************************************
						
						IF ( cons_count == 0) THEN
							
							db_create_matl_const_model (mat_id, model_ids, 1)

						END IF

					END FOR	

				END IF

				group_counter = 1

			END FOR

		END IF		

	END FOR

	$***********************************************
	$ Preparing the bdf file of the model for nastran
	$***********************************************

	!! input cossan_analysis.ses.01

	$**********************************
	$ Executing bdf file with nastran
	$**********************************
		
	utl_process_spawn(nastran_path//" cossan_analysis.bdf bat=no scr=yes old=no" ,true)
		
	$**********************************
	$ Attaching the results to patran
	$**********************************

	msc_dra_init_stream(  )
	msc_dra_add_param( "DATABASE", db_name )
	msc_dra_add_param( "JOBNAME", "cossan_analysis" )
	msc_dra_add_param( "RESULTS FILE", "cossan_analysis.xdb" )
	msc_dra_add_param( "OBJECT", "Result Entities" )
	msc_dra_add_param( "ANALYSIS TYPE", "Structural" )
	msc_dra_add_param( "DIVISION TOLERANCE", "1.0E-8" )
	msc_dra_add_param( "NUMERICAL TOLERANCE", "1.0E-4" )
	msc_dra_add_param( "MODEL TOLERANCE", "0.0049999999" )
	msc_dra_add_param( "ROTATIONAL NODAL RESULTS", "OFF" )
	msc_dra_add_param( "STRESS/STRAIN INVARIANTS", "OFF" )
	msc_dra_add_param( "PRINCIPAL DIRECTIONS", "OFF" )
	msc_dra_add_param( "ELEMENT RESULTS POSITIONS", "Nodal       " )
	msc_dra_add_param( "TITLE DESCRIPTION", "ON" )
	msc_dra_finish_stream(  )
	analysis_import( "MSC.Nastran", "cossan_analysis", "Attach Results File No Job","cossan_analysis.xdb", TRUE )
		
	IF (anal_type == "static") THEN
	
		$********************************
		$ Getting the loadcases
		$********************************
		
		check_results = res_utl_get_loadcases(no_of_load_cases, load_case_ids, no_of_subcase_ids)

		IF (check_results != 0) THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
				                              //"Please check the following items:\n" @ 
							      //" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly\n" @
							      //" - Make sure that NASTRAN works on your PC\n" @
							      //" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							      )
			RETURN

		END IF
		
		$********************************
		$ Getting the subcases
		$********************************
		
		check_results = res_utl_get_subcases(load_case_ids(1), no_of_subcases, subcase_ids )

		IF (check_results != 0) THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
				                              //"Please check the following items:\n" @ 
							      //" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly\n" @
							      //" - Make sure that NASTRAN works on your PC\n" @
							      //" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							      )
			RETURN

		END IF
		
		$********************************
		$ Getting the result layers
		$********************************
		
		result_ids(1) = load_case_ids(1)
		result_ids(2) = subcase_ids(1)
		result_ids(3) = prim_id
		result_ids(4) = second_id
		
		check_results = res_utl_get_result_layers (result_ids, no_of_layers, layer_ids, labels)

		IF (check_results != 0) THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
				                              //"Please check the following items:\n" @ 
							      //" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly\n" @
							      //" - Make sure that NASTRAN works on your PC\n" @
							      //" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							      )
			RETURN

		END IF
		
		$********************************
		$ Defining result ids
		$********************************
		
		resultids(1) = result_ids(1)
		resultids(2) = result_ids(2)
		resultids(3) = result_ids(3)
		resultids(4) = result_ids(4)
		resultids(5) = layer_ids(1)
		
		coordinate_identifier=""
		derivation_method=res_type3
		
		IF (res_type == "NODAL") THEN
		
			IF (res_type2 == "MAX") THEN
		
				node_list="node 1:#"
				
				check_results = res_utl_extract_nodal_results(resultids, node_list , derivation_method,  @
				coordinate_identifier, data_type, no_of_node_identifiers, list_of_node_identifiers, results, index_of_min_val, index_of_max_val)

				IF (check_results != 0) THEN

					user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
							//"Please check the following items:\n" @ 
							//" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly'\n" @
							//" - Make sure that NASTRAN works on your PC\n" @
							//" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							)
					RETURN

				END IF

				text_write(channel7,"%E6%",1,results(index_of_max_val(1)),"")
				
			ELSE IF (res_type2 == "SPECIFIC") THEN
		
				node_id= id_number
				node_list="node "//node_id
			
				check_results = res_utl_extract_nodal_results(resultids, node_list , derivation_method,  @
				coordinate_identifier, data_type, no_of_node_identifiers, list_of_node_identifiers, results, index_of_min_val, index_of_max_val)
		
				IF (check_results != 0) THEN

					user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
							//"Please check the following items:\n" @ 
							//" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly'\n" @
							//" - Make sure that NASTRAN works on your PC\n" @
							//" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							)
					RETURN

				END IF

				text_write(channel7,"%E6%",1,results(1),"")
		
			ELSE IF (res_type2 == "MIN") THEN
		
				node_list="node 1:#"
				
				check_results = res_utl_extract_nodal_results(resultids, node_list , derivation_method,  @
				coordinate_identifier, data_type, no_of_node_identifiers, list_of_node_identifiers, results, index_of_min_val, index_of_max_val)
					
				IF (check_results != 0) THEN

					user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
							//"Please check the following items:\n" @ 
							//" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly'\n" @
							//" - Make sure that NASTRAN works on your PC\n" @
							//" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							)
					RETURN

				END IF

				text_write(channel7,"%E6%",1,results(index_of_min_val(1)),"")

			ELSE IF (res_type2 == "ALL") THEN

				node_list="node 1:#"

				check_results = res_utl_extract_nodal_results(resultids, node_list , derivation_method,  @
				coordinate_identifier, data_type, no_of_node_identifiers, list_of_node_identifiers, results, index_of_min_val, index_of_max_val)

				IF (check_results != 0) THEN

					user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
							//"Please check the following items:\n" @ 
							//" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly'\n" @
							//" - Make sure that NASTRAN works on your PC\n" @
							//" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							)
					RETURN

				END IF

				db_count_nodes (num_nodes3)

				FOR (l = 1 TO num_nodes3)

					text_write(channel7,"%E6%",1,results(l),"")

				END FOR

		
			END IF
			
		ELSE IF (res_type == "ELEMENTAL") THEN	
		
			IF (res_type2 == "MAX") THEN
		
				elem_list="elem 1:#"
				location="c"	
				check_results = res_utl_extract_elem_results(resultids, elem_list , derivation_method, location, @
				coordinate_identifier, data_type , result_location , @
				no_of_node_identifiers, list_of_node_identifiers, no_of_results_per_element, results, index_of_min_val, index_of_max_val)
				
				IF (check_results != 0) THEN

					user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
							//"Please check the following items:\n" @ 
							//" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly'\n" @
							//" - Make sure that NASTRAN works on your PC\n" @
							//" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							)
					RETURN

				END IF

				text_write(channel7,"%E6%",1,results(index_of_max_val(1)),"")

			ELSE IF (res_type2 == "SPECIFIC") THEN
		
				elem_id=id_number
				elem_list="elem "//elem_id
				location="c"	
				check_results = res_utl_extract_elem_results(resultids, elem_list , derivation_method, location, @
				coordinate_identifier, data_type , result_location , @
				no_of_node_identifiers, list_of_node_identifiers, no_of_results_per_element, results, index_of_min_val, index_of_max_val)
		
				IF (check_results != 0) THEN

					user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
							//"Please check the following items:\n" @ 
							//" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly'\n" @
							//" - Make sure that NASTRAN works on your PC\n" @
							//" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							)
					RETURN

				END IF

				text_write(channel7,"%E6%",1,results(1),"")

			ELSE IF (res_type2 == "MIN") THEN
		
				elem_list="elem 1:#"
				location="c"	
				check_results = res_utl_extract_elem_results(resultids, elem_list , derivation_method, location, @
				coordinate_identifier, data_type , result_location , @
				no_of_node_identifiers, list_of_node_identifiers, no_of_results_per_element, results, index_of_min_val, index_of_max_val)
			
				IF (check_results != 0) THEN

					user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
							//"Please check the following items:\n" @ 
							//" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly'\n" @
							//" - Make sure that NASTRAN works on your PC\n" @
							//" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							)
					RETURN

				END IF

				text_write(channel7,"%E6%",1,results(index_of_min_val(1)),"")

			ELSE IF (res_type2 == "ALL") THEN

				elem_list="elem 1:#"
				location="c"	                               
				
				check_results = res_utl_extract_elem_results(resultids, elem_list , derivation_method, location, @
				coordinate_identifier, data_type , result_location , @
				no_of_node_identifiers, list_of_node_identifiers, no_of_results_per_element, results, index_of_min_val, index_of_max_val)

				IF (check_results != 0) THEN

					user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
							//"Please check the following items:\n" @ 
							//" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly'\n" @
							//" - Make sure that NASTRAN works on your PC\n" @
							//" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							)
					RETURN

				END IF

				db_count_elems (num_elems3)

				FOR (l = 1 TO num_elems3)

					text_write(channel7,"%E6%",1,results(l),"")

				END FOR
				
			END IF

		END IF

	ELSE IF (anal_type == "modal") THEN

		IF (anal_type2 == "mode_no") THEN
			
			$****************************************************************************
			$ obtaining the natural frequencies corresponding to the first n modes
			$****************************************************************************
			
			FOR (r = 1 TO str_to_integer(mode_no))

				res_utl_get_loadcases(no_of_load_cases, load_case_ids, no_of_subcase_ids)
				mode_number=r
				res_utl_get_global_var_for_lc(load_case_ids(1),mode_number, "Frequency", ncomp, nat_freq)
							
				text_write(channel7,"%E6%",1,nat_freq(1),"")
			END FOR

			text_write_string(channel7, "End of Simulation  "//str_from_integer(i))

		ELSE IF (anal_type2 == "freq_range") THEN

			$****************************************************************************
			$ obtaining the natural frequencies corresponding a certain frequency range
			$****************************************************************************

			res_utl_get_loadcases(no_of_load_cases, load_case_ids, no_of_subcase_ids)
			res_utl_get_global_var_for_lc(load_case_ids(1),1, "Frequency", ncomp, nat_freq)
			text_write(channel7,"%E6%",1,nat_freq(1),"")
			freq_check(1)=nat_freq(1)
			r=2

			REPEAT
				res_utl_get_global_var_for_lc(load_case_ids(1),r, "Frequency", ncomp, nat_freq)
				text_write(channel7,"%F6%",1,nat_freq(1),"")				
				freq_check(r)=nat_freq(1)
				freq_diff = freq_check(r)-freq_check(r-1)
				r=r+1
			UNTIL (freq_diff <= 0.0001)

			text_write_string(channel7, "End of Simulation  "//str_from_integer(i))

		END IF
				
	END IF
	
	$****************************************
	$ Deleting the files created by patran
	$****************************************
	res_utl_clear_result()
	file_delete("cossan_analysis.bdf")
	file_delete("cossan_analysis.f06")
	file_delete("cossan_analysis.f04")
	file_delete("cossan_analysis.log")
	file_delete("cossan_analysis.DBALL")
	file_delete("patran.ses.01")
	analysis_main_tasks.delete_job( "MSC.Nastran", "cossan_analysis" )
	
END FOR

$**********************************
$ Closing previuosly opened files 
$**********************************

text_close(channel7," " )
text_close(channel5," " )


END FUNCTION

END CLASS

