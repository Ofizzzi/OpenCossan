$*******************
$ Written by HMP
$******************

$*******************************************
$ Last Updated 21-OCT-2008
$*******************************************

CLASS sfem

$*******************************************
$ Defining all the widgets used in the form
$*******************************************

CLASSWIDE widget sfem_gui,close_button,switch_button1,data_box3,run_button ,spread_rv, prep_button,get_button, del_button, modify_button
CLASSWIDE widget vis_button,clear_button,data_box4,switch_button2,data_box5,data_box6,data_box7

FUNCTION INIT()

STRING X[70](1000),Y[70](1000)

$***********************
$ Creating spreadsheets
$***********************

X(1)="NO"

X(2)="NAME"

X(3)="DIST"

X(4)="MEAN"

X(5)="COV"

$************************
$ Creating the main form
$************************

sfem_gui = ui_form_create( "", 2, 0.3, "UL", 9.5, 8.5, "SFEM ANALYSIS GUI", "" )

$********************
$ Creating labels
$********************

ui_label_create( sfem_gui,"",0.2,6.3,"4. Prepare COSSAN-X Input File" )
ui_label_create( sfem_gui,"",4.5,7.0,"7. Start Analysis" )
ui_label_create( sfem_gui,"",4.4,0.2,"2. Visualize Random Parameters" )

$***********************
$ Spreadsheet for RVs
$***********************

spread_rv = ui_spread_create(sfem_gui,"",0.2,1.2,9,2.8,0.3,5,5,0,1,X,Y,"                                                           Random Variables","","","SINGLE")

$********************
$ Creating buttons
$********************

close_button    = ui_button_create(sfem_gui, "sfem_close",7.5,7.0, 1.2, 0.7, "CLOSE", TRUE, TRUE)
clear_button    = ui_button_create(sfem_gui, "clear",6,4.7, 1.0, 0.0, "CLEAR", TRUE, TRUE)
run_button      = ui_button_create(sfem_gui, "sfem_analysis",4.7,7.3,1.3,0.6,"RUN",TRUE,FALSE)
prep_button     = ui_button_create(sfem_gui, "prepare_input", 0.7,6.9, 1.3, 0.6, "ACCEPT", TRUE, TRUE)
get_button      = ui_button_create(sfem_gui, "get_input", 3.6,4.2, 1.0, 0.0, "GET", TRUE, TRUE)
del_button      = ui_button_create(sfem_gui, "delete_input", 4.8,4.7, 1.0, 0.0, "DELETE", TRUE, TRUE)
modify_button   = ui_button_create(sfem_gui, "modify_input", 3.6,4.7, 1.0, 0.0, "MODIFY", TRUE, TRUE)
vis_button      = ui_button_create(sfem_gui, "visualize_rvs",5.5,0.5, 1.0, 0.0, "SHOW", TRUE, TRUE)

$************************
$ Creating switch buttons
$************************

switch_button1 = ui_switch_create(sfem_gui, "get_method" ,0.2,0.2, 2, "1. Select Method", TRUE )
switch_button2 = ui_switch_create(sfem_gui, "get_analysis_type" ,0.2,5.3, 2, "3. Specify Implementation Type", TRUE )

$**************************************
$ Creating options for switch buttons
$**************************************

ui_item_create( switch_button1, "1", "Perturbation", TRUE )
ui_item_create( switch_button1, "2", "Neumann", FALSE )
ui_item_create( switch_button1, "3", "P-C", FALSE )

ui_item_create( switch_button2, "1", "Regular", TRUE )
ui_item_create( switch_button2, "2", "Component-Wise", FALSE )

$********************
$ Creating databoxes
$********************

data_box3 = ui_databox_create(sfem_gui,"",4.5,5.3,6.8,4.5, "5. Enter Path for MATLAB Runtime","/usr/software/matlab/MATLAB_Compiler_Runtime/v713/",TRUE, "STRING", 1 )
data_box4 = ui_databox_create(sfem_gui,"",4.8,3.9,5.0,1.5, "","",TRUE, "STRING", 1 )
data_box5 = ui_databox_create(sfem_gui,"",0.2,4.3,5.0,1.5, "Enter No of Simulations","10",TRUE, "STRING", 1 )
data_box6 = ui_databox_create(sfem_gui,"",4.5,6.1,6.8,4.5, "6. Enter Path for COSSAN","/home/hmp/matlab/toolbox/",TRUE, "STRING", 1 )
data_box7 = ui_databox_create(sfem_gui,"",0.2,4.3,5.0,1.5, "Enter order of P-C","2",TRUE, "STRING", 1 )

ui_wid_set(data_box5,"DISPLAY",FALSE)
ui_wid_set(data_box7,"DISPLAY",FALSE)

END FUNCTION


$**********************
$ Displaying the form
$**********************

FUNCTION DISPLAY()

ui_form_display("sfem")

END FUNCTION


$*******************
$ Closing the form
$*******************

FUNCTION sfem_close()

ui_form_hide("sfem")

END FUNCTION


$****************************************
$ Modify the entries in RV Spreadsheet
$****************************************

FUNCTION modify_input()

GLOBAL INTEGER from_col, from_row
STRING up_text[20]

ui_wid_get(data_box4, "VALUE", up_text)
	
ui_spread_set_cell (spread_rv,from_col, from_row, 1, up_text)

END FUNCTION


$****************************************
$ Delete the RVs in RV Spreadsheet
$****************************************

FUNCTION delete_input()

GLOBAL INTEGER from_col, from_row, to_col, to_row, layer,no_of_rvs
INTEGER s

ui_spread_get_selected (spread_rv, from_col, from_row, to_col, to_row, layer )
	
ui_spread_row_delete (spread_rv, from_row )
	
no_of_rvs=no_of_rvs-1
	
FOR (s=1 TO no_of_rvs)
	
	ui_spread_set_cell (spread_rv,1, s, 1, str_from_integer(s) )
	
END FOR

END FUNCTION



$**********************************
$ Get the entry in RV Spreadsheet 
$**********************************

FUNCTION get_input()

GLOBAL INTEGER from_col, from_row, to_col, to_row, layer
STRING mod_text[50]

ui_spread_get_selected (spread_rv, from_col, from_row, to_col, to_row, layer )
	
IF (from_col >= 3) THEN
	
	ui_spread_get_cell (spread_rv,from_col, from_row, 1, mod_text)
		
	ui_wid_set( data_box4, "VALUE", mod_text)
	
END IF

END FUNCTION


$***************************
$ To clear the RV spreadsheet
$***************************

FUNCTION clear()

STRING X[70](1000),Y[70](1000)
INTEGER no_of_rvs

ui_wid_delete(spread_rv)
	
spread_rv = ui_spread_create(sfem_gui,"",0.2,1.2,9,2.8,0.3,5,5,0,1,X,Y,"                                                           Random Variables","","","SINGLE")
	
no_of_rvs=0

END FUNCTION


$********************************************************************************************
$ Switch button to select analysis type 1 = REGULAR (MATRIX I/O Approach) 2 = COMPONENT-WISE
$ 3 = SOLVER-BASED
$********************************************************************************************

FUNCTION get_analysis_type(item1, item2)

STRING item1 [], item2 []

GLOBAL STRING analysis_type[40]

IF (item1== "1" && item2 == "ON" ) THEN

	analysis_type = "Regular"

ELSE IF (item1== "2" && item2 == "ON" ) THEN

	analysis_type = "Componentwise"

END IF

END FUNCTION



$********************************************************************************************
$ Switch button to select method type 1 = PERTURBATION 2 = NEUMANN
$********************************************************************************************

FUNCTION get_method(item1, item2)

STRING item1 [], item2 []

GLOBAL STRING analysis_method[40]

IF (item1== "1" && item2 == "ON" ) THEN

	analysis_method = "PERTURBATION"

	ui_wid_set(data_box5,"DISPLAY",FALSE)
	ui_wid_set(data_box7,"DISPLAY",FALSE)	

ELSE IF (item1== "2" && item2 == "ON" ) THEN

	analysis_method = "NEUMANN"

	ui_wid_set(data_box5,"DISPLAY",TRUE)
	ui_wid_set(data_box7,"DISPLAY",FALSE)
	
ELSE IF (item1== "3" && item2 == "ON" ) THEN

	analysis_method = "P-C"

        ui_wid_set(data_box5,"DISPLAY",FALSE)
	ui_wid_set(data_box7,"DISPLAY",TRUE)	

END IF

END FUNCTION


$***********************
$ List the RVs on GUI
$***********************

FUNCTION visualize_rvs()

GLOBAL INTEGER no_of_rvs,regions_with_elements,region_ids_with_elements(10000)

INTEGER num_mat,m,region_ids(10000),num_regions,num_elems
INTEGER dat_ex,cat_id,lin_code,dir_code,mat_type,word_ids(50) ,field_ids(1000) 
INTEGER m_id ,m_l, m_d,  pos_of_val
INTEGER el_ty, d_s_f ,co_f, g_f, f_f, l_f ,lay_c
STRING  mat_name[50],prop_name[50],mat_des[50],mat_names[40](200)
REAL    mat_values(20)

ui_override_message(11000105,"NO")

IF ( no_of_rvs>= 1) THEN
	
	FOR (m=1 TO no_of_rvs)
		
		ui_spread_row_delete (spread_rv, 1)
		
	END FOR
	
END IF

$*************************************
$Initializing no of random variables
$*************************************
	
no_of_rvs=0
	
$*******************************************
$Counting the total no of materials defined
$*******************************************
	
db_count_materials (num_mat)

dump str_from_integer(num_mat)//" Material cards defined in the model"

$*******************************************
$Counting the total no of properties defined
$*******************************************
		
db_count_region_ids ( num_regions )
	
dump str_from_integer(num_regions)//" Property cards defined in the model"


$************************************************************************
$ Determine the property cards which are assigned to elements
$ Those should be processed only since other wont affect the model
$************************************************************************
	
db_get_all_region_ids (num_regions,region_ids)

regions_with_elements = 0
	
FOR (m=1 TO num_regions)

	db_count_elements_in_region (region_ids(m), num_elems)
		
	IF (num_elems != 0) THEN

		regions_with_elements = regions_with_elements + 1
		
		region_ids_with_elements(regions_with_elements) = region_ids(m)		

	END IF

END FOR

FOR (m=1 TO regions_with_elements)

	db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
	db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

	IF (cat_id == 1) THEN

		no_of_rvs=no_of_rvs+1
							
		mat_names(no_of_rvs) = mat_name
							
		db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

		$********************************************************************************
		$Determining the position of E value in the array mat_values (word_id = 2 for E)
		$********************************************************************************
							
		pos_of_val = mth_array_search ( word_ids, 2, FALSE )

		ui_spread_row_create (spread_rv, "RV" )

		ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
		ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_E")

		ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, "NORMAL")
							
		ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
		ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, "0.1")

	END IF


END FOR


END FUNCTION


$****************************************************************
$ Prepare the MATLAB input file for SFEM Analysis using COSSAN-X
$****************************************************************

FUNCTION prepare_input()

GLOBAL INTEGER no_of_rvs,k
GLOBAL STRING  analysis_type[40],analysis_method[40]

INTEGER channel,l
STRING  rv_names[20](100),cell_text[50](20),Nsims[50],Norder[50]

$************************************************************************************
$ Confirming deleting or overwriting of material & property cards, result cases, etc.
$************************************************************************************

ui_override_message(28003091,"YES")							
ui_override_message(29002006,"YES")
ui_override_message(29002020 ,"YES")
ui_override_message(6016027 ,"YES")
ui_override_message(6022070 ,"YES")
ui_override_message(4012012,"YES")
ui_override_message(6022037,"YES")

$**********************************
$ loop for the no of RV's defined 
$**********************************

FOR ( k = 1 TO no_of_rvs )

	$********************************************************
	$ Getting the necessary data baout RVs from spread_rv
	$********************************************************
			
	ui_spread_get_cell (spread_rv,2, k, 1, cell_text(2))
	
	rv_names(k)=cell_text(2)


END FOR

$**********************************
$ get the number of simulations 
$**********************************

ui_wid_get(data_box5, "VALUE", Nsims )

$**********************************
$ get the order of P-C 
$**********************************

ui_wid_get(data_box7, "VALUE", Norder )

$**********************************
$ Prepare the bdf file
$**********************************

!! input cossan_analysis.ses.01

$**********************************
$ Open the file to write
$**********************************

text_open("PatranPlugin.txt", "NOW", 0, 0, channel)

$**********************************
$ Start writing the input file 
$**********************************

text_write_string(channel, "%% Input file prepared by PATRAN PLUGIN to perform SFEM analysis")
text_write_string(channel," ")
text_write_string(channel,"%% Analysis Method ")
text_write_string(channel,analysis_method)
text_write_string(channel," ")
text_write_string(channel,"%% Implementation Type ")
text_write_string(channel,analysis_type)
text_write_string(channel," ")
text_write_string(channel,"%% Order of Expansion (only applicable for P-C)")
text_write_string(channel,Norder)
text_write_string(channel," ")
text_write_string(channel,"%% Nsimulations ")
text_write_string(channel,Nsims)
text_write_string(channel," ")

$**********************************
$ Write the definition of RVs
$**********************************

FOR (l=1 TO no_of_rvs)

	$********************************************************
	$Getting the necessary data about RVs from spread_rv
	$********************************************************
			
	ui_spread_get_cell (spread_rv,2, l, 1, cell_text(2))
	
	rv_names(l)=cell_text(2)

	ui_spread_get_cell (spread_rv,3, l, 1, cell_text(3))
	
	ui_spread_get_cell (spread_rv,4, l, 1, cell_text(4))
			
	ui_spread_get_cell (spread_rv,5, l, 1, cell_text(5))

	$********************************************************
	$Printing the RVs in spread_rv with specified properties
	$********************************************************
	
	text_write_string(channel," "//cell_text(2)//"  "//cell_text(3)//"  "//cell_text(4)//"  "//cell_text(5)// " ")

END FOR

text_close( channel, " " )
	
dump "Input file for COSSAN-X prepared"

END FUNCTION


$***********************************************
$ Calling COSSAN-X to perform SFEM Analysis
$***********************************************

FUNCTION sfem_analysis()

INTEGER job_success
STRING matlab_path[200],cossan_path[200]

dump "COSSAN_X running to perform SFEM Analysis"

ui_wid_get(data_box3,"VALUE", matlab_path)
ui_wid_get(data_box6,"VALUE", cossan_path)

job_success = utl_process_spawn(" " //cossan_path// "Plugins/PATRAN/src/run_sfem_plugin.sh " //matlab_path// " ",true)

IF ( job_success == 0) THEN 

	user_message( "WARNING", 1, "COSSAN-PCL", "Analysis completed successfully" )

	RETURN

ELSE 

	user_message( "ERROR", 1, "COSSAN-PCL", "An error occured during the analysis" )

	RETURN

END IF

END FUNCTION


END CLASS









