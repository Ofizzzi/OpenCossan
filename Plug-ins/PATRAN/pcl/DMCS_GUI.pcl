$***************************
$ Written by Murat Panayirci
$***************************

$******************************
$ Last Modified on 1-Oct-2008
$******************************

$***********************************
$ Creating Stochastic Analysis DMCS_GUI
$***********************************

CLASS DMCS_GUI

$*******************************************
$ Defining all the widgets used in the DMCS_GUI
$*******************************************

CLASSWIDE widget DMCS_GUI_id,close_button,run_rf,vis_button,prep_button,modify_button,del_button,spread_rv,label1,label2,response_button
CLASSWIDE widget spread_rf,dbx6_id,get_button,sort_sw1,sort_sw3,sort_sw4,sort_sw8,dbx10_id,dbx11_id,dbx12_id,dbx13_id
CLASSWIDE widget simulate_button, dbx3_id, dbx4_id, run_rv, clear_button, spread_rp, get_button2, modify_button2, dbx7_id, del_button2,restore_button

FUNCTION INIT()

GLOBAL STRING X[70](1000),Y[70](1000),X1[40](70),Y1[40](70)

$***********************************
$ Creating the main DMCS_GUI window
$***********************************

DMCS_GUI_id=ui_form_create( "", 0.5, 0.5, "UL", 14, 10, "Stochastic Structural Analysis", "" )

$*****************************
$ Creating switch buttons
$*****************************

sort_sw1 = ui_switch_create(DMCS_GUI_id, "switch_cb_1" ,0.1,6.0, 3, "3.b Select Geometry Type", TRUE )

sort_sw3 = ui_switch_create(DMCS_GUI_id, "switch_cb_3" ,0.1,6.8, 3, "3.c Select Autocorrelation Function", TRUE )

sort_sw4 = ui_switch_create(DMCS_GUI_id, "switch_cb_4" ,0.1,4.7, 3, "3.Select Distribution Type", TRUE )

sort_sw8 = ui_switch_create(DMCS_GUI_id, "switch_cb_8" ,0.1,0.2, 3, " 1. Select Uncertainty Modelling", TRUE )

$************************************
$ Creating options for switch buttons
$************************************

ui_item_create( sort_sw1, "1", "Plane", TRUE)

ui_item_create( sort_sw1, "2", "Cylinder", FALSE )

ui_item_create( sort_sw3, "1", "Exponential", TRUE )

ui_item_create( sort_sw3, "2", "Triangular", FALSE )

ui_item_create( sort_sw3, "3", "Convex", FALSE )

ui_item_create( sort_sw4, "1", "Normal", TRUE)

ui_item_create( sort_sw4, "2", "Lognormal", FALSE )

ui_item_create( sort_sw4, "3", "Uniform", FALSE )

ui_item_create( sort_sw4, "4", "Exponential", FALSE )

ui_item_create( sort_sw4, "5", "Rayleigh", FALSE )

ui_item_create( sort_sw4, "6", "Small-I", FALSE )

ui_item_create( sort_sw4, "7", "Large-I", FALSE )

ui_item_create( sort_sw8, "1", "Random Field", FALSE )

ui_item_create( sort_sw8, "2", "Random Variable", TRUE )

$********************
$ Creating labels
$********************

ui_label_create( DMCS_GUI_id,"",9,8.0,"12.Start Simulations" )

ui_label_create( DMCS_GUI_id,"",5.2,5.6,"7. Generate Samples" )

ui_label_create( DMCS_GUI_id,"",5.2,6.7,"8. Select Response" )

label1=ui_label_create( DMCS_GUI_id,"",4.8,0.2,"4. Visualize Random Parameters" )

label2=ui_label_create( DMCS_GUI_id,"",4.8,0.2,"4. Visualize Random Parameters" )

$***********************
$ Creating spreadsheets
$***********************

X(1)="NO"

X(2)="NAME"

X(3)="DIST"

X(4)="MEAN"

X(5)="COV"

X(6)="GEO"

X(7)="FUNC"

X(8)="LENGTH"

X(9)="NO K-L TERMS"

$***********************
$ Spreadsheet for RVs
$***********************

spread_rv=ui_spread_create(DMCS_GUI_id,"",4.8,1,9,3,0.3,5,5,0,1,X,Y,"Random Variables","","","SINGLE")

$***********************
$ Spreadsheet for RFs
$***********************

spread_rf=ui_spread_create(DMCS_GUI_id,"",4.8,1,9,3,0.3,5,9,0,1,X,Y,"Random Fields","","","SINGLE")

$**********************************
$ Spreadsheet for Random Properties
$**********************************

X1(1)="Isotropic Mat"

X1(2)="Orthotropic Mat"

X1(3)="Anisotropic Mat"

X1(4)="Shell Elements"

X1(5)="Rod Elements"

X1(6)="Beam Elements"

X1(7)="Spring Elements"

X1(8)="Concentrated Mass"

X1(9)="Section Properties"

X1(10)="cov"

X1(11)="cov"

X1(12)="cov"

X1(13)="cov"

X1(14)="cov"

X1(15)="cov"

X1(16)="cov"

X1(17)="cov"

X1(18)="cov"

spread_rp=ui_spread_create(DMCS_GUI_id,"",0.1,0.8,4.5,2.6,0.1,2,2,7,9,X1,Y1,"2. Select Random Properties","","","SINGLE")

$************************************************
$ Assigning default cov values to each property
$************************************************

ui_spread_set_cell (spread_rp,2, 1, 1, "0.1")
ui_spread_set_cell (spread_rp,2, 2, 1, "0.1")
ui_spread_set_cell (spread_rp,2, 3, 1, "0.1")
ui_spread_set_cell (spread_rp,2, 4, 1, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 2, "0.1")
ui_spread_set_cell (spread_rp,2, 2, 2, "0.1")
ui_spread_set_cell (spread_rp,2, 3, 2, "0.1")
ui_spread_set_cell (spread_rp,2, 4, 2, "0.1")
ui_spread_set_cell (spread_rp,2, 5, 2, "0.1")
ui_spread_set_cell (spread_rp,2, 6, 2, "0.1")
ui_spread_set_cell (spread_rp,2, 7, 2, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 3, "0.1")
ui_spread_set_cell (spread_rp,2, 2, 3, "0.1")
ui_spread_set_cell (spread_rp,2, 3, 3, "0.1")
ui_spread_set_cell (spread_rp,2, 4, 3, "0.1")
ui_spread_set_cell (spread_rp,2, 5, 3, "0.1")
ui_spread_set_cell (spread_rp,2, 6, 3, "0.1")
ui_spread_set_cell (spread_rp,2, 7, 3, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 4, "0.1")
ui_spread_set_cell (spread_rp,2, 2, 4, "0.1")
ui_spread_set_cell (spread_rp,2, 3, 4, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 5, "0.1")
ui_spread_set_cell (spread_rp,2, 2, 5, "0.1")
ui_spread_set_cell (spread_rp,2, 3, 5, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 6, "0.1")
ui_spread_set_cell (spread_rp,2, 2, 6, "0.1")
ui_spread_set_cell (spread_rp,2, 3, 6, "0.1")
ui_spread_set_cell (spread_rp,2, 4, 6, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 7, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 8, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 9, "0.1")
ui_spread_set_cell (spread_rp,2, 2, 9, "0.1")
ui_spread_set_cell (spread_rp,2, 3, 9, "0.1")
ui_spread_set_cell (spread_rp,2, 4, 9, "0.1")

$*************************************
$ Defining Names for Random Properties
$*************************************

$*************************************
$ For Layer = 1 Isotropic Materials
$*************************************

ui_spread_set_cell (spread_rp,1, 1, 1, "Youngs Modulus")
ui_spread_set_cell (spread_rp,1, 2, 1, "Poisson Ratio")
ui_spread_set_cell (spread_rp,1, 3, 1, "Shear Modulus")
ui_spread_set_cell (spread_rp,1, 4, 1, "Mass Density")

$*************************************
$ For Layer = 2 Orthotropic Materials
$*************************************

ui_spread_set_cell (spread_rp,1, 1, 2, "Youngs Modulus1")
ui_spread_set_cell (spread_rp,1, 2, 2, "Youngs Modulus2")
ui_spread_set_cell (spread_rp,1, 3, 2, "Poisson Ratio")
ui_spread_set_cell (spread_rp,1, 4, 2, "Shear Modulus12")
ui_spread_set_cell (spread_rp,1, 5, 2, "Shear Modulus13")
ui_spread_set_cell (spread_rp,1, 6, 2, "Shear Modulus23")
ui_spread_set_cell (spread_rp,1, 7, 2, "Mass Density")

$*************************************
$ For Layer = 3 Anisotropic Materials
$*************************************

ui_spread_set_cell (spread_rp,1, 1, 3, "Stiffness11")
ui_spread_set_cell (spread_rp,1, 2, 3, "Stiffness22")
ui_spread_set_cell (spread_rp,1, 3, 3, "Stiffness33")
ui_spread_set_cell (spread_rp,1, 4, 3, "Stiffness44")
ui_spread_set_cell (spread_rp,1, 5, 3, "Stiffness55")
ui_spread_set_cell (spread_rp,1, 6, 3, "Stiffness66")
ui_spread_set_cell (spread_rp,1, 7, 3, "Mass Density")

$******************************
$ For Layer = 4 Shell elements
$******************************

ui_spread_set_cell (spread_rp,1, 1, 4, "Thickness")
ui_spread_set_cell (spread_rp,1, 2, 4, "Nonstr Mass")
ui_spread_set_cell (spread_rp,1, 3, 4, "Mat Orientation")

$******************************
$ For Layer = 5 Rod elements
$******************************

ui_spread_set_cell (spread_rp,1, 1, 5, "X-Sectional Area")
ui_spread_set_cell (spread_rp,1, 2, 5, "Torsional Constant")
ui_spread_set_cell (spread_rp,1, 3, 5, "Nonstr Mass")

$******************************
$ For Layer = 6 Beam elements
$******************************

ui_spread_set_cell (spread_rp,1, 1, 6, "X-Sectional Area")
ui_spread_set_cell (spread_rp,1, 2, 6, "Inertia-11")
ui_spread_set_cell (spread_rp,1, 3, 6, "Inertia-12")
ui_spread_set_cell (spread_rp,1, 4, 6, "Inertia-22")

$******************************
$ For Layer = 7 Spring elements
$******************************

ui_spread_set_cell (spread_rp,1, 1, 7, "Stiffness")


$******************************************
$ For Layer = 8 Concentrated Mass elements
$******************************************

ui_spread_set_cell (spread_rp,1, 1, 8, "Mass Value")

$******************************************
$ For Layer = 9 Beam Section Properties
$******************************************

ui_spread_set_cell (spread_rp,1, 1, 9, "Param1")
ui_spread_set_cell (spread_rp,1, 2, 9, "Param2")
ui_spread_set_cell (spread_rp,1, 3, 9, "Param3")
ui_spread_set_cell (spread_rp,1, 4, 9, "Param4")

$***********************
$ Creating databoxes
$***********************

dbx3_id  = ui_databox_create(DMCS_GUI_id,"",8.7,0.3,1.0,1.0, "5. Enter No of Simulations ","5",TRUE, "STRING", 1 )
dbx4_id  = ui_databox_create(DMCS_GUI_id,"",0.1,7.5,0.9,1.0, "3.d Enter Correlation Length","2",TRUE, "STRING", 1 )
dbx12_id = ui_databox_create(DMCS_GUI_id,"",0.1,8.3,0.9,1.0, "3.e Enter No of KL Terms","5",TRUE, "STRING", 1 )
dbx6_id  = ui_databox_create(DMCS_GUI_id,"",7.2,3.95,1.0,1.0, "     "," ",TRUE, "STRING", 1 )
dbx7_id  = ui_databox_create(DMCS_GUI_id,"",1.1,3.34,0.8,1.0, "     "," ",TRUE, "STRING", 1 )
dbx10_id = ui_databox_create(DMCS_GUI_id,"",9,5.5,5.0,4.5,    "9. Enter Path for NASTRAN","/usr/site/msc/MD_Nastran/R3/x86_64/bin/nastran ",TRUE, "STRING", 1 )
dbx11_id = ui_databox_create(DMCS_GUI_id,"",9,6.3,5.0,4.5,    "10. Enter Path for MATLAB Runtime","/usr/software/matlab/MATLAB_Compiler_Runtime/v713/",TRUE, "STRING", 1 )
dbx13_id = ui_databox_create(DMCS_GUI_id,"",9,7.1,5.0,4.5,    "11. Enter Path for COSSAN","/home/hmp/matlab/toolbox/",TRUE, "STRING", 1 )

$********************
$ Creating buttons
$********************

run_rv           = ui_button_create(DMCS_GUI_id, "mcs_rv",9.6,8.4,1,0.5,"RUN",TRUE,FALSE)
run_rf           = ui_button_create(DMCS_GUI_id, "mcs_rf",9.6,8.4,1,0.5,"RUN",TRUE,FALSE)
vis_button       = ui_button_create(DMCS_GUI_id, "vis_input", 5,0.5, 1.0, 0.0, "SHOW", TRUE, TRUE)
close_button     = ui_button_create(DMCS_GUI_id, "DMCS_GUI_close", 11.3,8.0, 2.0, 1.0, "CLOSE", TRUE, TRUE)
prep_button      = ui_button_create(DMCS_GUI_id, "prep_input", 5.2,4.7, 1.0, 0.0, "6.ACCEPT", TRUE, TRUE)
get_button       = ui_button_create(DMCS_GUI_id, "mod_inp", 6,4.2, 1.0, 0.0, "GET", TRUE, TRUE)
del_button       = ui_button_create(DMCS_GUI_id, "del_input", 7.6,4.7, 1.0, 0.0, "DELETE", TRUE, TRUE)
modify_button    = ui_button_create(DMCS_GUI_id, "up_inp", 6.4,4.7, 1.0, 0.0, "MODIFY", TRUE, TRUE)
simulate_button  = ui_button_create(DMCS_GUI_id, "rand_gen", 5.4,6, 1.5, 0.0, "SIMULATE", TRUE, TRUE)
clear_button     = ui_button_create(DMCS_GUI_id, "clear", 8.8,4.7, 1.0, 0.0, "CLEAR", TRUE, TRUE)
get_button2      = ui_button_create(DMCS_GUI_id, "mod_inp2", 0.1,3.6,0.8, 0.0, "GET", TRUE, TRUE)
modify_button2   = ui_button_create(DMCS_GUI_id, "up_inp2", 0.1,4.1, 1.0, 0.0, "MODIFY", TRUE, TRUE)
del_button2      = ui_button_create(DMCS_GUI_id, "del_input2", 1.3,4.1, 1.0, 0.0, "DELETE", TRUE, TRUE)
restore_button   = ui_button_create(DMCS_GUI_id, "restore", 2.5,4.1, 1.0, 0.0, "RESTORE", TRUE, TRUE)
response_button  = ui_button_create(DMCS_GUI_id, "response",5.4,7.3, 2.0, 0.0, " SELECT RESPONSE", TRUE, TRUE)

$***********************
$ Adjusting Visibility
$***********************

ui_wid_set(spread_rv,"DISPLAY",FALSE)

ui_wid_set(sort_sw1,"DISPLAY",FALSE)

ui_wid_set(sort_sw3,"DISPLAY",FALSE)

ui_wid_set(label2,"DISPLAY",FALSE)

ui_wid_set(dbx4_id,"DISPLAY",FALSE)

ui_wid_set(dbx12_id,"DISPLAY",FALSE)

ui_wid_set(run_rv,"DISPLAY",FALSE)

END FUNCTION


$**************************************
$ Specifiying response options
$**************************************

FUNCTION response()

UI_EXEC_FUNCTION ("response", "display")

END FUNCTION


$***************************************************************
$ Displaying the DMCS_GUI
$***************************************************************

FUNCTION DISPLAY()

ui_form_display( "DMCS_GUI")

END FUNCTION


$***************************************************************
$ Restoring the random properties
$***************************************************************

FUNCTION restore()

GLOBAL STRING X1[40](70),Y1[40](70)

spread_rp=ui_spread_create(DMCS_GUI_id,"",0.1,0.8,4.5,2.6,0.1,2,2,7,9,X1,Y1,"2. Select Random Properties","","","SINGLE")

$************************************************
$ Assigning default cov values to each property
$************************************************

ui_spread_set_cell (spread_rp,2, 1, 1, "0.1")
ui_spread_set_cell (spread_rp,2, 2, 1, "0.1")
ui_spread_set_cell (spread_rp,2, 3, 1, "0.1")
ui_spread_set_cell (spread_rp,2, 4, 1, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 2, "0.1")
ui_spread_set_cell (spread_rp,2, 2, 2, "0.1")
ui_spread_set_cell (spread_rp,2, 3, 2, "0.1")
ui_spread_set_cell (spread_rp,2, 4, 2, "0.1")
ui_spread_set_cell (spread_rp,2, 5, 2, "0.1")
ui_spread_set_cell (spread_rp,2, 6, 2, "0.1")
ui_spread_set_cell (spread_rp,2, 7, 2, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 3, "0.1")
ui_spread_set_cell (spread_rp,2, 2, 3, "0.1")
ui_spread_set_cell (spread_rp,2, 3, 3, "0.1")
ui_spread_set_cell (spread_rp,2, 4, 3, "0.1")
ui_spread_set_cell (spread_rp,2, 5, 3, "0.1")
ui_spread_set_cell (spread_rp,2, 6, 3, "0.1")
ui_spread_set_cell (spread_rp,2, 7, 3, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 4, "0.1")
ui_spread_set_cell (spread_rp,2, 2, 4, "0.1")
ui_spread_set_cell (spread_rp,2, 3, 4, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 5, "0.1")
ui_spread_set_cell (spread_rp,2, 2, 5, "0.1")
ui_spread_set_cell (spread_rp,2, 3, 5, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 6, "0.1")
ui_spread_set_cell (spread_rp,2, 2, 6, "0.1")
ui_spread_set_cell (spread_rp,2, 3, 6, "0.1")
ui_spread_set_cell (spread_rp,2, 4, 6, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 7, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 8, "0.1")

ui_spread_set_cell (spread_rp,2, 1, 9, "0.1")
ui_spread_set_cell (spread_rp,2, 2, 9, "0.1")
ui_spread_set_cell (spread_rp,2, 3, 9, "0.1")
ui_spread_set_cell (spread_rp,2, 4, 9, "0.1")

$*************************************
$ Defining Names for Random Properties
$*************************************

$*************************************
$ For Layer = 1 Isotropic Materials
$*************************************

ui_spread_set_cell (spread_rp,1, 1, 1, "Youngs Modulus")
ui_spread_set_cell (spread_rp,1, 2, 1, "Poisson Ratio")
ui_spread_set_cell (spread_rp,1, 3, 1, "Shear Modulus")
ui_spread_set_cell (spread_rp,1, 4, 1, "Mass Density")

$*************************************
$ For Layer = 2 Orthotropic Materials
$*************************************

ui_spread_set_cell (spread_rp,1, 1, 2, "Youngs Modulus1")
ui_spread_set_cell (spread_rp,1, 2, 2, "Youngs Modulus2")
ui_spread_set_cell (spread_rp,1, 3, 2, "Poisson Ratio")
ui_spread_set_cell (spread_rp,1, 4, 2, "Shear Modulus12")
ui_spread_set_cell (spread_rp,1, 5, 2, "Shear Modulus13")
ui_spread_set_cell (spread_rp,1, 6, 2, "Shear Modulus23")
ui_spread_set_cell (spread_rp,1, 7, 2, "Mass Density")

$*************************************
$ For Layer = 3 Anisotropic Materials
$*************************************

ui_spread_set_cell (spread_rp,1, 1, 3, "Stiffness11")
ui_spread_set_cell (spread_rp,1, 2, 3, "Stiffness22")
ui_spread_set_cell (spread_rp,1, 3, 3, "Stiffness33")
ui_spread_set_cell (spread_rp,1, 4, 3, "Stiffness44")
ui_spread_set_cell (spread_rp,1, 5, 3, "Stiffness55")
ui_spread_set_cell (spread_rp,1, 6, 3, "Stiffness66")
ui_spread_set_cell (spread_rp,1, 7, 3, "Mass Density")

$******************************
$ For Layer = 4 Shell elements
$******************************

ui_spread_set_cell (spread_rp,1, 1, 4, "Thickness")
ui_spread_set_cell (spread_rp,1, 2, 4, "Nonstr Mass")
ui_spread_set_cell (spread_rp,1, 3, 4, "Mat Orientation")

$******************************
$ For Layer = 5 Rod elements
$******************************

ui_spread_set_cell (spread_rp,1, 1, 5, "X-Sectional Area")
ui_spread_set_cell (spread_rp,1, 2, 5, "Torsional Constant")
ui_spread_set_cell (spread_rp,1, 3, 5, "Nonstructural Mass")

$******************************
$ For Layer = 6 Beam elements
$******************************

ui_spread_set_cell (spread_rp,1, 1, 6, "X-Sectional Area")
ui_spread_set_cell (spread_rp,1, 2, 6, "Inertia-11")
ui_spread_set_cell (spread_rp,1, 3, 6, "Inertia-12")
ui_spread_set_cell (spread_rp,1, 4, 6, "Inertia-22")

$******************************
$ For Layer = 7 Spring elements
$******************************

ui_spread_set_cell (spread_rp,1, 1, 7, "Stiffness")


$******************************************
$ For Layer = 8 Concentrated Mass elements
$******************************************

ui_spread_set_cell (spread_rp,1, 1, 8, "Mass Value")

$******************************************
$ For Layer = 9 Beam Section Properties
$******************************************

ui_spread_set_cell (spread_rp,1, 1, 9, "Param1")
ui_spread_set_cell (spread_rp,1, 2, 9, "Param2")
ui_spread_set_cell (spread_rp,1, 3, 9, "Param3")
ui_spread_set_cell (spread_rp,1, 4, 9, "Param4")

END FUNCTION



$***************************************************************
$ Closing the DMCS_GUI
$***************************************************************

FUNCTION DMCS_GUI_close()

ui_form_hide( "DMCS_GUI")

END FUNCTION


$***************************************************************
$ To clear the spreadsheets
$***************************************************************

FUNCTION clear()

GLOBAL STRING prob_type[5], X[70](1000),Y[70](1000)
GLOBAL INTEGER no_of_rvs, no_of_rfs

IF (prob_type == "1") THEN

	ui_wid_delete(spread_rf)
	
	spread_rf=ui_spread_create(DMCS_GUI_id,"",4.8,1,9,3,0.8,5,9,0,1,X,Y,"Random Fields","","","SINGLE")
	
	no_of_rfs=0

END IF


IF (prob_type == "2") THEN

	ui_wid_delete(spread_rv)
	
	spread_rv=ui_spread_create(DMCS_GUI_id,"",4.8,1,9,3,0.3,5,5,0,1,X,Y,"Random Variables","","","SINGLE")
	
	no_of_rvs=0

END IF


END FUNCTION



$***************************************************************
$ Switch button to select geometry 1=planar 2=cylindrical
$***************************************************************

FUNCTION switch_cb_1(item1, item2)

STRING item1 [], item2 []

GLOBAL STRING geo[40]

IF (item1== "1" && item2 == "ON" ) THEN

	geo = "PLANE"

ELSE IF (item1== "2" && item2 == "ON" ) THEN

	geo = "CYLINDER"

END IF

END FUNCTION


$**************************************************************************************
$ Switch button to select autocorrelation function 1=exponential 2=triangular 3=convex
$**************************************************************************************

FUNCTION switch_cb_3(item1, item2)

STRING item1 [], item2 []

GLOBAL STRING corr_func[40]

IF (item1== "1" && item2 == "ON" ) THEN

	corr_func = "EXPONENTIAL"

ELSE IF (item1== "2" && item2 == "ON" ) THEN

	corr_func = "TRIANGULAR"

ELSE IF (item1== "3" && item2 == "ON" ) THEN

	corr_func = "CONVEX"

END IF

END FUNCTION


$******************************************************************************************************************
$ Switch button to select distribution type 1=normal 2=lognormal 3=uniform 4=exponential 5=rayleigh 6=small 7=large
$*******************************************************************************************************************

FUNCTION switch_cb_4(item1, item2)

STRING item1 [], item2 []

GLOBAL STRING dist_type[40]

IF (item1== "1" && item2 == "ON" ) THEN

	dist_type = "NORMAL"

ELSE IF (item1== "2" && item2 == "ON" ) THEN

	dist_type = "LOGNORMAL"

ELSE IF (item1== "3" && item2 == "ON" ) THEN

	dist_type = "UNIFORM"

ELSE IF (item1== "4" && item2 == "ON" ) THEN

	dist_type = "EXPONENTIAL"

ELSE IF (item1== "5" && item2 == "ON" ) THEN

	dist_type = "RAYLEIGH"

ELSE IF (item1== "6" && item2 == "ON" ) THEN

	dist_type = "SMALL_I"

ELSE IF (item1== "7" && item2 == "ON" ) THEN

	dist_type = "LARGE_I"

END IF

END FUNCTION


$***********************************************************************
$ Switch button to select problem type 1=random field 2=random variable
$***********************************************************************

FUNCTION switch_cb_8(item1, item2)

STRING item1 [], item2 []

GLOBAL STRING prob_type[5]


IF (item1== "1" && item2 == "ON" ) THEN

	prob_type = "1"
	
	ui_wid_set(spread_rf,"DISPLAY",TRUE)
	
	ui_wid_set(spread_rv,"DISPLAY",FALSE)
	
	ui_wid_set(sort_sw1,"DISPLAY",TRUE)
	
	ui_wid_set(sort_sw3,"DISPLAY",TRUE)
	
	ui_wid_set(dbx4_id,"DISPLAY",TRUE)

	ui_wid_set(dbx12_id,"DISPLAY",TRUE)
	
	ui_wid_set(label1,"DISPLAY",FALSE)
	
	ui_wid_set(label2,"DISPLAY",TRUE)
	
	ui_wid_set(run_rv,"DISPLAY",FALSE)
	
	ui_wid_set(run_rf,"DISPLAY",TRUE)

ELSE IF (item1== "2" && item2 == "ON" ) THEN

	prob_type = "2"
	
	ui_wid_set(spread_rv,"DISPLAY",TRUE)
	
	ui_wid_set(spread_rf,"DISPLAY",FALSE)
	
	ui_wid_set(run_rf,"DISPLAY",FALSE)
	
	ui_wid_set(run_rv,"DISPLAY",TRUE)
	
	ui_wid_set(label1,"DISPLAY",TRUE)
	
	ui_wid_set(label2,"DISPLAY",FALSE)
	
	ui_wid_set(sort_sw1,"DISPLAY",FALSE)
	
	ui_wid_set(sort_sw3,"DISPLAY",FALSE)
	
	ui_wid_set(dbx4_id,"DISPLAY",FALSE)

	ui_wid_set(dbx12_id,"DISPLAY",FALSE)

END IF


END FUNCTION

$*********************************************************
$  Visualizing the random variables on the spreadsheets
$*********************************************************

FUNCTION vis_input()

$********************************
$ Defining the GLOBAL variables
$********************************

GLOBAL STRING X[70](1000),Y[70](1000),mat_names[40](2000),prob_type[5],dist_type[40],prop_name[40]
GLOBAL STRING corr_func[40],geo[40],corr_length[40],cov_val[40](1000),mod_text[50](1000)
GLOBAL INTEGER num_mat,no_of_rvs,no_of_rfs,no_of_groups,num_regions,num_words, word_ids_prop(10),regions_with_elements,region_ids_with_elements(10000)

$********************************
$ Defining the LOCAL variables
$********************************

INTEGER word_ids(50) ,field_ids(1000) ,dat_ex,m,cat_id,lin_code,dir_code,mat_type,i,h,region_ids(VIRTUAL),v,group_counter,element_check
INTEGER id_of_mat, data_type,int_val, coord_id,node_id, field_id,g,sec_nrec, sec_bytes_per_rec,data_types(5),sec_id
INTEGER m_id ,m_l, m_d, cons_checker, pos_of_val,group_id, num_elems, elem_ids(VIRTUAL)
INTEGER el_ty, d_s_f ,co_f, g_f, f_f, l_f ,lay_c
STRING  mat_name [50],mat_des [50],char_val[50],sec_name[31], sec_type_name[31],beam_sec_checker[31]
STRING  no_of_kl_terms[20],sec_val_str[10](4),check_name[30],group_names[30](100)
REAL    mat_values(20),real_val(40),sec_values(4)

ui_override_message(11000105,"NO")

$*********************************************
$Checking if any distribution type is selected
$*********************************************

IF (dist_type == " ") THEN

	ui_wid_delete(spread_rv)
	
	spread_rv=ui_spread_create(DMCS_GUI_id,"",4.8,1,9,3,0.3,5,5,0,1,X,Y,"Random Variables","","","SINGLE")
	
	no_of_rvs=0

	user_message( "ERROR", 1, "COSSAN-PCL", "Please choose a distribution type" )

	RETURN

END IF

$******************************************
$Creating random variables on spreadsheet
$******************************************

IF (prob_type == "2") THEN

	IF ( no_of_rvs>= 1) THEN
	
		FOR (m=1 TO no_of_rvs)
		
			ui_spread_row_delete (spread_rv, 1)
		
		END FOR
	
	END IF

	$*************************************
	$Initializing no of random variables
	$*************************************
	
	no_of_rvs=0
	
	$*******************************************
	$Counting the total no of materials defined
	$*******************************************
	
	db_count_materials (num_mat)

	dump str_from_integer(num_mat)//" Material cards defined in the model"

	$*******************************************
	$Counting the total no of properties defined
	$*******************************************
		
	db_count_region_ids ( num_regions )
	dump str_from_integer(num_regions)//" Property cards defined in the model"

	sys_allocate_array (region_ids, 1, num_regions)

	$************************************************************************
	$ Determine the property cards which are assigned to elements
	$ Those should be processed only since other wont affect the model
	$************************************************************************

	db_get_all_region_ids (num_regions,region_ids)

	regions_with_elements = 0
	FOR (m=1 TO num_regions)

		db_count_elements_in_region (region_ids(m), num_elems)

		IF (num_elems != 0) THEN

			regions_with_elements = regions_with_elements + 1
			region_ids_with_elements(regions_with_elements) = region_ids(m)		

		END IF

	END FOR

	$***************************************************************************************************************
	$Starting to write the random variables on spreadsheet (9=no of layers in spread_rp,7=no of rows in spread_rp)
	$***************************************************************************************************************
	
	FOR (g=1 TO 9 )

		FOR (i=1 TO 7 )
			
			ui_spread_get_cell (spread_rp,1, i, g, mod_text(i))
	
			ui_spread_get_cell (spread_rp,2, i, g, cov_val(i))

			$********************************************************
			$Checking properties for isotropic materials (layer = 1)
			$********************************************************

			IF (g == 1) THEN

				$**********************************************************
				$Getting the values for different type of random properties
				$**********************************************************
				
				IF (mod_text(i) == "Youngs Modulus") THEN

					cons_checker = cons_checker + 1 
				
					$*****************************************
					$Getting the youngs modulus values as RV's
					$*****************************************
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$************************************
						$Checking if material is isotropic
						$************************************
	
						IF (cat_id == 1) THEN
							
							no_of_rvs=no_of_rvs+1
							
							mat_names(no_of_rvs) = mat_name
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$********************************************************************************
							$Determining the position of E value in the array mat_values (word_id = 2 for E)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 2, FALSE )

							$*********************************************
							$ Filling in the spread_rv with RV properties
							$*********************************************
							
							ui_spread_row_create (spread_rv, "RV" )
							
							ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
							ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_E")
							
							ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
							
							ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
							ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
						END IF	
					
					END FOR
			
				END IF
				
				IF (mod_text(i) == "Poisson Ratio") THEN

					cons_checker = cons_checker + 1 
				
					$**********************************
					$Getting the poissons ratios as RV's
					$**********************************

					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )


						$************************************
						$Checking if material is isotropic
						$************************************
	
						IF (cat_id == 1) THEN
						
							no_of_rvs=no_of_rvs+1
							
							mat_names(no_of_rvs) = mat_name
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$*********************************************************************************
							$Determining the position of nu value in the array mat_values (word_id = 5 for nu) 
							$*********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 5, FALSE )

							$*********************************************
							$ Filling in the spread_rv with RV properties
							$*********************************************
							
							ui_spread_row_create (spread_rv, "RV" )
							
							ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
							ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_nu")
							
							ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
							
							ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
							ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

						END IF				
					
					END FOR
					
				END IF

				IF (mod_text(i) == "Shear Modulus") THEN
				
					$**********************************
					$Getting the shear modulus as RV's
					$**********************************

					cons_checker = cons_checker + 1 
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$************************************
						$Checking if material is isotropic
						$************************************
	
						IF (cat_id == 1) THEN

							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$*********************************************************************************
							$Determining the position of G value in the array mat_values (word_id = 8 for G) 
							$*********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 8, FALSE )

							$*********************************************
							$Checking if shear modulus is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rvs=no_of_rvs+1
							
								mat_names(no_of_rvs) = mat_name

								$*********************************************
								$ Filling in the spread_rv with RV properties
								$*********************************************

								ui_spread_row_create (spread_rv, "RV" )
							
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_G")
							
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF											
					

						END IF				
					
					END FOR
					
				END IF
		
				IF (mod_text(i) == "Mass Density") THEN
				
					$**********************************
					$Getting the densities as RV's
					$**********************************
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$************************************
						$Checking if material is isotropic
						$************************************
	
						IF (cat_id == 1) THEN

							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$*********************************************************************************
							$Determining the position of rho value in the array mat_values (word_id = 16 for rho) 
							$*********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 16, FALSE )

							$*********************************************
							$Checking if shear modulus is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rvs=no_of_rvs+1
							
								mat_names(no_of_rvs) = mat_name

								$*********************************************
								$ Filling in the spread_rv with RV properties
								$*********************************************

								ui_spread_row_create (spread_rv, "RV" )
							
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_rho")
							
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
							END IF											

						END IF

					END FOR
					
				END IF

			END IF

			$********************************************************
			$Checking properties for orthotropic materials (layer = 2)
			$********************************************************

			IF (g == 2) THEN
	
				$**********************************************************
				$Getting the values for different type of random properties
				$**********************************************************
				
				IF (mod_text(i) == "Youngs Modulus1") THEN
				
					$*****************************************
					$Getting the youngs modulus values as RV's
					$*****************************************
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$************************************
						$Checking if material is orthotropic
						$************************************
		
						IF (cat_id == 5) THEN
							
							no_of_rvs=no_of_rvs+1
							
							mat_names(no_of_rvs) = mat_name
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$********************************************************************************
							$Determining the position of E value in the array mat_values (word_id = 2 for E)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 2, FALSE )

							$*********************************************
							$ Filling in the spread_rv with RV properties
							$*********************************************
							
							ui_spread_row_create (spread_rv, "RV" )
							
							ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
							ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_E1")
							
							ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
							
							ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
							ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
						END IF	
					
					END FOR
			
				END IF

				$**********************************************************
				$Getting the values for different type of random properties
				$**********************************************************
				
				IF (mod_text(i) == "Youngs Modulus2") THEN
				
					$*****************************************
					$Getting the youngs modulus values as RV's
					$*****************************************
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)

						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$************************************
						$Checking if material is orthotropic
						$************************************
		
						IF (cat_id == 5) THEN
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$********************************************************************************
							$Determining the position of E value in the array mat_values (word_id = 3 for E2)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 3, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rvs=no_of_rvs+1
							
								mat_names(no_of_rvs) = mat_name

								$*********************************************
								$ Filling in the spread_rv with RV properties
								$*********************************************

								ui_spread_row_create (spread_rv, "RV" )
							
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_E2")
							
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
							END IF	
								
						END IF		
					
					END FOR
			
				END IF
				
				IF (mod_text(i) == "Poisson Ratio") THEN
				
					$**********************************
					$Getting the poissons ratios as RV's
					$**********************************
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$************************************
						$Checking if material is orthotropic
						$************************************
		
						IF (cat_id == 5) THEN
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$********************************************************************************
							$Determining the position of nu12 value in the array mat_values (word_id = 5 for nu12)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 5, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rvs=no_of_rvs+1
							
								mat_names(no_of_rvs) = mat_name

								$*********************************************
								$ Filling in the spread_rv with RV properties
								$*********************************************

								ui_spread_row_create (spread_rv, "RV" )
							
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_nu12")
							
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
							END IF	
		
						END IF
					
					END FOR
					
				END IF

				IF (mod_text(i) == "Shear Modulus12") THEN
				
					$**********************************
					$Getting the shear modulus as RV's
					$**********************************
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$************************************
						$Checking if material is otrhotropic
						$************************************
	
						IF (cat_id == 5) THEN

							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$********************************************************************************
							$Determining the position of G12 value in the array mat_values (word_id = 8 for G12)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 8, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rvs=no_of_rvs+1
							
								mat_names(no_of_rvs) = mat_name

								$*********************************************
								$ Filling in the spread_rv with RV properties
								$*********************************************

								ui_spread_row_create (spread_rv, "RV" )
							
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_G12")
							
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
							END IF									
					
						END IF				
					
					END FOR
					
				END IF

				IF (mod_text(i) == "Shear Modulus23") THEN
				
					$**********************************
					$Getting the shear modulus as RV's
					$**********************************
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$************************************
						$Checking if material is otrhotropic
						$************************************
	
						IF (cat_id == 5) THEN

							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$********************************************************************************
							$Determining the position of G23 value in the array mat_values (word_id = 9 for G23)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 9, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rvs=no_of_rvs+1
							
								mat_names(no_of_rvs) = mat_name

								$*********************************************
								$ Filling in the spread_rv with RV properties
								$*********************************************

								ui_spread_row_create (spread_rv, "RV" )
							
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_G23")
							
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
							END IF	
						END IF				
					
					END FOR
					
				END IF

				IF (mod_text(i) == "Shear Modulus13") THEN
				
					$**********************************
					$Getting the shear modulus as RV's
					$**********************************
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)

						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$************************************
						$Checking if material is otrhotropic
						$************************************
	
						IF (cat_id == 5) THEN

							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$********************************************************************************
							$Determining the position of G13 value in the array mat_values (word_id = 10 for G13)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 10, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rvs=no_of_rvs+1
							
								mat_names(no_of_rvs) = mat_name

								$*********************************************
								$ Filling in the spread_rv with RV properties
								$*********************************************

								ui_spread_row_create (spread_rv, "RV" )
							
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_G13")
							
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
							END IF									
					
						END IF				
					
					END FOR
					
				END IF
	
		
				IF (mod_text(i) == "Mass Density") THEN
				
					$**********************************
					$Getting the densities as RV's
					$**********************************
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$************************************
						$Checking if material is orthotropic
						$************************************

						IF (cat_id == 5) THEN

							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$********************************************************************************
							$Determining the position of rho value in the array mat_values (word_id = 16 for rho)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 16, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rvs=no_of_rvs+1
							
								mat_names(no_of_rvs) = mat_name

								$*********************************************
								$ Filling in the spread_rv with RV properties
								$*********************************************

								ui_spread_row_create (spread_rv, "RV" )
							
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_rho")
							
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
							END IF	

						END IF										

					END FOR
					
				END IF

			END IF

			$********************************************************
			$Checking properties for 3D anisotropic materials (layer = 3)
			$********************************************************

			IF (g == 3) THEN
	
				$**********************************************************
				$Getting the values for different type of random properties
				$**********************************************************
				
				IF (mod_text(i) == "stiffness11") THEN
				
					$*****************************************
					$Getting the youngs modulus values as RV's
					$*****************************************
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$***************************************
						$Checking if material is 3D anisotropic
						$***************************************
		
						IF (cat_id == 3) THEN
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$********************************************************************************
							$Determining the position of G11 value in the array mat_values (word_id = 54 for G11)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 54, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rvs=no_of_rvs+1
							
								mat_names(no_of_rvs) = mat_name

								$*********************************************
								$ Filling in the spread_rv with RV properties
								$*********************************************

								ui_spread_row_create (spread_rv, "RV" )
							
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_G11")
							
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
							END IF	
							
						END IF	
					
					END FOR
			
				END IF

				$**********************************************************
				$Getting the values for different type of random properties
				$**********************************************************
				
				IF (mod_text(i) == "stiffness22") THEN
				
					$*****************************************
					$Getting the youngs modulus values as RV's
					$*****************************************
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$************************************
						$Checking if material is 3D anisotropic
						$************************************
		
						IF (cat_id == 3) THEN
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$********************************************************************************
							$Determining the position of G22 value in the array mat_values (word_id = 57 for G22)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 57, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rvs=no_of_rvs+1
							
								mat_names(no_of_rvs) = mat_name

								$*********************************************
								$ Filling in the spread_rv with RV properties
								$*********************************************

								ui_spread_row_create (spread_rv, "RV" )
							
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_G22")
							
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
							END IF	
								
						END IF		
					
					END FOR
			
				END IF
				
				IF (mod_text(i) == "stiffness33") THEN
				
					$**********************************
					$Getting the poissons ratios as RV's
					$**********************************
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$************************************
						$Checking if material is 3D anisotropic
						$************************************
		
						IF (cat_id == 3) THEN
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$********************************************************************************
							$Determining the position of G33 value in the array mat_values (word_id = 59 for G33)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 59, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rvs=no_of_rvs+1
							
								mat_names(no_of_rvs) = mat_name

								$*********************************************
								$ Filling in the spread_rv with RV properties
								$*********************************************

								ui_spread_row_create (spread_rv, "RV" )
							
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_G33")
							
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
							END IF	
							
						END IF
					
					END FOR
					
				END IF

				IF (mod_text(i) == "stiffness44") THEN
				
					$**********************************
					$Getting the shear modulus as RV's
					$**********************************
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$************************************
						$Checking if material is 3D anisotropic
						$************************************
	
						IF (cat_id == 3) THEN

							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$********************************************************************************
							$Determining the position of G44 value in the array mat_values (word_id = 60 for G44)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 60, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rvs=no_of_rvs+1
							
								mat_names(no_of_rvs) = mat_name

								$*********************************************
								$ Filling in the spread_rv with RV properties
								$*********************************************

								ui_spread_row_create (spread_rv, "RV" )
							
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_G44")
							
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
							END IF	

							ui_spread_row_create (spread_rv, "RV" )
							
							ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
							ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_G44")
							
							ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

							ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(5)))
							
							ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))										
					
						END IF				
					
					END FOR
					
				END IF

				IF (mod_text(i) == "stiffness55") THEN
				
					$**********************************
					$Getting the shear modulus as RV's
					$**********************************
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$************************************
						$Checking if material is 3D anisotropic
						$************************************
	
						IF (cat_id == 3) THEN

							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$********************************************************************************
							$Determining the position of G55 value in the array mat_values (word_id = 63 for G55)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 63, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rvs=no_of_rvs+1
							
								mat_names(no_of_rvs) = mat_name

								$*********************************************
								$ Filling in the spread_rv with RV properties
								$*********************************************

								ui_spread_row_create (spread_rv, "RV" )
							
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_G55")
							
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
							END IF											
					
						END IF				
					
					END FOR
					
				END IF

				IF (mod_text(i) == "stiffness66") THEN
				
					$**********************************
					$Getting the shear modulus as RV's
					$**********************************
					
					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

						$************************************
						$Checking if material is 3D anisotropic
						$************************************
	
						IF (cat_id == 3) THEN

							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$********************************************************************************
							$Determining the position of G66 value in the array mat_values (word_id = 65 for G66)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 65, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rvs=no_of_rvs+1
							
								mat_names(no_of_rvs) = mat_name

								$*********************************************
								$ Filling in the spread_rv with RV properties
								$*********************************************

								ui_spread_row_create (spread_rv, "RV" )
							
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_G66")
							
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
							END IF										
					
						END IF				
					
					END FOR
					
				END IF
	
		
				IF (mod_text(i) == "Mass Density") THEN
				
					$**********************************
					$Getting the densities as RV's
					$**********************************

					FOR (m=1 TO regions_with_elements)

						db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
					
						db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )					

						$************************************
						$Checking if material is 3D anisotropic
						$************************************

						IF (cat_id == 3) THEN

							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$********************************************************************************
							$Determining the position of rho value in the array mat_values (word_id = 16 for rho)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 16, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rvs=no_of_rvs+1
							
								mat_names(no_of_rvs) = mat_name

								$*********************************************
								$ Filling in the spread_rv with RV properties
								$*********************************************

								ui_spread_row_create (spread_rv, "RV" )
							
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
							
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, mat_name//"_rho")
							
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)

								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(mat_values(pos_of_val)))
							
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))
							
							END IF	

						END IF										

					END FOR
					
				END IF

			END IF

			$*******************************************************************
			$Checking geometric random properties for shell elements (layer = 4)
			$*******************************************************************

			IF (g == 4) THEN

				IF (mod_text(i) == "Thickness") THEN
				
					$********************************************************
					$Getting the thickness values for shell elements as RV's
					$********************************************************
					
					FOR (h=1 TO regions_with_elements )

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
						
						$**********************************************************************
						$Checking if any shell elements are defined (el_type = 51 for shell)
						$**********************************************************************

						IF (el_ty == 51) THEN
		
							db_get_prop_value(region_ids_with_elements(h),36,id_of_mat,data_type,int_val,real_val,char_val,@
							coord_id,node_id,field_id)
							
							$******************************************************************************
							$Checking if any nonstructural thickness value is defined for the shell element
							$******************************************************************************

							IF (real_val(1) != 0) THEN

								no_of_rvs=no_of_rvs+1
								
								ui_spread_row_create (spread_rv, "RV" )
								
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
								
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1,prop_name//"_t")
								
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
								
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(real_val(1)))

								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

							real_val(1) = 0

						END IF
						
					END FOR

				END IF

				IF (mod_text(i) == "Mat Orientation") THEN
				
					$********************************************************
					$Getting the material orientation values for shell elements as RV's
					$********************************************************
					
					FOR (h=1 TO regions_with_elements )

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
						
						$**********************************************************************
						$Checking if any shell elements are defined (el_type = 51 for shell)
						$**********************************************************************

						IF (el_ty == 51) THEN

							db_count_props ( h, num_words )
							
							$****************************************************************
							$ Finding out the word ids related to those entered values
							$***************************************************************

							db_get_props_by_region ( num_words, h, word_ids_prop )
							
							$******************************************************************************
							$Checking if any material orientation value is defined for the shell element
							$******************************************************************************

							IF (word_ids_prop(2) == 20) THEN

								db_get_prop_value(region_ids_with_elements(h),20,id_of_mat,data_type,int_val,real_val,char_val,@
								coord_id,node_id,field_id)

								no_of_rvs=no_of_rvs+1
								
								ui_spread_row_create (spread_rv, "RV" )
								
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
								
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1,prop_name//"_THE")
								
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
								
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(real_val(1)))

								IF (real_val(1) != 0) THEN

									ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

								END IF

							END IF

							real_val(1) = 0

						END IF
						
					END FOR

				END IF


				IF (mod_text(i) == "Nonstr Mass") THEN
				
					$****************************************************************
					$Getting the nonstructural mass values for shell elements as RV's
					$****************************************************************
					
					FOR (h=1 TO regions_with_elements )

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)

						$**********************************************************************
						$Checking if any shell elements are defined (el_type = 51 for shell)
						$**********************************************************************

						IF (el_ty == 51) THEN
		
							db_get_prop_value(region_ids_with_elements(h),4037,id_of_mat,data_type,int_val,real_val,char_val,@
							coord_id,node_id,field_id)

							$**********************************************************************
							$Checking if any nonstructural mass value is defined for the shell element
							$**********************************************************************

							IF (real_val(1) != 0) THEN

								no_of_rvs=no_of_rvs+1
								
								ui_spread_row_create (spread_rv, "RV" )
								
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
								
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1,prop_name//"_NSM")
								
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
								
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(real_val(1)))

								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

							real_val(1) = 0

						END IF
						
					END FOR

				END IF

			END IF



			$*****************************************************************
			$Checking geometric random properties for rod elements (layer = 5)
			$*****************************************************************

			IF (g == 5) THEN

				IF (mod_text(i) == "X-Sectional Area") THEN
				
					$****************************************************************
					$Getting the cross sectional area values for rod elements as RV's
					$****************************************************************
					
					FOR (h=1 TO regions_with_elements )

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)

						$**********************************************************************
						$Checking if any rod elements are defined (el_type = 18 for rod)
						$**********************************************************************

						IF (el_ty == 18) THEN
		
							db_get_prop_value(region_ids_with_elements(h),1,id_of_mat,data_type,int_val,real_val,char_val,@
							coord_id,node_id,field_id)
							
							$**********************************************************************
							$Checking if any X sectional area value is defined for the rod element
							$**********************************************************************

							IF (real_val(1) != 0) THEN

								no_of_rvs=no_of_rvs+1
								
								ui_spread_row_create (spread_rv, "RV" )
								
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
								
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, prop_name//"_A")
								
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
								
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(real_val(1)))

								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

							real_val(1) = 0

						END IF
						
					END FOR

				END IF

				IF (mod_text(i) == "Torsional Constant") THEN
				
					$****************************************************************
					$Getting the torsional constant values for rod elements as RV's
					$****************************************************************
					
					FOR (h=1 TO regions_with_elements )

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)

						$**********************************************************************
						$Checking if any rod elements are defined (el_type = 18 for rod)
						$**********************************************************************

						IF (el_ty == 18) THEN
		
							db_get_prop_value(region_ids_with_elements(h),1026,id_of_mat,data_type,int_val,real_val,char_val,@
							coord_id,node_id,field_id)
							
							$**********************************************************************
							$Checking if any torsional constant value is defined for the rod element
							$**********************************************************************

							IF (real_val(1) != 0) THEN

								no_of_rvs=no_of_rvs+1
								
								ui_spread_row_create (spread_rv, "RV" )
								
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
								
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, prop_name//"_J")
								
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
								
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(real_val(1)))

								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

							real_val(1) = 0

						END IF
						
					END FOR

				END IF

				IF (mod_text(i) == "Nonstr Mass") THEN
				
					$****************************************************************
					$Getting the nonstructural mass values for rod elements as RV's
					$****************************************************************
					
					FOR (h=1 TO regions_with_elements )

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)

						$**********************************************************************
						$Checking if any rod elements are defined (el_type = 18 for rod)
						$**********************************************************************

						IF (el_ty == 18) THEN
		
							db_get_prop_value(region_ids_with_elements(h),4037,id_of_mat,data_type,int_val,real_val,char_val,@
							coord_id,node_id,field_id)

							$**********************************************************************
							$Checking if any nonstructural mass value is defined for the rod element
							$**********************************************************************

							IF (real_val(1) != 0) THEN

								no_of_rvs=no_of_rvs+1
								
								ui_spread_row_create (spread_rv, "RV" )
								
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
								
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, prop_name//"_NSM")
								
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
								
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(real_val(1)))

								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

							real_val(1) = 0
																
						END IF
						
					END FOR

				END IF

			END IF

			$*****************************************************************
			$Checking geometric random properties for beam elements (layer = 6)
			$*****************************************************************

			IF (g == 6) THEN

				IF (mod_text(i) == "X-Sectional Area") THEN

					$****************************************************************
					$Getting the cross sectional area values for beam elements as RV's
					$****************************************************************
					
					FOR (h=1 TO regions_with_elements )

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************
						
						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)

						$**********************************************************************
						$Checking if any beam elements are defined (el_type = 11 for beam)
						$**********************************************************************

						IF (el_ty == 11) THEN
		
							db_get_prop_value(region_ids_with_elements(h),4070,id_of_mat,data_type,int_val,real_val,char_val,@
							coord_id,node_id,field_id)

							$**********************************************************************
							$Checking if any X sectional are value is defined for the beam element
							$**********************************************************************

							IF (real_val(1) != 0) THEN

								no_of_rvs=no_of_rvs+1
								
								ui_spread_row_create (spread_rv, "RV" )
								
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
								
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, prop_name//"_A")
								
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
								
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(real_val(1)))

								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

							real_val(1) = 0

						END IF
						
					END FOR
							
				END IF


				IF (mod_text(i) == "Inertia-11") THEN

					$****************************************************************
					$Getting the moment of inertia values for beam elements as RV's
					$****************************************************************
					
					FOR (h=1 TO regions_with_elements)

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)

						$**********************************************************************
						$Checking if any beam elements are defined (el_type = 11 for beam)
						$**********************************************************************

						IF (el_ty == 11) THEN
		
							db_get_prop_value(region_ids_with_elements(h),4078,id_of_mat,data_type,int_val,real_val,char_val,@
							coord_id,node_id,field_id)

							$**********************************************************************
							$Checking if any inertia value is defined for the beam element
							$**********************************************************************

							IF (real_val(1) != 0) THEN

								no_of_rvs=no_of_rvs+1
								
								ui_spread_row_create (spread_rv, "RV" )
								
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
								
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, prop_name//"_I1")
								
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
								
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(real_val(1)))

								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

							real_val(1) = 0

						END IF
						
					END FOR	
			
				END IF

				IF (mod_text(i) == "Inertia-12") THEN

					$****************************************************************
					$Getting the moment of inertia values for beam elements as RV's
					$****************************************************************
					
					FOR (h=1 TO regions_with_elements)

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)

						$**********************************************************************
						$Checking if any beam elements are defined (el_type = 11 for beam)
						$**********************************************************************

						IF (el_ty == 11) THEN
		
							db_get_prop_value(region_ids_with_elements(h),4080,id_of_mat,data_type,int_val,real_val,char_val,@
							coord_id,node_id,field_id)

							$**********************************************************************
							$Checking if any inertia value is defined for the beam element
							$**********************************************************************

							IF (real_val(1) != 0) THEN

								no_of_rvs=no_of_rvs+1
								
								ui_spread_row_create (spread_rv, "RV" )
								
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
								
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, prop_name//"_I2")
								
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
								
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(real_val(1)))

								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

							real_val(1) = 0

						END IF
						
					END FOR	
			
				END IF

				IF (mod_text(i) == "Inertia-22") THEN

					$****************************************************************
					$Getting the moment of inertia values for beam elements as RV's
					$****************************************************************
					
					FOR (h=1 TO regions_with_elements)

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)	

						$**********************************************************************
						$Checking if any beam elements are defined (el_type = 11 for beam)
						$**********************************************************************

						IF (el_ty == 11) THEN
		
							db_get_prop_value(region_ids_with_elements(h),4079,id_of_mat,data_type,int_val,real_val,char_val,@
							coord_id,node_id,field_id)

							$**********************************************************************
							$Checking if any inertia value is defined for the beam element
							$**********************************************************************

							IF (real_val(1) != 0) THEN

								no_of_rvs=no_of_rvs+1
								
								ui_spread_row_create (spread_rv, "RV" )
								
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
								
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1, prop_name//"_I12")
								
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
								
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(real_val(1)))

								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

							real_val(1) = 0

						END IF
						
					END FOR	
			
				END IF

			END IF

			$*******************************************************************
			$Checking random properties for 1D spring elements (layer = 7)
			$*******************************************************************

			IF (g == 7) THEN

				IF (mod_text(i) == "Stiffness") THEN
				
					$********************************************************
					$Getting the stiffness values for 1D spring elements as RV's
					$********************************************************
					
					FOR (h=1 TO regions_with_elements)

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
						
						$*******************************************************************************
						$Checking if any shell elements are defined (el_type = 21 for 1D spring element)
						$*******************************************************************************

						IF (el_ty == 21) THEN
		
							db_get_prop_value(region_ids_with_elements(h),4023,id_of_mat,data_type,int_val,real_val,char_val,@
							coord_id,node_id,field_id)
							
							$******************************************************************************
							$Checking if any nonstructural thickness value is defined for 1D spring element
							$******************************************************************************

							IF (real_val(1) != 0) THEN

								no_of_rvs=no_of_rvs+1
								
								ui_spread_row_create (spread_rv, "RV" )
								
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
								
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1,prop_name//"_K")
								
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
								
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(real_val(1)))

								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

							real_val(1) = 0

						END IF
						
					END FOR

				END IF

			END IF

			$*******************************************************************
			$Checking random properties for 0D mass elements (layer = 8)
			$*******************************************************************

			IF (g == 8) THEN

				IF (mod_text(i) == "Mass Value") THEN
				
					$********************************************************
					$Getting the stiffness values for 0D mass elements as RV's
					$********************************************************
					
					FOR (h=1 TO regions_with_elements)

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
						
						$*******************************************************************************
						$Checking if any shell elements are defined (el_type = 1 for 0D mass element)
						$*******************************************************************************

						IF (el_ty == 1) THEN
		
							db_get_prop_value(region_ids_with_elements(h),2069,id_of_mat,data_type,int_val,real_val,char_val,@
							coord_id,node_id,field_id)
							
							$**************************************************************
							$Checking if any mass value is defined for the 0D mass elemens
							$***************************************************************

							IF (real_val(1) != 0) THEN

								no_of_rvs=no_of_rvs+1
								
								ui_spread_row_create (spread_rv, "RV" )
								
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
								
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1,prop_name//"_M")
								
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
								
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(real_val(1)))

								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

							real_val(1) = 0

						END IF
						
					END FOR

				END IF
			END IF

			$*******************************************************************
			$Checking random properties for 0D mass elements (layer = 8)
			$*******************************************************************

			IF (g == 8) THEN

				IF (mod_text(i) == "Mass Value") THEN
				
					$********************************************************
					$Getting the stiffness values for 0D mass elements as RV's
					$********************************************************
					
					FOR (h=1 TO regions_with_elements)

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
						
						$*******************************************************************************
						$Checking if any shell elements are defined (el_type = 1 for 0D mass element)
						$*******************************************************************************

						IF (el_ty == 1) THEN
		
							db_get_prop_value(region_ids_with_elements(h),2069,id_of_mat,data_type,int_val,real_val,char_val,@
							coord_id,node_id,field_id)
							
							$**************************************************************
							$Checking if any mass value is defined for the 0D mass elemens
							$***************************************************************

							IF (real_val(1) != 0) THEN

								no_of_rvs=no_of_rvs+1
								
								ui_spread_row_create (spread_rv, "RV" )
								
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
								
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1,prop_name//"_M")
								
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
								
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(real_val(1)))

								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

							real_val(1) = 0

						END IF
						
					END FOR

				END IF

			END IF
			$*******************************************************************
			$Checking random properties for beam sections (layer = 9)
			$*******************************************************************

			IF (g == 9) THEN

				IF (mod_text(i) == "Param1") THEN
				
					$********************************************************
					$Getting the parameters of the section as RV's
					$********************************************************
					
					FOR (h=1 TO regions_with_elements)

						$***********************************************************************************************
						$Variable beam_sec_checker keeps track if this section property is already assigend as RV or not
						$***********************************************************************************************

						beam_sec_checker = sec_name
						
						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
						
						$*******************************************************************************
						$Checking if any beam elements are defined (el_type = 11 for beam element)
						$*******************************************************************************

						IF (el_ty == 11) THEN

							$*******************************************************************************************
							$ Getting the beam section id assigned to the prop card (word_id = 39 for Beam section ID) 
							$*******************************************************************************************	

							db_get_prop_value(region_ids_with_elements(h),39,id_of_mat,data_type,sec_id,real_val,char_val,@
							coord_id,node_id,field_id)

							$*****************************************************************
							$ Getting the beam section name using beam section ID (sec_id)
							$*****************************************************************

							db_get_beam_section( sec_id, sec_type_name, sec_name, sec_nrec, sec_bytes_per_rec ) 

							$*****************************************************************
							$ Checking if this section name is already assigned as RV or not
							$*****************************************************************	
							
							IF (beam_sec_checker != sec_name) THEN

								$***************************************************************
								$ Getting the beam section parameters using sec_id
								$***************************************************************										
	
								bl_get_std_beam_section_data (sec_id,sec_nrec,data_types,sec_values,field_ids)
	
								FOR (v=1 TO sec_nrec )
									
									sec_val_str(v) = str_from_real(sec_values(v))
	
								END FOR
	
								no_of_rvs=no_of_rvs+1
									
								ui_spread_row_create (spread_rv, "RV" )
									
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
									
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1,prop_name//"_pr1")
									
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
									
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(sec_values(1)))
	
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

						END IF
						
					END FOR

				END IF

				IF (mod_text(i) == "Param2") THEN

					$*************************************************************
					$Variable sec_name has to be initialized at each new parameter
					$*************************************************************

					sec_name = " "
				
					$***********************************************
					$Getting the parameters of the section as RV's
					$***********************************************
					
					FOR (h=1 TO regions_with_elements)

						beam_sec_checker = sec_name

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
						
						$*******************************************************************************
						$Checking if any beam elements are defined (el_type = 11 for beam element)
						$*******************************************************************************

						IF (el_ty == 11) THEN

							$*******************************************************************************************
							$ Getting the beam section id assigned to the prop card (word_id = 39 for Beam section ID) 
							$*******************************************************************************************										
							db_get_prop_value(region_ids_with_elements(h),39,id_of_mat,data_type,sec_id,real_val,char_val,@
							coord_id,node_id,field_id)

							$*****************************************************************
							$ Getting the beam section name using beam section ID (sec_id)
							$*****************************************************************										
							db_get_beam_section( sec_id, sec_type_name, sec_name, sec_nrec, sec_bytes_per_rec ) 

							$*****************************************************************
							$ Checking if this section name is already assigned as RV or not
							$ Checking if the beam section has enough parameters
							$*****************************************************************	

							IF (beam_sec_checker != sec_name &&  sec_nrec >= 2) THEN

								$***************************************************************
								$ Getting the beam section parameters using sec_id
								$***************************************************************										
	
								bl_get_std_beam_section_data (sec_id,sec_nrec,data_types,sec_values,field_ids)
	
								FOR (v=1 TO sec_nrec )
	
									sec_val_str(v) = str_from_real(sec_values(v))
	
								END FOR
	
								no_of_rvs=no_of_rvs+1
									
								ui_spread_row_create (spread_rv, "RV" )
									
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
									
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1,prop_name//"_pr2")
									
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
									
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(sec_values(2)))
	
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

						END IF
						
					END FOR

				END IF

				IF (mod_text(i) == "Param3") THEN

					$*************************************************************
					$Variable sec_name has to be initialized at each new parameter
					$*************************************************************

					sec_name = " "
				
					$********************************************************
					$Getting the parameters of the section as RV's
					$********************************************************
					
					FOR (h=1 TO regions_with_elements)

						beam_sec_checker = sec_name

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
						
						$*******************************************************************************
						$Checking if any beam elements are defined (el_type = 11 for beam element)
						$*******************************************************************************

						IF (el_ty == 11) THEN

							$*******************************************************************************************
							$ Getting the beam section id assigned to the prop card (word_id = 39 for Beam section ID) 
							$*******************************************************************************************										

							db_get_prop_value(region_ids_with_elements(h),39,id_of_mat,data_type,sec_id,real_val,char_val,@
							coord_id,node_id,field_id)

							$*****************************************************************
							$ Getting the beam section name using beam section ID (sec_id)
							$*****************************************************************										

							db_get_beam_section( sec_id, sec_type_name, sec_name, sec_nrec, sec_bytes_per_rec ) 

							$*****************************************************************
							$ Checking if this section name is already assigned as RV or not
							$ Checking if the beam section has enough parameters
							$*****************************************************************

							IF (beam_sec_checker != sec_name &&  sec_nrec >= 3)  THEN

								$***************************************************************
								$ Getting the beam section parameters using sec_id
								$***************************************************************										
	
								bl_get_std_beam_section_data (sec_id,sec_nrec,data_types,sec_values,field_ids)
	
								FOR (v=1 TO sec_nrec )
	
									sec_val_str(v) = str_from_real(sec_values(v))
	
								END FOR
	
								no_of_rvs=no_of_rvs+1
									
								ui_spread_row_create (spread_rv, "RV" )
									
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
									
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1,prop_name//"_pr3")
									
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
									
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(sec_values(3)))
	
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

						END IF
						
					END FOR

				END IF

				IF (mod_text(i) == "Param4") THEN

					$*************************************************************
					$Variable sec_name has to be initialized at each new parameter
					$*************************************************************

					sec_name = " "
				
					$********************************************************
					$Getting the parameters of the section as RV's
					$********************************************************
					
					FOR (h=1 TO regions_with_elements)

						beam_sec_checker = sec_name

						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids_with_elements(h),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
						
						$*******************************************************************************
						$Checking if any beam elements are defined (el_type = 11 for beam element)
						$*******************************************************************************

						IF (el_ty == 11) THEN

							$*******************************************************************************************
							$ Getting the beam section id assigned to the prop card (word_id = 39 for Beam section ID) 
							$*******************************************************************************************										

							db_get_prop_value(region_ids_with_elements(h),39,id_of_mat,data_type,sec_id,real_val,char_val,@
							coord_id,node_id,field_id)

							$*****************************************************************
							$ Getting the beam section name using beam section ID (sec_id)
							$*****************************************************************										

							db_get_beam_section( sec_id, sec_type_name, sec_name, sec_nrec, sec_bytes_per_rec ) 

							$*****************************************************************
							$ Checking if this section name is already assigned as RV or not
							$ Checking if the beam section has enough parameters
							$*****************************************************************

							IF (beam_sec_checker != sec_name &&  sec_nrec >= 4)  THEN

								$***************************************************************
								$ Getting the beam section parameters using sec_id
								$***************************************************************										
	
								bl_get_std_beam_section_data (sec_id,sec_nrec,data_types,sec_values,field_ids)
	
								FOR (v=1 TO sec_nrec )
	
									sec_val_str(v) = str_from_real(sec_values(v))
	
								END FOR
	
								no_of_rvs=no_of_rvs+1
									
								ui_spread_row_create (spread_rv, "RV" )
									
								ui_spread_set_cell (spread_rv,1, no_of_rvs, 1, str_from_integer(no_of_rvs) )
									
								ui_spread_set_cell (spread_rv,2, no_of_rvs, 1,prop_name//"_pr4")
									
								ui_spread_set_cell (spread_rv,3, no_of_rvs, 1, dist_type)
									
								ui_spread_set_cell (spread_rv,4, no_of_rvs, 1, str_from_real(sec_values(4)))
	
								ui_spread_set_cell (spread_rv,5, no_of_rvs, 1, cov_val(i))

							END IF

						END IF
						
					END FOR

				END IF

			END IF

		END FOR

	END FOR

END IF

$*************************************
$Creating randomfields on spreadsheet
$*************************************

IF (prob_type == "1") THEN

	$*******************************************
	$Preventing showing the RF's more than once
	$*******************************************
	
	IF ( no_of_rfs>= 1) THEN
	
		FOR (m=1 TO no_of_rfs)
		
			ui_spread_row_delete (spread_rf, 1)
		
		END FOR
	
	END IF

	$*******************************************
	$ Initializing no of random fields
	$*******************************************

	no_of_rfs = 0

	$*******************************************
	$ Getting the correlation length
	$*******************************************

	ui_wid_get( dbx4_id, "VALUE", corr_length )

	ui_wid_get( dbx12_id, "VALUE", no_of_kl_terms )

	$*******************************************
	$ Counting the total no of groups defined
	$*******************************************
	
	ga_group_ngroups_get(no_of_groups)

	dump str_from_integer(no_of_groups)//" Groups defined in the model"

	$*******************************************************************************
	$ Check if there are any groups defined in the model besides the default group 
	$*******************************************************************************

	IF (no_of_groups == 1) THEN

		user_message( "ERROR", 1, "COSSAN-PCL", "No groups (besides the default group) has been defined in the model\n" @
							//"Please define groups in order model Random Fields" )

		RETURN

	END IF

	$*******************************************************************************
	$ Check if the correlation function has been selected by the user 
	$*******************************************************************************

	IF (corr_func == " ") THEN

		user_message( "ERROR", 1, "COSSAN-PCL", "Please choose a correlation function type" )

		RETURN

	END IF

	$*******************************************************************************
	$ Check if the geometry type has been selected by the user 
	$*******************************************************************************

	IF (geo == " ") THEN

		user_message( "ERROR", 1, "COSSAN-PCL", "Please choose a geometry type" )

		RETURN

	END IF

	$****************************************************************
	$ Loop to identify all the group names in the database
	$****************************************************************

	group_counter = 0
	check_name = " "
	FOR (m=1 TO 100)

		db_get_group_name(m,check_name)

		IF (check_name != " " && check_name != "default_group") THEN 
			group_counter = group_counter + 1
			group_names(group_counter) = check_name
		END IF
		check_name = " "

	END FOR

	$****************************************************************
	$ Getting necessary info for the selected group from the database 
	$****************************************************************

	FOR (m=1 TO no_of_groups)

		db_get_group_id(group_names(m),group_id)

		db_count_elems_in_group ( group_id, num_elems )

		IF (num_elems > 10000) THEN

			user_message( "WARN", 1, "COSSAN-PCL", @
                       "There are more than 10,000 elements in one of the groups. Please make sure to not assign this group as an RF due to memory allocation limitations" )

		END IF

		$*************************************************************************
		$ Retrieve info of group only if there are elements included in the group
		$*************************************************************************

		IF (num_elems != 0) THEN

			sys_allocate_array ( elem_ids, 1, num_elems )

			$*********************************************************************************
			$ Following variable is to prevent RFs if the group does not contain any elements 
			$*********************************************************************************

			element_check = 1

			db_get_elem_ids_in_group ( num_elems, group_id, elem_ids )
		
			sys_allocate_array ( region_ids, 1, num_elems )

			db_get_region_for_elements ( num_elems, elem_ids, region_ids )


			$****************************************************************
			$ Finding out values of the property card related to the group
			$****************************************************************

			db_get_region_definition(region_ids(1),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
			
			$****************************************************************
			$ Finding out values of the property card related to the group
			$****************************************************************						

			db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )

		ELSE 

			element_check = 0

		END IF


		$***************************************************************************************************************
		$ Starting to write the random fields on spreadsheet (9=no of layers in spread_rp,7=no of rows in spread_rp)
		$***************************************************************************************************************
	
		FOR (g=1 TO 9 )

			FOR (i=1 TO 7 )

				ui_spread_get_cell (spread_rp,1, i, g, mod_text(i))

				ui_spread_get_cell (spread_rp,2, i, g, cov_val(i))

				$********************************************************
				$Checking properties for isotropic materials (layer = 1)
				$********************************************************

				IF (g == 1 && element_check == 1) THEN
					
					$**********************************************************
					$Getting the values for different type of random properties
					$**********************************************************
				
					$*****************************************
					$Getting the youngs modulus values as RV's
					$*****************************************

					IF (mod_text(i) == "Youngs Modulus") THEN				
						
						$************************************
						$Checking if material is isotropic
						$************************************
	
						IF (cat_id == 1) THEN
							
							$********************************************************************************
							$Determining the position of E value in the array mat_values (word_id = 2 for E)
							$********************************************************************************
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							pos_of_val = mth_array_search ( word_ids, 2, FALSE )
				
							no_of_rfs=no_of_rfs+1						    
							
							ui_spread_row_create (spread_rf, "RF" )
					
							ui_spread_set_cell (spread_rf,1, no_of_rfs, 1, str_from_integer(no_of_rfs) )

							ui_spread_set_cell (spread_rf,2, no_of_rfs, 1, group_names(m)//"_E")
					
							ui_spread_set_cell (spread_rf,3, no_of_rfs, 1, dist_type)

							ui_spread_set_cell (spread_rf,4, no_of_rfs, 1, str_from_real(mat_values(pos_of_val)))
					
							ui_spread_set_cell (spread_rf,5, no_of_rfs, 1, cov_val(i))
					
							ui_spread_set_cell (spread_rf,6, no_of_rfs, 1, geo)
					
							ui_spread_set_cell (spread_rf,7, no_of_rfs, 1, corr_func)
					
							ui_spread_set_cell (spread_rf,8, no_of_rfs, 1, corr_length)

							ui_spread_set_cell (spread_rf,9, no_of_rfs, 1, no_of_kl_terms)
							
						END IF	
					
					END IF

					$**************************************
					$ Getting the poissons ratios as RV's
					$**************************************

					IF (mod_text(i) == "Poisson Ratio") THEN

						$************************************
						$Checking if material is isotropic
						$************************************
	
						IF (cat_id == 1) THEN

							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$*********************************************************************************
							$Determining the position of nu value in the array mat_values (word_id = 5 for nu) 
							$*********************************************************************************

							pos_of_val = mth_array_search ( word_ids, 5, FALSE )
				
							no_of_rfs=no_of_rfs+1						    

							ui_spread_row_create (spread_rf, "RF" )
					
							ui_spread_set_cell (spread_rf,1, no_of_rfs, 1, str_from_integer(no_of_rfs) )

							ui_spread_set_cell (spread_rf,2, no_of_rfs, 1, group_names(m)//"_nu")
					
							ui_spread_set_cell (spread_rf,3, no_of_rfs, 1, dist_type)

							ui_spread_set_cell (spread_rf,4, no_of_rfs, 1, str_from_real(mat_values(pos_of_val)))
					
							ui_spread_set_cell (spread_rf,5, no_of_rfs, 1, cov_val(i))
					
							ui_spread_set_cell (spread_rf,6, no_of_rfs, 1, geo)
					
							ui_spread_set_cell (spread_rf,7, no_of_rfs, 1, corr_func)
					
							ui_spread_set_cell (spread_rf,8, no_of_rfs, 1, corr_length)

							ui_spread_set_cell (spread_rf,9, no_of_rfs, 1, no_of_kl_terms)


						END IF				
						
					END IF	

					$**************************************
					$ Getting the shear modulus as RV's
					$**************************************

					IF (mod_text(i) == "Shear Modulus") THEN

						$************************************
						$Checking if material is isotropic
						$************************************
	
						IF (cat_id == 1) THEN

							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$*********************************************************************************
							$Determining the position of G value in the array mat_values (word_id = 8 for G) 
							$*********************************************************************************

							pos_of_val = mth_array_search ( word_ids, 8, FALSE )

							$*********************************************
							$Checking if shear modulus is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN
				
								no_of_rfs=no_of_rfs+1						    
	
								ui_spread_row_create (spread_rf, "RF" )
						
								ui_spread_set_cell (spread_rf,1, no_of_rfs, 1, str_from_integer(no_of_rfs) )
	
								ui_spread_set_cell (spread_rf,2, no_of_rfs, 1, group_names(m)//"_G")
						
								ui_spread_set_cell (spread_rf,3, no_of_rfs, 1, dist_type)
	
								ui_spread_set_cell (spread_rf,4, no_of_rfs, 1, str_from_real(mat_values(pos_of_val)))
						
								ui_spread_set_cell (spread_rf,5, no_of_rfs, 1, cov_val(i))
						
								ui_spread_set_cell (spread_rf,6, no_of_rfs, 1, geo)
						
								ui_spread_set_cell (spread_rf,7, no_of_rfs, 1, corr_func)
						
								ui_spread_set_cell (spread_rf,8, no_of_rfs, 1, corr_length)

								ui_spread_set_cell (spread_rf,9, no_of_rfs, 1, no_of_kl_terms)


							END IF

						END IF				
						
					END IF			

					$**************************************
					$ Getting the Mass Density as RV's
					$**************************************

					IF (mod_text(i) == "Mass Density") THEN

						$************************************
						$Checking if material is isotropic
						$************************************
	
						IF (cat_id == 1) THEN

							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)

							$*************************************************************************************
							$Determining the position of rho value in the array mat_values (word_id = 16 for rho) 
							$**************************************************************************************

							pos_of_val = mth_array_search ( word_ids, 16, FALSE )

							$*********************************************
							$Checking if mass density is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN
				
								no_of_rfs=no_of_rfs+1						    
	
								ui_spread_row_create (spread_rf, "RF" )
						
								ui_spread_set_cell (spread_rf,1, no_of_rfs, 1, str_from_integer(no_of_rfs) )
	
								ui_spread_set_cell (spread_rf,2, no_of_rfs, 1, group_names(m)//"_rho")
						
								ui_spread_set_cell (spread_rf,3, no_of_rfs, 1, dist_type)
	
								ui_spread_set_cell (spread_rf,4, no_of_rfs, 1, str_from_real(mat_values(pos_of_val)))
						
								ui_spread_set_cell (spread_rf,5, no_of_rfs, 1, cov_val(i))
						
								ui_spread_set_cell (spread_rf,6, no_of_rfs, 1, geo)
						
								ui_spread_set_cell (spread_rf,7, no_of_rfs, 1, corr_func)
						
								ui_spread_set_cell (spread_rf,8, no_of_rfs, 1, corr_length)

								ui_spread_set_cell (spread_rf,9, no_of_rfs, 1, no_of_kl_terms)

							END IF

						END IF				
						
					END IF		

				END IF

				$********************************************************
				$Checking properties for orthotropic materials (layer = 2)
				$********************************************************
	
				IF (g == 2 && element_check == 1) THEN
		
					$**********************************************************
					$Getting the values for different type of random properties
					$**********************************************************
					
					IF (mod_text(i) == "Youngs Modulus1") THEN
						
						$************************************
						$Checking if material is orthotropic
						$************************************
		
						IF (cat_id == 5) THEN
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)
					
							$********************************************************************************
							$Determining the position of E value in the array mat_values (word_id = 2 for E)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 2, FALSE )

							no_of_rfs=no_of_rfs+1						    

							ui_spread_row_create (spread_rf, "RF" )
					
							ui_spread_set_cell (spread_rf,1, no_of_rfs, 1, str_from_integer(no_of_rfs) )

							ui_spread_set_cell (spread_rf,2, no_of_rfs, 1, group_names(m)//"_E1")
					
							ui_spread_set_cell (spread_rf,3, no_of_rfs, 1, dist_type)

							ui_spread_set_cell (spread_rf,4, no_of_rfs, 1, str_from_real(mat_values(pos_of_val)))
					
							ui_spread_set_cell (spread_rf,5, no_of_rfs, 1, cov_val(i))
					
							ui_spread_set_cell (spread_rf,6, no_of_rfs, 1, geo)
					
							ui_spread_set_cell (spread_rf,7, no_of_rfs, 1, corr_func)
					
							ui_spread_set_cell (spread_rf,8, no_of_rfs, 1, corr_length)	

							ui_spread_set_cell (spread_rf,9, no_of_rfs, 1, no_of_kl_terms)

						END IF	
					END IF	

					IF (mod_text(i) == "Youngs Modulus2") THEN
						
						$************************************
						$Checking if material is orthotropic
						$************************************
		
						IF (cat_id == 5) THEN
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)
					
							$********************************************************************************
							$Determining the position of E value in the array mat_values (word_id = 3 for E)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 3, FALSE )

							no_of_rfs=no_of_rfs+1						    

							ui_spread_row_create (spread_rf, "RF" )
					
							ui_spread_set_cell (spread_rf,1, no_of_rfs, 1, str_from_integer(no_of_rfs) )

							ui_spread_set_cell (spread_rf,2, no_of_rfs, 1, group_names(m)//"_E2")
					
							ui_spread_set_cell (spread_rf,3, no_of_rfs, 1, dist_type)

							ui_spread_set_cell (spread_rf,4, no_of_rfs, 1, str_from_real(mat_values(pos_of_val)))
					
							ui_spread_set_cell (spread_rf,5, no_of_rfs, 1, cov_val(i))
					
							ui_spread_set_cell (spread_rf,6, no_of_rfs, 1, geo)
					
							ui_spread_set_cell (spread_rf,7, no_of_rfs, 1, corr_func)
					
							ui_spread_set_cell (spread_rf,8, no_of_rfs, 1, corr_length)	

							ui_spread_set_cell (spread_rf,9, no_of_rfs, 1, no_of_kl_terms)
							
						END IF	
					END IF	

					IF (mod_text(i) == "Poisson Ratio") THEN
						
						$************************************
						$Checking if material is orthotropic
						$************************************
		
						IF (cat_id == 5) THEN
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)
					
							$********************************************************************************
							$Determining the position of nu12 value in the array mat_values (word_id = 5 for nu12)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 5, FALSE )

							no_of_rfs=no_of_rfs+1						    

							ui_spread_row_create (spread_rf, "RF" )
					
							ui_spread_set_cell (spread_rf,1, no_of_rfs, 1, str_from_integer(no_of_rfs) )

							ui_spread_set_cell (spread_rf,2, no_of_rfs, 1, group_names(m)//"_nu12")
					
							ui_spread_set_cell (spread_rf,3, no_of_rfs, 1, dist_type)

							ui_spread_set_cell (spread_rf,4, no_of_rfs, 1, str_from_real(mat_values(pos_of_val)))
					
							ui_spread_set_cell (spread_rf,5, no_of_rfs, 1, cov_val(i))
					
							ui_spread_set_cell (spread_rf,6, no_of_rfs, 1, geo)
					
							ui_spread_set_cell (spread_rf,7, no_of_rfs, 1, corr_func)
					
							ui_spread_set_cell (spread_rf,8, no_of_rfs, 1, corr_length)	

							ui_spread_set_cell (spread_rf,9, no_of_rfs, 1, no_of_kl_terms)
	
						END IF	
					END IF	

					IF (mod_text(i) == "Shear Modulus12") THEN
						
						$************************************
						$Checking if material is orthotropic
						$************************************
		
						IF (cat_id == 5) THEN
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)
					
							$********************************************************************************
							$Determining the position of G12 value in the array mat_values (word_id = 8 for G12)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 8, FALSE )

							no_of_rfs=no_of_rfs+1						    

							ui_spread_row_create (spread_rf, "RF" )
					
							ui_spread_set_cell (spread_rf,1, no_of_rfs, 1, str_from_integer(no_of_rfs) )

							ui_spread_set_cell (spread_rf,2, no_of_rfs, 1, group_names(m)//"_G12")
					
							ui_spread_set_cell (spread_rf,3, no_of_rfs, 1, dist_type)

							ui_spread_set_cell (spread_rf,4, no_of_rfs, 1, str_from_real(mat_values(pos_of_val)))
					
							ui_spread_set_cell (spread_rf,5, no_of_rfs, 1, cov_val(i))
					
							ui_spread_set_cell (spread_rf,6, no_of_rfs, 1, geo)
					
							ui_spread_set_cell (spread_rf,7, no_of_rfs, 1, corr_func)
					
							ui_spread_set_cell (spread_rf,8, no_of_rfs, 1, corr_length)	

							ui_spread_set_cell (spread_rf,9, no_of_rfs, 1, no_of_kl_terms)
							
						END IF	
					END IF	

					IF (mod_text(i) == "Shear Modulus23") THEN
						
						$************************************
						$Checking if material is orthotropic
						$************************************
		
						IF (cat_id == 5) THEN
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)
					
							$********************************************************************************
							$Determining the position of G12 value in the array mat_values (word_id = 9 for G23)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 9, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rfs=no_of_rfs+1						    
	
								ui_spread_row_create (spread_rf, "RF" )
						
								ui_spread_set_cell (spread_rf,1, no_of_rfs, 1, str_from_integer(no_of_rfs) )
	
								ui_spread_set_cell (spread_rf,2, no_of_rfs, 1, group_names(m)//"_G23")
						
								ui_spread_set_cell (spread_rf,3, no_of_rfs, 1, dist_type)
	
								ui_spread_set_cell (spread_rf,4, no_of_rfs, 1, str_from_real(mat_values(pos_of_val)))
						
								ui_spread_set_cell (spread_rf,5, no_of_rfs, 1, cov_val(i))
						
								ui_spread_set_cell (spread_rf,6, no_of_rfs, 1, geo)
						
								ui_spread_set_cell (spread_rf,7, no_of_rfs, 1, corr_func)
						
								ui_spread_set_cell (spread_rf,8, no_of_rfs, 1, corr_length)	

								ui_spread_set_cell (spread_rf,9, no_of_rfs, 1, no_of_kl_terms)
							
							END IF
						END IF	
					END IF	

					IF (mod_text(i) == "Shear Modulus13") THEN
						
						$************************************
						$Checking if material is orthotropic
						$************************************
		
						IF (cat_id == 5) THEN
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)
					
							$********************************************************************************
							$Determining the position of G12 value in the array mat_values (word_id = 10 for G13)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 10, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rfs=no_of_rfs+1						    
	
								ui_spread_row_create (spread_rf, "RF" )
						
								ui_spread_set_cell (spread_rf,1, no_of_rfs, 1, str_from_integer(no_of_rfs) )
	
								ui_spread_set_cell (spread_rf,2, no_of_rfs, 1, group_names(m)//"_G13")
						
								ui_spread_set_cell (spread_rf,3, no_of_rfs, 1, dist_type)
	
								ui_spread_set_cell (spread_rf,4, no_of_rfs, 1, str_from_real(mat_values(pos_of_val)))
						
								ui_spread_set_cell (spread_rf,5, no_of_rfs, 1, cov_val(i))
						
								ui_spread_set_cell (spread_rf,6, no_of_rfs, 1, geo)
						
								ui_spread_set_cell (spread_rf,7, no_of_rfs, 1, corr_func)
						
								ui_spread_set_cell (spread_rf,8, no_of_rfs, 1, corr_length)	

								ui_spread_set_cell (spread_rf,9, no_of_rfs, 1, no_of_kl_terms)
							
							END IF
						END IF	
					END IF	

					IF (mod_text(i) == "Mass Density") THEN
						
						$************************************
						$Checking if material is orthotropic
						$************************************
		
						IF (cat_id == 5) THEN
							
							db_get_matl_prop_value(m_id, word_ids, field_ids, mat_values)
					
							$********************************************************************************
							$Determining the position of rho value in the array mat_values (word_id = 16 for rho)
							$********************************************************************************
							
							pos_of_val = mth_array_search ( word_ids, 16, FALSE )

							$*********************************************
							$Checking if value is assigned or not
							$*********************************************

							IF (pos_of_val != 0) THEN

								no_of_rfs=no_of_rfs+1						    
	
								ui_spread_row_create (spread_rf, "RF" )
						
								ui_spread_set_cell (spread_rf,1, no_of_rfs, 1, str_from_integer(no_of_rfs) )
	
								ui_spread_set_cell (spread_rf,2, no_of_rfs, 1, group_names(m)//"_rho")
						
								ui_spread_set_cell (spread_rf,3, no_of_rfs, 1, dist_type)
	
								ui_spread_set_cell (spread_rf,4, no_of_rfs, 1, str_from_real(mat_values(pos_of_val)))
						
								ui_spread_set_cell (spread_rf,5, no_of_rfs, 1, cov_val(i))
						
								ui_spread_set_cell (spread_rf,6, no_of_rfs, 1, geo)
						
								ui_spread_set_cell (spread_rf,7, no_of_rfs, 1, corr_func)
						
								ui_spread_set_cell (spread_rf,8, no_of_rfs, 1, corr_length)

								ui_spread_set_cell (spread_rf,9, no_of_rfs, 1, no_of_kl_terms)
							
							END IF
						END IF	
					END IF	

				END IF

				$*******************************************************************
				$Checking geometric random properties for shell elements (layer = 4)
				$********************************************************************
	
				IF (g == 4 && element_check == 1) THEN
		
					$**********************************************************
					$Getting the thickness values for shell elements as RV's
					$**********************************************************
					
					IF (mod_text(i) == "Thickness") THEN
						
						$*****************************************************
						$Getting the element type related with property region
						$*****************************************************

						db_get_region_definition(region_ids(1),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)

						$**********************************************************************
						$Checking if any shell elements are defined (el_type = 51 for shell)
						$**********************************************************************

						IF (el_ty == 51) THEN
		
							db_get_prop_value(region_ids(1),36,id_of_mat,data_type,int_val,real_val,char_val,@
							coord_id,node_id,field_id)
							
							$******************************************************************************
							$Checking if any nonstructural thickness value is defined for the shell element
							$******************************************************************************

							IF (real_val(1) != 0) THEN

								no_of_rfs=no_of_rfs+1						    
	
								ui_spread_row_create (spread_rf, "RF" )
						
								ui_spread_set_cell (spread_rf,1, no_of_rfs, 1, str_from_integer(no_of_rfs) )
	
								ui_spread_set_cell (spread_rf,2, no_of_rfs, 1, group_names(m)//"_t")
						
								ui_spread_set_cell (spread_rf,3, no_of_rfs, 1, dist_type)
	
								ui_spread_set_cell (spread_rf,4, no_of_rfs, 1, str_from_real(real_val(1)))
						
								ui_spread_set_cell (spread_rf,5, no_of_rfs, 1, cov_val(i))
						
								ui_spread_set_cell (spread_rf,6, no_of_rfs, 1, geo)
						
								ui_spread_set_cell (spread_rf,7, no_of_rfs, 1, corr_func)
						
								ui_spread_set_cell (spread_rf,8, no_of_rfs, 1, corr_length)	

								ui_spread_set_cell (spread_rf,9, no_of_rfs, 1, no_of_kl_terms)

							END IF

						END IF
					END IF	
				END IF
			END FOR
		END FOR

	END FOR
END IF

END FUNCTION

$************************************************************************************
$  Getting the value of the selected box in spreadsheet  (Both RV and RF table)
$************************************************************************************

FUNCTION mod_inp()

GLOBAL INTEGER from_col, from_row, to_col, to_row, layer
GLOBAL STRING prob_type[5]
STRING mod_text[50]

IF (prob_type == "2") THEN

	ui_spread_get_selected (spread_rv, from_col, from_row, to_col, to_row, layer )
	
	IF (from_col >= 3) THEN
	
		ui_spread_get_cell (spread_rv,from_col, from_row, 1, mod_text)
		
		ui_wid_set( dbx6_id, "VALUE", mod_text)
	
	END IF

END IF

IF (prob_type == "1") THEN

	ui_spread_get_selected (spread_rf, from_col, from_row, to_col, to_row, layer )
	
	IF (from_col >= 3) THEN
	
		ui_spread_get_cell (spread_rf,from_col, from_row, 1, mod_text)
		
		ui_wid_set( dbx6_id, "VALUE", mod_text)
	
	END IF

END IF

END FUNCTION


$************************************************************************************
$ Updating the value of the selected box (Both RV and RF table)
$************************************************************************************

FUNCTION up_inp()

GLOBAL INTEGER from_col, from_row
GLOBAL STRING prob_type[5]
STRING up_text[20]

IF (prob_type == "2") THEN

	ui_wid_get( dbx6_id, "VALUE", up_text)
	
	ui_spread_set_cell (spread_rv,from_col, from_row, 1, up_text)

END IF

IF (prob_type == "1") THEN

	ui_wid_get( dbx6_id, "VALUE", up_text)
	
	ui_spread_set_cell (spread_rf,from_col, from_row, 1, up_text)

END IF

END FUNCTION


$************************************************************************************
$  Getting the value of the selected box in spreadsheet (For RANDOM PROPERTIES)
$************************************************************************************

FUNCTION mod_inp2()

GLOBAL INTEGER from_col, from_row, to_col, to_row, layer_rp
STRING mod_text[50]

ui_spread_get_selected (spread_rp, from_col, from_row, to_col, to_row, layer_rp )

ui_spread_get_cell (spread_rp,from_col, from_row, layer_rp, mod_text)

ui_wid_set( dbx7_id, "VALUE", mod_text)

END FUNCTION


$************************************************************************************
$ Updating the value of the selected box (For RANDOM PROPERTIES)
$************************************************************************************

FUNCTION up_inp2()

GLOBAL INTEGER from_col, from_row, layer_rp
STRING up_text[20]

ui_wid_get( dbx7_id, "VALUE", up_text)

ui_spread_set_cell (spread_rp,from_col, from_row, layer_rp, up_text)

END FUNCTION



$************************************************************************************
$  Deleting selected row from spreadsheet (Both RV and RF table)
$************************************************************************************

FUNCTION del_input()

GLOBAL STRING prob_type[5]
GLOBAL INTEGER from_col, from_row, to_col, to_row, layer,no_of_rvs,no_of_rfs
INTEGER s

IF (prob_type == "2") THEN

	ui_spread_get_selected (spread_rv, from_col, from_row, to_col, to_row, layer )
	
	ui_spread_row_delete (spread_rv, from_row )
	
	no_of_rvs=no_of_rvs-1
	
	FOR (s=1 TO no_of_rvs)
	
		ui_spread_set_cell (spread_rv,1, s, 1, str_from_integer(s) )
	
	END FOR

END IF


IF (prob_type == "1") THEN

	ui_spread_get_selected (spread_rf, from_col, from_row, to_col, to_row, layer )
	
	ui_spread_row_delete (spread_rf, from_row )
	
	no_of_rfs=no_of_rfs-1
	
	FOR (s=1 TO no_of_rfs)
	
		ui_spread_set_cell (spread_rf,1, s, 1, str_from_integer(s) )
	
	END FOR

END IF

END FUNCTION


$************************************************************************************
$ Deleting selected row from spreadsheet (RANDOM PROPERTIES)
$************************************************************************************

FUNCTION del_input2()

GLOBAL INTEGER from_col, from_row, to_col, to_row, layer_rp

ui_spread_get_selected (spread_rp, from_col, from_row, to_col, to_row, layer_rp )

ui_spread_cell_delete (spread_rp, 1 , from_row,  layer_rp )

ui_spread_cell_delete (spread_rp, 2 , from_row,  layer_rp )

END FUNCTION



$********************************************
$  Writing input files for MATLAB routines
$********************************************

FUNCTION prep_input()

$********************************************
$ Define GLOBAL variables
$********************************************

$********************************************
$ Define GLOBAL variables
$********************************************

GLOBAL INTEGER num_elems,  elem_ids(VIRTUAL), num_el(1000),no_of_rvs,no_of_rfs,num_rows_spread_rv
GLOBAL STRING no_of_sim[40],prob_type[5],rv_names[20](100),rf_names[20](30)

$*****************************
$ Define LOCAL variables
$*****************************

REAL    glob_xyz(VIRTUAL),real_array(3),real_array2(3)
STRING  cell_text[20](10),group_name[100],group_names[100](100),group_names_string[1000],dummy_string_gr_names[50]
INTEGER node_ids(VIRTUAL), ref_coords(VIRTUAL), analy_coords(VIRTUAL),i,group_id,num_nodes,elem_nodes(VIRTUAL),ll
INTEGER position_char,channel, channel2,channel3,int_array(10),l,no_of_groups,group_columns(30),topo_codes(VIRTUAL),shape_codes(VIRTUAL),nodes_per_elem(VIRTUAL)

ui_wid_get( dbx3_id, "VALUE", no_of_sim )

$******************************************************
$Checking if the no of simulations are entered by user
$******************************************************

IF ( no_of_sim != "" ) THEN
	
	text_open("PatranPlugin.txt", "NOW", 0, 0, channel)
	
	$***************************************
	$If random field type problem is chosen
	$***************************************
	
	IF (prob_type == "1") THEN
	
		ui_spread_get_num_vis_rows (spread_rf, num_rows_spread_rv )

		text_write_string(channel, "%% Input file to generate the samples for PATRAN PLUGIN (RandomField case)")
		text_write_string(channel, " ")
		
		text_write_string(channel, "No_of_RFs = "//str_from_integer(no_of_rfs)//" ") 
		text_write_string(channel, "Nsims     = "//no_of_sim//" ")
		text_write_string(channel, " ")
		text_write_string(channel, "% Name       % Distribution  %Mean     %CoV %Geometry %Corr.Function %Corr.Length %No of KL terms ")
		text_write_string(channel, " ")
		
		$****************************************************************
		$Writing data about each RF to input file
		$****************************************************************

		no_of_groups = 0

		FOR (l=1 TO no_of_rfs)

			ll = l + 1
		
			ui_spread_get_cell (spread_rf,1, l, 1, cell_text(1))
			
			ui_spread_get_cell (spread_rf,2, l, 1, cell_text(2))

			rf_names(l)=cell_text(2)
			
			ui_spread_get_cell (spread_rf,3, l, 1, cell_text(3))
			
			ui_spread_get_cell (spread_rf,4, l, 1, cell_text(4))
			
			ui_spread_get_cell (spread_rf,5, l, 1, cell_text(5))
							
			ui_spread_get_cell (spread_rf,6, l, 1, cell_text(6))
			
			ui_spread_get_cell (spread_rf,7, l, 1, cell_text(7))
			
			ui_spread_get_cell (spread_rf,8, l, 1, cell_text(8))	

			ui_spread_get_cell (spread_rf,9, l, 1, cell_text(9))	

			$****************************************************************
			$Getting necessary info for the selected group from the database 
			$****************************************************************

			$**************************
			$ Determining group name
			$**************************

			position_char = str_index (cell_text(2), "_" )

			group_name = str_substr ( cell_text(2),1, position_char-1 )

			group_names(1) = "Dummy Name"

			group_names(ll) = group_name

			IF (group_names(ll) != group_names(ll-1) ) THEN
			
				dummy_string_gr_names = group_names(ll)

				no_of_groups = no_of_groups + 1

				group_columns(no_of_groups) = l

				IF (l == no_of_rfs) THEN

					group_names_string = group_names_string//dummy_string_gr_names
					
				ELSE

					group_names_string = group_names_string//dummy_string_gr_names//" "

				END IF

			END IF
			
			db_get_group_id (group_name,group_id)

			db_count_nodes_in_group ( group_id, num_nodes )
			
			db_count_elems_in_group ( group_id, num_elems )
			
			num_el(group_id) = num_elems
			
			$**************************
			$ Defining sizes of arrays 
			$**************************
			
			sys_allocate_array ( node_ids, 1, num_nodes )
			sys_allocate_array ( ref_coords, 1, num_nodes )
			sys_allocate_array ( analy_coords, 1, num_nodes )
			sys_allocate_array ( glob_xyz, 1, num_nodes, 1, 3 )
			sys_allocate_array ( elem_ids, 1, num_elems )
			sys_allocate_array ( topo_codes, 1, num_elems )
			sys_allocate_array ( shape_codes, 1, num_elems )
			sys_allocate_array ( nodes_per_elem, 1, num_elems )

			db_get_node_ids ( num_nodes, node_ids )
			
			db_get_all_node_ids_in_group ( num_nodes, group_id, node_ids )
			
			db_get_elem_ids_in_group ( num_elems, group_id, elem_ids )
			
			db_get_nodes ( num_nodes, node_ids, ref_coords, analy_coords, glob_xyz )

			$***************************************
			$ Identify Element Shapes in the group
			$***************************************
			
			db_get_elem_etop ( num_elems, elem_ids, topo_codes )

			sys_allocate_array ( elem_nodes, 1, num_elems, 1, (topo_codes(1)+1))

			db_get_nodes_for_elems ( num_elems,(topo_codes(1)+1) , elem_ids, elem_nodes )
			
			$**************************************************************************************
			$ Identify no of nodes per element (Required to write the connectivities to text file)
			$**************************************************************************************

			db_get_elem_topology_data ( num_elems, topo_codes, shape_codes,nodes_per_elem)

			$*************************************************
			$ Writing node coordinates for the selected group
			$*************************************************
			
			text_open("node_coord_"//group_name//".dat", "NOW", 0, 0, channel2)
			
			FOR ( i = 1 TO num_nodes )
		
				real_array(1) = glob_xyz(i,1)
				real_array(2) = glob_xyz(i,2)
				real_array(3) = glob_xyz(i,3)
				text_write ( channel2, "%I% %G% %G% %G%", node_ids(i),real_array , "  " )
		
			END FOR
			
			text_close( channel2, " ")
			
			$*************************************************************************************
			$ Writing element connectivites for the selected group according to the element shape
			$*************************************************************************************
			
			text_open("connectivities_"//group_name//".dat", "NOW", 0, 0, channel3)
			
			FOR ( i = 1 TO num_elems )


				$**********************************************
				$ topo code = 8 => HEXA (5 nodes)
				$*********************************************

				IF ( shape_codes(1) == 8) THEN
		
					int_array(1)=elem_ids(i)
					int_array(2)=elem_nodes(i,1)
					int_array(3)=elem_nodes(i,2)
					int_array(4)=elem_nodes(i,3)
					int_array(5)=elem_nodes(i,4)
					int_array(6)=elem_nodes(i,5)
					int_array(7)=elem_nodes(i,6)
					int_array(8)=elem_nodes(i,7)
					int_array(9)=elem_nodes(i,8)
					text_write ( channel3, "%I% %I% %I% %I% %I% %I% %I% %I% %I%", int_array , real_array2, "  " )

				$**********************************************
				$ topo code = 7 => PENTA (7 nodes)
				$*********************************************

				ELSE IF ( shape_codes(1) == 7) THEN
		
					int_array(1)=elem_ids(i)
					int_array(2)=elem_nodes(i,1)
					int_array(3)=elem_nodes(i,2)
					int_array(4)=elem_nodes(i,3)
					int_array(5)=elem_nodes(i,4)
					int_array(6)=elem_nodes(i,5)
					int_array(7)=elem_nodes(i,6)
					int_array(8)=elem_nodes(i,7)
					text_write ( channel3, "%I% %I% %I% %I% %I% %I% %I% %I%", int_array , real_array2, "  " )

				$**********************************************
				$ topo code = 5 => TETRA (5 nodes)
				$*********************************************

				ELSE IF ( shape_codes(1) == 5) THEN
		
					int_array(1)=elem_ids(i)
					int_array(2)=elem_nodes(i,1)
					int_array(3)=elem_nodes(i,2)
					int_array(4)=elem_nodes(i,3)
					int_array(5)=elem_nodes(i,4)
					int_array(6)=elem_nodes(i,5)
					text_write ( channel3, "%I% %I% %I% %I% %I% %I%", int_array , real_array2, "  " )

				$**********************************************
				$ topo code = 4 => QUAD (4 nodes)
				$*********************************************

				ELSE IF ( shape_codes(1) == 4) THEN
		
					int_array(1)=elem_ids(i)
					int_array(2)=elem_nodes(i,1)
					int_array(3)=elem_nodes(i,2)
					int_array(4)=elem_nodes(i,3)
					int_array(5)=elem_nodes(i,4)
					text_write ( channel3, "%I% %I% %I% %I% %I% ", int_array , real_array2, "  " )

				$**********************************************
				$ topo code = 3 => TRI (3 nodes)
				$**********************************************

				ELSE IF ( shape_codes(1) == 3) THEN
		
					int_array(1)=elem_ids(i)
					int_array(2)=elem_nodes(i,1)
					int_array(3)=elem_nodes(i,2)
					int_array(4)=elem_nodes(i,3)
					text_write ( channel3, "%I% %I% %I% %I% ", int_array , real_array2, "  " )

				$**********************************************
				$ topo code = 2 => BAR/BEAM (2 nodes)
				$**********************************************

				ELSE IF ( shape_codes(1) == 2) THEN
		
					int_array(1)=elem_ids(i)
					int_array(2)=elem_nodes(i,1)
					int_array(3)=elem_nodes(i,2)
					text_write ( channel3, "%I% %I% %I% ", int_array , real_array2, "  " )

				END IF
		
			END FOR

			text_close( channel3, " ")
		
			$****************************************************************
			$Writing data about each GROUP to input file
			$****************************************************************

			text_write_string(channel," "//cell_text(2)//" "//cell_text(3)//" "//cell_text(4)//" "//cell_text(5)//" "//cell_text(6)//" "//cell_text(7)//" "//cell_text(8)//" "//cell_text(9)//" ")
			
		END FOR
		
		text_write_string(channel, " ")
		text_write_string(channel, "% Group Names ")
		text_write_string(channel, " ")
		text_write_string(channel," "//group_names_string//" ")
		
	END IF
	
	$******************************************
	$If random variable type problem is chosen
	$******************************************
	
	IF (prob_type == "2") THEN
	
		ui_spread_get_num_vis_rows (spread_rv, num_rows_spread_rv )

		$****************************************************
		$Printing the first part of COSSAN-X input file
		$****************************************************
	
		text_write_string(channel, "%% No of simulations = "//no_of_sim//" ")
                text_write_string(channel, " ")
                text_write_string(channel, "%% Description of the Probabilistic Model ")
                text_write_string(channel, " ")
                text_write_string(channel, "% Name      % Distribution     % Mean      % CoV ")
                text_write_string(channel, " ")

		FOR (l=1 TO no_of_rvs)

			$********************************************************
			$Getting the necessary data about RVs from spread_rv and
			$Printing the RVs in spread_rv with specified properties
			$********************************************************
			
			ui_spread_get_cell (spread_rv,2, l, 1, cell_text(2))
			
			rv_names(l)=cell_text(2)
	
			ui_spread_get_cell (spread_rv,3, l, 1, cell_text(3))
	
			ui_spread_get_cell (spread_rv,4, l, 1, cell_text(4))
			
			ui_spread_get_cell (spread_rv,5, l, 1, cell_text(5))

			text_write_string(channel," "//cell_text(2)//"  "//cell_text(3)//"  "//cell_text(4)//"  "//cell_text(5)// " ")

		END FOR
		
	END IF


	text_close( channel, " " )
	
	dump "Input file for COSSAN-X prepared"

ELSE

	user_message( "ERROR", 1, "COSSAN-PCL", "Please enter a valid number for the no of simulations" )

	RETURN

END IF

END FUNCTION



$***********************************************
$Calling Matlab to generate the input samples
$***********************************************

FUNCTION rand_gen()

GLOBAL STRING nastran_path[300],matlab_path[200],cossan_path[200],prob_type[5]

INTEGER channel
LOGICAL check_nastran_exe

dump "COSSAN_X running to generate samples"

ui_wid_get( dbx10_id,"VALUE", nastran_path )
ui_wid_get( dbx11_id,"VALUE", matlab_path )
ui_wid_get( dbx13_id,"VALUE", cossan_path )

$***********************************************
$ Check the MATLAB & NASTRAN paths
$***********************************************

check_nastran_exe = file_executable ( nastran_path )

IF (check_nastran_exe == FALSE) THEN

	user_message( "ERROR", 1, "COSSAN-PCL", "Please check the NASTRAN path" )

	RETURN
	
END IF

IF (prob_type == "1") THEN

  utl_process_spawn(" " //cossan_path// "Plugins/PATRAN/src/run_dmcs_rf.sh " //matlab_path// " ",true)
  
ELSE IF (prob_type == "2") THEN

  utl_process_spawn(" " //cossan_path// "Plugins/PATRAN/src/run_dmcs_rv.sh " //matlab_path// " ",true)

END IF

END FUNCTION


END CLASS

