$*****************************
$ Written by Murat Panayirci 
$*****************************
$**********************************
$ Last modified on 1-Oct-2008
$**********************************

CLASS DMCS_GUI

$************************************************
$ Performing Monte Carlo Simulation for RV Case
$************************************************

FUNCTION mcs_rv()

$***************************
$ Defining GLOBAL variables 
$***************************

GLOBAL INTEGER lrecl,ints(3),i,channel7,channel5, k, l,m,v,r, no_of_rvs,prop_id, m_id ,prim_id, second_id
GLOBAL INTEGER regions_with_elements,region_ids_with_elements(10000)
GLOBAL STRING  record2[1000],chars[10](3), no_ran[10],char_val[10],no_of_sim [40],rv_names[20](100), db_name[256],anal_type[40],anal_type2[40],mode_no[20]
GLOBAL STRING  res_type3[40],res_type[40],res_type2[40], id_number[40],elem_id[30] ,nastran_path[300], response_check[40], node_id[40]
GLOBAL REAL    rv_samples(100)

$***************************
$ Defining LOCAL variables 
$***************************

INTEGER num_elems2,num_elems3,element_ids(20000),n, dat_ex,num_nodes3,check_results, node_id2
INTEGER sec_nrec, sec_bytes_per_rec,data_types(5),id_of_mat,sec_id, coord_id, field_id, field_ids(5)
INTEGER m_l, m_d, el_ty, d_s_f ,co_f, g_f, f_f, l_f ,lay_c, position_char, cat_id,lin_code,dir_code,mat_type
INTEGER index_of_min_val(12), index_of_max_val(12) ,no_of_results_per_element(VIRTUAL),ncomp, mode_number
INTEGER no_of_load_cases, load_case_ids(virtual), no_of_subcase_ids(virtual) ,no_of_node_identifiers,subcase_ids(VIRTUAL)
INTEGER no_of_subcases,result_location, result_ids(4),no_of_layers, layer_ids(VIRTUAL), data_type ,resultids(5),list_of_node_identifiers(VIRTUAL)
REAL    results(VIRTUAL),sec_values(4),real_val(40),nat_freq(6),freq_check(200),freq_diff
STRING  prop_name[40],line1[100000],line2[100000], mat_name [40],sub_rv_name[40],random_prop_name[4],mat_des [20]
STRING  node_list[40],derivation_method[20],coordinate_identifier[10],location[10], elem_list[12] , labels[100](virtual)
STRING  sec_name[31],sec_type_name[31],sec_val_str[10](VIRTUAL)
LOGICAL Check_input_file, Check_session_file

$****************************
$ Getting the database name
$****************************

db_name_get ( db_name )

$************************************************************************************
$ Confirming deleting or overwriting of material & property cards, result cases, etc.
$************************************************************************************

ui_override_message(28003091,"YES")							
ui_override_message(29002006,"YES")
ui_override_message(29002020 ,"YES")
ui_override_message(6016027 ,"YES")
ui_override_message(6022070 ,"YES")
ui_override_message(4012012,"YES")
ui_override_message(6022037,"YES")

$*****************************************************
$Checking if a valid response is assigned by the user
$*****************************************************

IF ( response_check == " " ) THEN

	user_message( "ERROR", 1, "COSSAN-PCL", "Please choose a valid response" )

	RETURN

END IF


$****************************************************
$ Perform some checks before starting the analysis
$****************************************************

Check_input_file   = file_exists_local ( "DMCS_RV_samples.dat")
Check_session_file = file_exists_local ( "cossan_analysis.ses.01")

IF (Check_input_file == FALSE ) THEN

	user_message( "ERROR", 1, "COSSAN-PCL", "The file which contains the samples does not exist in the current working directory" )

	RETURN

ELSE IF (Check_session_file == FALSE ) THEN

	user_message( "ERROR", 1, "COSSAN-PCL", "The session file which should prepare the NASTRAN input file does not exist in the current working directory" )

	RETURN

END IF

dump str_from_integer(no_of_rvs)//" RV's defined"
dump "STARTING SIMULATIONS"

no_ran=str_from_integer(no_of_rvs)

$************************************
$ Opening Files
$************************************
text_open("DMCS_RV_Responses.dat", "NOW", 0, 0, channel7)
text_open("DMCS_RV_samples.dat", "OR", 0, 0, channel5)

$***************************
$ loop for the simulations 
$***************************

FOR (i = 1 TO str_to_integer(no_of_sim))

	dump "Simulation no "//str_from_integer(i)//""

	$***************************
	$ Reading the random values 
	$***************************

	text_read_string( channel5 , record2, lrecl ) 
	string_read(record2,"%"//no_ran//"F%", ints, rv_samples, chars)

	$**********************************
	$ loop for the no of RV's defined 
	$**********************************

	FOR ( k = 1 TO no_of_rvs )

		dump "PCL assigns value for the "//str_from_integer(k)//"th RV"
		
		$********************************************
		$ Getting RV name until "_"
		$********************************************

		position_char = str_index ( rv_names(k) , "_" )

		sub_rv_name = str_substr ( rv_names(k),1, position_char-1 )

		$**********************************************************************
		$ Getting random property name by checking the 4 characters after "_"
		$**********************************************************************

		random_prop_name = str_substr ( rv_names(k),position_char+1 ,4 )

		$********************************************
		$ Assigning RV's related with material cards
		$********************************************

		FOR (m=1 TO regions_with_elements)

			db_get_region_definition(region_ids_with_elements(m),prop_name,el_ty,d_s_f,co_f,g_f,f_f,l_f,lay_c,m_id,m_l, m_d)
				
			db_get_material (m_id, mat_name, cat_id,lin_code,dir_code, mat_des, mat_type,dat_ex )
			
			IF (sub_rv_name == mat_name) THEN
				
				$**************************************************
				$ If youngs modulus is chosen as random property
				$**************************************************
				
				IF (random_prop_name == "E") THEN
					
					material.create( "Analysis code ID", 1, "Analysis type ID", 1,mat_name, 0, "",  @
					"Isotropic", 1, "Directionality", 1, "Linearity", 1, "Homogeneous", 0,  @
					"Linear Elastic", 1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, @
					0], "Active Flag", 1, "Modify", 31, "External Flag", FALSE, "Property IDs", [ @
					"Elastic Modulus", "Poisson Ratio"], [2, 5, 0], "Property Values", ["`rv_samples(k)`", @
					"0.3", ""] )
				
				$**************************************************
				$ If poissons ratio is chosen as random property
				$**************************************************
		
				ELSE IF (random_prop_name == "nu") THEN
		
					material.create( "Analysis code ID", 1, "Analysis type ID", 1, mat_name, 2,  @
					" ", "Isotropic", 1, "Directionality",  @
					1, "Linearity", 1, "Homogeneous", 0, "Linear Elastic", 1,  @
					"Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, 0], "Active Flag",  @
					1, "Modify", 31, "External Flag", FALSE, "Property IDs", ["Poisson Ratio", ""] @
					, [5, 0], "Property Values", ["`rv_samples(k)`", ""] )
		
		
				$**************************************************
				$ If shear modulus is chosen as random property
				$**************************************************
		
				ELSE IF (random_prop_name == "G") THEN
		
					material.create( "Analysis code ID", 1, "Analysis type ID", 1, mat_name, 3, " ", @
					"Isotropic", 1, "Directionality", 1, "Linearity", 1, "Homogeneous", 0, "Linear Elastic", @
					1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, 0], "Active Flag", 1, "Modify", @
					31, "External Flag", FALSE, "Property IDs", ["Shear Modulus", ""], @
					[8, 0], "Property Values", ["`rv_samples(k)`", ""] )
		
		
				$**************************************************
				$ If mass density is chosen as random property
				$**************************************************
			
				ELSE IF (random_prop_name == "rho") THEN
		
					material.create( "Analysis code ID", 1, "Analysis type ID", 1, mat_name, 1, " ", "Isotropic", @
					1, "Directionality", 1, "Linearity", 1, "Homogeneous", 0, "Linear Elastic", 1, "Model Options & IDs",@ 
					["", "", "", "", ""], [0, 0, 0, 0, 0], "Active Flag", 1, "Modify", 31, "External Flag",@
					FALSE, "Property IDs", ["Density", ""], [16, 0], "Property Values", ["`rv_samples(k)`", ""] )
		
				
				$**************************************************
				$ If Elastic Mod1 is chosen as random property
				$**************************************************
		
				ELSE IF (random_prop_name == "E1") THEN
		
					material.create( "Analysis code ID", 1, "Analysis type ID", 1, mat_name, 4, @
					"", "2d Orthotropic", 5,  "Directionality", 4, "Linearity", 1, "Homogeneous", 0, "Linear Elastic", 1,  @
					"Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, 0], "Active Flag",  @
					1,"Modify",31,"External Flag",FALSE,"Property IDs",["Elastic Modulus 11",""], @
					[2, 0],"Property Values",["`rv_samples(k)`", ""] )
		
		
				$**************************************************
				$ If Elastic Mod2 is chosen as random property
				$**************************************************
		
				ELSE IF (random_prop_name == "E2") THEN
					
					material.create( "Analysis code ID", 1, "Analysis type ID", 1, mat_name, 4, "",  @
					"2d Orthotropic", 5, "Directionality", 4, "Linearity", 1, "Homogeneous", 0,  @
					"Linear Elastic", 1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, @
					0], "Active Flag", 1, "Modify", 31, "External Flag", FALSE, "Property IDs", [ @
					"Elastic Modulus 22", ""], [3, 0], "Property Values", ["`rv_samples(k)`", ""] )
		
				$**************************************************
				$ If Poisson Ratio12 is chosen as random property
				$**************************************************
		
				ELSE IF (random_prop_name == "nu12") THEN
		
					material.create( "Analysis code ID", 1, "Analysis type ID", 1, mat_name, 4, "",  @
					"2d Orthotropic", 5, "Directionality", 4, "Linearity", 1, "Homogeneous", 0,  @
					"Linear Elastic", 1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, @
					0], "Active Flag", 1, "Modify", 31, "External Flag", FALSE, "Property IDs", [ @
					"Poisson Ratio 12", ""], [5, 0], "Property Values", ["`rv_samples(k)`", ""] )
		
				$**************************************************
				$ If Shear Modulus12 is chosen as random property
				$**************************************************
		
				ELSE IF (random_prop_name == "G12") THEN
	
					material.create( "Analysis code ID", 1, "Analysis type ID", 1, mat_name, 4, "",  @
					"2d Orthotropic", 5, "Directionality", 4, "Linearity", 1, "Homogeneous", 0,  @
					"Linear Elastic", 1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, @
					0], "Active Flag", 1, "Modify", 31, "External Flag", FALSE, "Property IDs", [ @
					"Shear Modulus 12", ""], [8, 0], "Property Values", ["`rv_samples(k)`", ""] )
		
				$**************************************************
				$ If Shear Modulus23 is chosen as random property
				$**************************************************
			
				ELSE IF (random_prop_name == "G23") THEN
	
					material.create( "Analysis code ID", 1, "Analysis type ID", 1, mat_name, 4, "",  @
					"2d Orthotropic", 5, "Directionality", 4, "Linearity", 1, "Homogeneous", 0,  @
					"Linear Elastic", 1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, @
					0], "Active Flag", 1, "Modify", 31, "External Flag", FALSE, "Property IDs", [ @
					"Shear Modulus 23", ""], [9, 0], "Property Values", ["`rv_samples(k)`", ""] )
		
	
				$**************************************************
				$ If Shear Modulus13 is chosen as random property
				$**************************************************
		
				ELSE IF (random_prop_name == "G13") THEN
	
					material.create( "Analysis code ID", 1, "Analysis type ID", 1, mat_name, 4, "",  @
					"2d Orthotropic", 5, "Directionality", 4, "Linearity", 1, "Homogeneous", 0,  @
					"Linear Elastic", 1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, @
					0], "Active Flag", 1, "Modify", 31, "External Flag", FALSE, "Property IDs", [ @
					"Shear Modulus 13", ""], [10, 0], "Property Values", ["`rv_samples(k)`", ""] )

				$**************************************************
				$ If Stiffness 11 is chosen as random property
				$**************************************************
		
				ELSE IF (random_prop_name == "G11") THEN

					material.create( "Analysis code ID", 1,"Analysis type ID",1,mat_name,4, " ", @
					"3d Anisotropic",3,"Directionality",3, "Linearity",1,"Homogeneous",0, @
					"Linear Elastic", 1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, 0],@ 
						"Active Flag", 1, "Modify",31, "External Flag", FALSE, "Property IDs", @
					["Stiffness 11", ""], [54, 0], "Property Values", ["`rv_samples(k)`", ""] )

				$**************************************************
				$ If Stiffness 22 is chosen as random property
				$**************************************************
		
				ELSE IF (random_prop_name == "G22") THEN

					material.create( "Analysis code ID", 1,"Analysis type ID",1,mat_name,4, " ", @
					"3d Anisotropic",3,"Directionality",3, "Linearity",1,"Homogeneous",0, @
					"Linear Elastic", 1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, 0],@ 
						"Active Flag", 1, "Modify",31, "External Flag", FALSE, "Property IDs", @
					["Stiffness 22", ""], [57, 0], "Property Values", ["`rv_samples(k)`", ""] )	

				$**************************************************
				$ If Stiffness 33 is chosen as random property
				$**************************************************
		
				ELSE IF (random_prop_name == "G33") THEN

					material.create( "Analysis code ID", 1,"Analysis type ID",1,mat_name,4, " ", @
					"3d Anisotropic",3,"Directionality",3, "Linearity",1,"Homogeneous",0, @
					"Linear Elastic", 1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, 0],@ 
						"Active Flag", 1, "Modify",31, "External Flag", FALSE, "Property IDs", @
					["Stiffness 33", ""], [59, 0], "Property Values", ["`rv_samples(k)`", ""] )	

				$**************************************************
				$ If Stiffness 44 is chosen as random property
				$**************************************************
		
				ELSE IF (random_prop_name == "G44") THEN

					material.create( "Analysis code ID", 1,"Analysis type ID",1,mat_name,4, " ", @
					"3d Anisotropic",3,"Directionality",3, "Linearity",1,"Homogeneous",0, @
					"Linear Elastic", 1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, 0],@ 
						"Active Flag", 1, "Modify",31, "External Flag", FALSE, "Property IDs", @
					["Stiffness 44", ""], [60, 0], "Property Values", ["`rv_samples(k)`", ""] )

				$**************************************************
				$ If Stiffness 55 is chosen as random property
				$**************************************************
		
				ELSE IF (random_prop_name == "G55") THEN

					material.create( "Analysis code ID", 1,"Analysis type ID",1,mat_name,4, " ", @
					"3d Anisotropic",3,"Directionality",3, "Linearity",1,"Homogeneous",0, @
					"Linear Elastic", 1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, 0],@ 
						"Active Flag", 1, "Modify",31, "External Flag", FALSE, "Property IDs", @
					["Stiffness 55", ""], [63, 0], "Property Values", ["`rv_samples(k)`", ""] )

				$**************************************************
				$ If Stiffness 66 is chosen as random property
				$**************************************************
		
				ELSE IF (random_prop_name == "G66") THEN

					material.create( "Analysis code ID", 1,"Analysis type ID",1,mat_name,4, " ", @
					"3d Anisotropic",3,"Directionality",3, "Linearity",1,"Homogeneous",0, @
					"Linear Elastic", 1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, 0],@ 
						"Active Flag", 1, "Modify",31, "External Flag", FALSE, "Property IDs", @
					["Stiffness 66", ""], [65, 0], "Property Values", ["`rv_samples(k)`", ""] )

				$************************************************************************
				$ If mass density of an orthotropic material is chosen as random property
				$*************************************************************************
		
				ELSE IF (random_prop_name == "orho") THEN
		
					material.create( "Analysis code ID", 1, "Analysis type ID", 1, mat_name, 4, "",  @
					"2d Orthotropic", 5, "Directionality", 4, "Linearity", 1, "Homogeneous", 0,  @
					"Linear Elastic", 1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, @
					0], "Active Flag", 1, "Modify", 31, "External Flag", FALSE, "Property IDs", [ @
					"Density", ""], [16, 0], "Property Values", ["`rv_samples(k)`", ""] )

				$************************************************************************
				$ If mass density of a 3D anisotropic material is chosen as random property
				$*************************************************************************
		
				ELSE IF (random_prop_name == "arho") THEN
		
					material.create( "Analysis code ID", 1,"Analysis type ID",1,mat_name,4, " ", @
					"3d Anisotropic",3,"Directionality",3, "Linearity",1,"Homogeneous",0, @
					"Linear Elastic", 1, "Model Options & IDs", ["", "", "", "", ""], [0, 0, 0, 0, 0],@ 
						"Active Flag", 1, "Modify",31, "External Flag", FALSE, "Property IDs", @
					["Density", ""], [16, 0], "Property Values", ["`rv_samples(k)`", ""] )

				END IF

			END IF

			IF (sub_rv_name == prop_name) THEN

				$**********************************************************************
				$Checking if property card is for shell elements (el_type = 51 for shell)
				$**********************************************************************

				IF (el_ty == 51) THEN

					$***********************************************
					$ Assigning thickness of shell elements as RV's
					$***********************************************
	
					IF (random_prop_name == "t") THEN
		
						$********************************************************************
						$ Getting the no of elements and elem_ids belonging to property group
						$*********************************************************************
		
						db_count_elements_in_region ( region_ids_with_elements(m),num_elems2 )
						db_get_elements_in_region ( num_elems2,region_ids_with_elements(m),element_ids )

						line1 = ""
						line2 = ""
			
						$**************************************************
						$ Adding the strings of the element ids of elements
						$ that belong to a specific property group together 
						$**************************************************
			
						FOR ( n = 1 TO num_elems2 )
							line1 = line2//str_from_integer(element_ids(n))
							line2 = line1//" "				
						END FOR

						$*************************************************************************************
						$ Assigning new values of thicknesses to shell elements (word_id = 36 for thickness) 
						$*************************************************************************************
			
						elementprops_modify(prop_name, prop_name, 51, 25, 35, 1, 1, 20, [36],[1], @
							["`rv_samples(k)`"], "Element "// line2 )

					END IF

					IF (random_prop_name == "THE") THEN
		
						$********************************************************************
						$ Getting the no of elements and elem_ids belonging to property group
						$*********************************************************************
		
						db_count_elements_in_region ( region_ids_with_elements(m),num_elems2 )
						db_get_elements_in_region ( num_elems2,region_ids_with_elements(m),element_ids )
		
						line1 = ""
						line2 = ""
			
						$**************************************************
						$ Adding the strings of the element ids of elements
						$ that belong to a specific property group together 
						$**************************************************
			
						FOR ( n = 1 TO num_elems2 )
							line1 = line2//str_from_integer(element_ids(n))
							line2 = line1//" "				
						END FOR
			
						$*************************************************************************************
						$ Assigning new values of thicknesses to shell elements (word_id = 20 for angle) 
						$*************************************************************************************
			
						elementprops_modify(prop_name, prop_name, 51, 25, 35, 1, 1, 20, [20],[1], @
						["`rv_samples(k)`"], "Element "// line2 )

					END IF


					$********************************************************
					$ Assigning nonstructural mass of shell elements as RV's
					$********************************************************
	
					IF (random_prop_name == "NSM") THEN
		
						$********************************************************************
						$ Getting the no of elements and elem_ids belonging to property group
						$*********************************************************************
		
						db_count_elements_in_region (region_ids_with_elements(m),num_elems2 )
						db_get_elements_in_region ( num_elems2,region_ids_with_elements(m),element_ids )
		
						line1 = ""
						line2 = ""
			
						$**************************************************
						$ Adding the strings of the element ids of elements
						$ that belong to a specific property group together 
						$**************************************************
			
						FOR ( n = 1 TO num_elems2 )
							line1 = line2//str_from_integer(element_ids(n))
							line2 = line1//" "				
						END FOR
			
						$***********************************************************************************************
						$ Assigning new values of nonstructural mass to shell elements (word_id = 4037 nonstruc mass) 
						$***********************************************************************************************
			
						elementprops_modify(prop_name, prop_name, 51, 25, 35, 1, 1, 20, [4037],[1], @
							["`rv_samples(k)`"], "Element "// line2 )
	
					END IF

				END IF

				$**********************************************************************
				$Checking if property card is for rod elements (el_type = 18 for rod)
				$**********************************************************************

				IF (el_ty == 18) THEN

					$****************************************
					$ Assigning area of rod elements as RV's
					$****************************************
	
					IF (random_prop_name == "A") THEN
		
						$********************************************************************
						$ Getting the no of elements and elem_ids belonging to property group
						$*********************************************************************
		
						db_count_elements_in_region ( region_ids_with_elements(m),num_elems2 )
						db_get_elements_in_region ( num_elems2,region_ids_with_elements(m),element_ids )

						line1 = ""
						line2 = ""
			
						$**************************************************
						$ Adding the strings of the element ids of elements
						$ that belong to a specific property group together 
						$**************************************************
			
						FOR ( n = 1 TO num_elems2 )
							line1 = line2//str_from_integer(element_ids(n))
							line2 = line1//" "				
						END FOR
	
						$*********************************************************************
						$ Assigning new values of Areas to rod elements (word_id = 1 for area) 
						$**********************************************************************
	
						elementprops_modify(prop_name,prop_name,18,2,26,1,1,20,[ 1],[1],["`rv_samples(k)`"],"Element "// line2 )
	
					END IF

					$*****************************************************
					$ Assigning torsional constant of rod elements as RV's
					$*****************************************************
	
					IF (random_prop_name == "J") THEN
		
						$********************************************************************
						$ Getting the no of elements and elem_ids belonging to property group
						$*********************************************************************
		
						db_count_elements_in_region ( region_ids_with_elements(m),num_elems2 )
						db_get_elements_in_region ( num_elems2,region_ids_with_elements(m),element_ids )

						line1 = ""
						line2 = ""
			
						$**************************************************
						$ Adding the strings of the element ids of elements
						$ that belong to a specific property group together 
						$**************************************************
			
						FOR ( n = 1 TO num_elems2 )
							line1 = line2//str_from_integer(element_ids(n))
							line2 = line1//" "				
						END FOR
		
		
						$***********************************************************************************
						$ Assigning new values of Torsional Constants to rod elements (word_id = 1026 for J) 
						$************************************************************************************
			
						elementprops_modify(prop_name,prop_name,18,2,26,1,1,20,[ 1026],[1],["`rv_samples(k)`"],"Element "// line2 )
	
					END IF


					$*****************************************************
					$ Assigning nonstructural mass of rod elements as RV's
					$*****************************************************
	
					IF (random_prop_name == "NSM") THEN
				
		
						$********************************************************************
						$ Getting the no of elements and elem_ids belonging to property group
						$*********************************************************************
		
						db_count_elements_in_region ( region_ids_with_elements(m),num_elems2 )
						db_get_elements_in_region ( num_elems2,region_ids_with_elements(m),element_ids )

						line1 = ""
						line2 = ""
			
						$**************************************************
						$ Adding the strings of the element ids of elements
						$ that belong to a specific property group together 
						$**************************************************
			
						FOR ( n = 1 TO num_elems2 )
							line1 = line2//str_from_integer(element_ids(n))
							line2 = line1//" "				
						END FOR
		
		
						$***********************************************************************************
						$ Assigning new values of nonstructural mass to rod elements (word_id = 4037 for NSM) 
						$************************************************************************************
			
						elementprops_modify(prop_name,prop_name,18,2,26,1,1,20,[4037],[1],["`rv_samples(k)`"],"Element "// line2 )
	
					END IF


				END IF

				$**************************************************************************
				$Checking if property card is for 0D mass elements (el_type = 1 for 0D mass)
				$**************************************************************************

				IF (el_ty == 1) THEN

					$***********************************************
					$ Assigning mass value of 0D mass elements as RV's
					$***********************************************
	
					IF (random_prop_name == "M") THEN
		
						$********************************************************************
						$ Getting the no of elements and elem_ids belonging to property group
						$*********************************************************************
		
						db_count_elements_in_region ( region_ids_with_elements(m),num_elems2 )
						db_get_elements_in_region ( num_elems2,region_ids_with_elements(m),element_ids )
		

						line1 = ""
						line2 = ""
			
						$**************************************************
						$ Adding the strings of the element ids of elements
						$ that belong to a specific property group together 
						$**************************************************
			
						FOR ( n = 1 TO num_elems2 )
							line1 = line2//str_from_integer(element_ids(n))
							line2 = line1//" "				
						END FOR
			
						$*************************************************************************************
						$ Assigning new values of mass value to 0D mass elements (word_id = 2069 for mass value) 
						$*************************************************************************************
		
						elementprops_modify(prop_name,prop_name,1,25,18,27,2,20,[2069], @
						[1],["`rv_samples(k)`"],"Element "// line2  )
					END IF


				END IF

				$**************************************************************************
				$Checking if property card is for spring elements (el_type = 21 for spring)
				$**************************************************************************

				IF (el_ty == 21) THEN

					$***********************************************
					$ Assigning mass value of spring elements as RV's
					$***********************************************
	
					IF (random_prop_name == "K") THEN
		
						$********************************************************************
						$ Getting the no of elements and elem_ids belonging to property group
						$*********************************************************************
		
						db_count_elements_in_region ( region_ids_with_elements(m),num_elems2 )
						db_get_elements_in_region ( num_elems2,region_ids_with_elements(m),element_ids )
		

						line1 = ""
						line2 = ""
			
						$**************************************************
						$ Adding the strings of the element ids of elements
						$ that belong to a specific property group together 
						$**************************************************
			
						FOR ( n = 1 TO num_elems2 )
							line1 = line2//str_from_integer(element_ids(n))
							line2 = line1//" "				
						END FOR
			
						$*************************************************************************************
						$ Assigning new values of mass value to spring elements (word_id = 4023 for stiffness) 
						$*************************************************************************************
		
						elementprops_modify(prop_name,prop_name,21,25,32,37,2,20,[4023], @
						[1],["`rv_samples(k)`"],"Element "// line2  )
					END IF


				END IF


				$**********************************************************************
				$Checking if property card is for beam elements (el_type = 11 for beam)
				$**********************************************************************

				IF (el_ty == 11) THEN

					$****************************************
					$ Assigning area of beam elements as RV's
					$****************************************
	
					IF (random_prop_name == "A") THEN
		
						$********************************************************************
						$ Getting the no of elements and elem_ids belonging to property group
						$*********************************************************************
		
						db_count_elements_in_region ( region_ids_with_elements(m),num_elems2 )
						db_get_elements_in_region ( num_elems2,region_ids_with_elements(m),element_ids )

						line1 = ""
						line2 = ""
			
						$**************************************************
						$ Adding the strings of the element ids of elements
						$ that belong to a specific property group together 
						$**************************************************
			
						FOR ( n = 1 TO num_elems2 )
							line1 = line2//str_from_integer(element_ids(n))
							line2 = line1//" "				
						END FOR
		
						$**********************************************************************
						$ Assigning new values of Areas to beam elements (word_id = 4070 for A) 
						$***********************************************************************
		
						elementprops_modify(prop_name,prop_name,11, 36, 42, 1, 1, 20,[4070], @
							[1],["`rv_samples(k)`"],"Element "// line2  )
	
					END IF

					$************************************************************
					$ Assigning Moment of Inertia (I1) of beam elements as RV's
					$************************************************************
	
					IF (random_prop_name == "I1") THEN
					
						prop_id = str_to_integer(str_substr ( rv_names(k),6, 1 ))
		
						prop_name =  str_substr ( rv_names(k),1, 6 )
		
						$********************************************************************
						$ Getting the no of elements and elem_ids belonging to property group
						$*********************************************************************
		
						db_count_elements_in_region ( region_ids_with_elements(m),num_elems2 )
						db_get_elements_in_region ( num_elems2,region_ids_with_elements(m),element_ids )

						line1 = ""
						line2 = ""
			
						$**************************************************
						$ Adding the strings of the element ids of elements
						$ that belong to a specific property group together 
						$**************************************************
			
						FOR ( n = 1 TO num_elems2 )
							line1 = line2//str_from_integer(element_ids(n))
							line2 = line1//" "				
						END FOR
		
						$*************************************************************************
						$ Assigning new values of Areas to beam elements (word_id = 4078 for I1) 
						$*************************************************************************
		
						elementprops_modify(prop_name,prop_name,11, 36, 42, 1, 1, 20,[4078], @
						[1],["`rv_samples(k)`"],"Element "// line2  )
	
					END IF
	
					$************************************************************
					$ Assigning Moment of Inertia (I12) of beam elements as RV's
					$************************************************************
	
					IF (random_prop_name == "I12") THEN
					
						prop_id = str_to_integer(str_substr ( rv_names(k),6, 1 ))
		
						prop_name =  str_substr ( rv_names(k),1, 6 )
		
						$********************************************************************
						$ Getting the no of elements and elem_ids belonging to property group
						$*********************************************************************
		
						db_count_elements_in_region ( region_ids_with_elements(m),num_elems2 )
						db_get_elements_in_region ( num_elems2,region_ids_with_elements(m),element_ids )

						line1 = ""
						line2 = ""
			
						$**************************************************
						$ Adding the strings of the element ids of elements
						$ that belong to a specific property group together 
						$**************************************************
			
						FOR ( n = 1 TO num_elems2 )
							line1 = line2//str_from_integer(element_ids(n))
							line2 = line1//" "				
						END FOR
		
						$*************************************************************************
						$ Assigning new values of Areas to beam elements (word_id = 4079 for I12) 
						$*************************************************************************
		
						elementprops_modify(prop_name,prop_name,11, 36, 42, 1, 1, 20,[4079], [1], @
						["`rv_samples(k)`"],"Element "// line2  )
	
					END IF
	
					$************************************************************
					$ Assigning Moment of Inertia (I22) of beam elements as RV's
					$************************************************************
	
					IF (random_prop_name == "I2") THEN
					
						prop_id = str_to_integer(str_substr ( rv_names(k),6, 1 ))
		
						prop_name =  str_substr ( rv_names(k),1, 6 )
		
						$********************************************************************
						$ Getting the no of elements and elem_ids belonging to property group
						$*********************************************************************
		
						db_count_elements_in_region ( region_ids_with_elements(m),num_elems2 )
						db_get_elements_in_region ( num_elems2,region_ids_with_elements(m),element_ids )

						line1 = ""
						line2 = ""
			
						$**************************************************
						$ Adding the strings of the element ids of elements
						$ that belong to a specific property group together 
						$**************************************************
			
						FOR ( n = 1 TO num_elems2 )
							line1 = line2//str_from_integer(element_ids(n))
							line2 = line1//" "				
						END FOR
		
						$*************************************************************************
						$ Assigning new values of Areas to beam elements (word_id = 4078 for I2) 
						$*************************************************************************
		
						elementprops_modify(prop_name,prop_name,11, 36, 42, 1, 1, 20,[4080], [1], @
						["`rv_samples(k)`"],"Element "// line2  )

					END IF
						
		
					$************************************************************
					$ Assigning Section Parameter 1 (pr1) of beam elements as RV's
					$************************************************************
			
					IF (random_prop_name == "pr1") THEN
			
						$*******************************************************************************************
						$ Getting the beam section id assigned to the prop card (word_id = 39 for Beam section) 
						$*******************************************************************************************										
						db_get_prop_value(region_ids_with_elements(m),39,id_of_mat,data_type,sec_id,real_val,char_val,@
						coord_id,node_id2,field_id)
			
						$**************************************************************
						$ Getting the beam section name using beam section ID (sec_id)
						$***************************************************************
												
						db_get_beam_section( sec_id, sec_type_name, sec_name, sec_nrec, sec_bytes_per_rec ) 	
					
						$******************************************************
						$ Getting the beam section parameters using sec_id
						$******************************************************	

						bl_get_std_beam_section_data (sec_id,sec_nrec,data_types,sec_values,field_ids)
			
						$***************************************************************
						$ Getting the beam section parameters using sec_id
						$***************************************************************
									
						bl_get_std_beam_section_data (sec_id,sec_nrec,data_types,sec_values,field_ids)

						$*************************************************************************
						$ Determining size of array which was assigned as VIRTUAL at the beginning
						$ The size is (1,sec_nrec)
						$*************************************************************************	

						SYS_ALLOCATE_ARRAY (sec_val_str,1,sec_nrec)

						FOR (v=1 TO sec_nrec )
							
							sec_val_str(v) = str_from_real(sec_values(v))

						END FOR
						
						$*******************************************
						$ Assigning new values of section parameter  
						$********************************************
					
						sec_val_str(1)=str_from_real(rv_samples(k))

						beam_section_modify (sec_name, sec_name,sec_type_name, sec_val_str)

					END IF
			
					$************************************************************
					$ Assigning Section Parameter 2 (pr2) of beam elements as RV's
					$************************************************************
			
					IF (random_prop_name == "pr2") THEN
			
						$*******************************************************************************************
						$ Getting the beam section id assigned to the prop card (word_id = 39 for Beam section) 
						$*******************************************************************************************
									
						db_get_prop_value(region_ids_with_elements(m),39,id_of_mat,data_type,sec_id,real_val,char_val,@
						coord_id,node_id2,field_id)
			
						$**************************************************************
						$ Getting the beam section name using beam section ID (sec_id)
						$***************************************************************
												
						db_get_beam_section( sec_id, sec_type_name, sec_name, sec_nrec, sec_bytes_per_rec ) 
						
						$******************************************************
						$ Getting the beam section parameters using sec_id
						$******************************************************	

						bl_get_std_beam_section_data (sec_id,sec_nrec,data_types,sec_values,field_ids)
			
						$***************************************************************
						$ Getting the beam section parameters using sec_id
						$***************************************************************										

						bl_get_std_beam_section_data (sec_id,sec_nrec,data_types,sec_values,field_ids)

						SYS_ALLOCATE_ARRAY (sec_val_str,1,sec_nrec)

						FOR (v=1 TO sec_nrec )
							
							sec_val_str(v) = str_from_real(sec_values(v))

						END FOR

						$*******************************************
						$ Assigning new values of section parameter  
						$********************************************

						sec_val_str(2)=str_from_real(rv_samples(k))

						beam_section_modify (sec_name, sec_name,sec_type_name, sec_val_str)
			
					END IF
			
					$************************************************************
					$ Assigning Section Parameter 3 (pr3) of beam elements as RV's
					$************************************************************
			
					IF (random_prop_name == "pr3") THEN
			
						$*******************************************************************************************
						$ Getting the beam section id assigned to the prop card (word_id = 39 for Beam section) 
						$*******************************************************************************************										
						db_get_prop_value(region_ids_with_elements(m),39,id_of_mat,data_type,sec_id,real_val,char_val,@
						coord_id,node_id2,field_id)
			
						$**************************************************************
						$ Getting the beam section name using beam section ID (sec_id)
						$***************************************************************													
						db_get_beam_section( sec_id, sec_type_name, sec_name, sec_nrec, sec_bytes_per_rec ) 							
						$******************************************************
						$ Getting the beam section parameters using sec_id
						$******************************************************	

						bl_get_std_beam_section_data (sec_id,sec_nrec,data_types,sec_values,field_ids)
			
						$***************************************************************
						$ Getting the beam section parameters using sec_id
						$***************************************************************										

						bl_get_std_beam_section_data (sec_id,sec_nrec,data_types,sec_values,field_ids)								

						SYS_ALLOCATE_ARRAY (sec_val_str,1,sec_nrec)

						FOR (v=1 TO sec_nrec )
							
							sec_val_str(v) = str_from_real(sec_values(v))

						END FOR

						$*******************************************
						$ Assigning new values of section parameter  
						$********************************************

						sec_val_str(3)=str_from_real(rv_samples(k))

						beam_section_modify (sec_name, sec_name,sec_type_name, sec_val_str)
			
					END IF
			
					$************************************************************
					$ Assigning Section Parameter 4 (pr4) of beam elements as RV's
					$************************************************************
			
					IF (random_prop_name == "pr4") THEN
			
						$*******************************************************************************************
						$ Getting the beam section id assigned to the prop card (word_id = 39 for Beam section) 
						$*******************************************************************************************										
						db_get_prop_value(region_ids_with_elements(m),39,id_of_mat,data_type,sec_id,real_val,char_val,@
						coord_id,node_id2,field_id)
			
						$**************************************************************
						$ Getting the beam section name using beam section ID (sec_id)
						$***************************************************************													
						db_get_beam_section( sec_id, sec_type_name, sec_name, sec_nrec, sec_bytes_per_rec ) 							
						$******************************************************
						$ Getting the beam section parameters using sec_id
						$******************************************************	

						bl_get_std_beam_section_data (sec_id,sec_nrec,data_types,sec_values,field_ids)
			
						$***************************************************************
						$ Getting the beam section parameters using sec_id
						$***************************************************************										

						bl_get_std_beam_section_data (sec_id,sec_nrec,data_types,sec_values,field_ids)

						SYS_ALLOCATE_ARRAY (sec_val_str,1,sec_nrec)

						FOR (v=1 TO sec_nrec )
							
							sec_val_str(v) = str_from_real(sec_values(v))

						END FOR

						$*******************************************
						$ Assigning new values of section parameter  
						$********************************************

						sec_val_str(4)=str_from_real(rv_samples(k))

						beam_section_modify (sec_name, sec_name,sec_type_name, sec_val_str)
			
					END IF
				END IF
			END IF
		END FOR	
	END FOR

	$***********************************************
	$ Preparing the bdf file of the model for nastran
	$***********************************************

	!! input cossan_analysis.ses.01

	$**********************************
	$ Executing bdf file with nastran
	$**********************************

	utl_process_spawn(nastran_path//" cossan_analysis.bdf bat=no scr=yes old=no" ,true)

	$**********************************
	$ Attaching the results to patran
	$**********************************

	msc_dra_init_stream(  )
	msc_dra_add_param( "DATABASE",  db_name )
	msc_dra_add_param( "JOBNAME", "cossan_analysis" )
	msc_dra_add_param( "RESULTS FILE", "cossan_analysis.xdb" )
	msc_dra_add_param( "OBJECT", "Result Entities" )
	msc_dra_add_param( "ANALYSIS TYPE", "Structural" )
	msc_dra_add_param( "DIVISION TOLERANCE", "1.0E-8" )
	msc_dra_add_param( "NUMERICAL TOLERANCE", "1.0E-4" )
	msc_dra_add_param( "MODEL TOLERANCE", "0.0049999999" )
	msc_dra_add_param( "ROTATIONAL NODAL RESULTS", "OFF" )
	msc_dra_add_param( "STRESS/STRAIN INVARIANTS", "OFF" )
	msc_dra_add_param( "PRINCIPAL DIRECTIONS", "OFF" )
	msc_dra_add_param( "ELEMENT RESULTS POSITIONS", "Nodal       " )
	msc_dra_add_param( "TITLE DESCRIPTION", "ON" )
	msc_dra_finish_stream(  )

	analysis_import( "MSC.Nastran", "cossan_analysis", "Attach Results File No Job","cossan_analysis.xdb", TRUE )

	IF (anal_type == "static") THEN
	
		$********************************
		$ Getting the loadcases
		$********************************
		
		check_results = res_utl_get_loadcases(no_of_load_cases, load_case_ids, no_of_subcase_ids)

		IF (check_results != 0) THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
				                              //"Please check the following items:\n" @ 
							      //" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly\n" @
							      //" - Make sure that NASTRAN works on your PC\n" @
							      //" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							      )
			RETURN

		END IF
		
		$********************************
		$ Getting the subcases
		$********************************
		
		check_results = res_utl_get_subcases(load_case_ids(1), no_of_subcases, subcase_ids )
		

		IF (check_results != 0) THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
				                              //"Please check the following items:\n" @ 
							      //" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly\n" @
							      //" - Make sure that NASTRAN works on your PC\n" @
							      //" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							      )
			RETURN

		END IF

		$********************************
		$ Getting the result layers
		$********************************
		
		result_ids(1) = load_case_ids(1)
		result_ids(2) = subcase_ids(1)
		result_ids(3) = prim_id
		result_ids(4) = second_id
		
		check_results = res_utl_get_result_layers (result_ids, no_of_layers, layer_ids, labels)
		

		IF (check_results != 0) THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
				                              //"Please check the following items:\n" @ 
							      //" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly\n" @
							      //" - Make sure that NASTRAN works on your PC\n" @
							      //" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							      )
			RETURN

		END IF

		$********************************
		$ Defining result ids
		$********************************
		
		resultids(1) = result_ids(1)
		resultids(2) = result_ids(2)
		resultids(3) = result_ids(3)
		resultids(4) = result_ids(4)
		resultids(5) = layer_ids(1)
		
		coordinate_identifier=""
		derivation_method=res_type3
		
		IF (res_type == "NODAL") THEN
		
			IF (res_type2 == "MAX") THEN
		
				node_list="node 1:#"
				
				check_results = res_utl_extract_nodal_results(resultids, node_list , derivation_method,  @
				coordinate_identifier, data_type, no_of_node_identifiers, list_of_node_identifiers, results, index_of_min_val, index_of_max_val)
				
				IF (check_results != 0) THEN

					user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
							//"Please check the following items:\n" @ 
							//" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly'\n" @
							//" - Make sure that NASTRAN works on your PC\n" @
							//" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							)
					RETURN

				END IF

				text_write(channel7,"%E6%",1,results(index_of_max_val(1)),"")
				
			ELSE IF (res_type2 == "SPECIFIC") THEN
		
				node_id= id_number
				node_list="node "//node_id
			
				check_results = res_utl_extract_nodal_results(resultids, node_list , derivation_method,  @
				coordinate_identifier, data_type, no_of_node_identifiers, list_of_node_identifiers, results, index_of_min_val, index_of_max_val)
		
				IF (check_results != 0) THEN

					user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
							//"Please check the following items:\n" @ 
							//" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly\n" @
							//" - Make sure that NASTRAN works on your PC\n" @
							//" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							)
					RETURN

				END IF

				text_write(channel7,"%E6%",1,results(1),"")
		
			ELSE IF (res_type2 == "MIN") THEN
		
				node_list="node 1:#"
				
				check_results = res_utl_extract_nodal_results(resultids, node_list , derivation_method,  @
				coordinate_identifier, data_type, no_of_node_identifiers, list_of_node_identifiers, results, index_of_min_val, index_of_max_val)
						
				IF (check_results != 0) THEN

					user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
							//"Please check the following items:\n" @ 
							//" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly\n" @
							//" - Make sure that NASTRAN works on your PC\n" @
							//" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							)
					RETURN

				END IF
	
				text_write(channel7,"%E6%",1,results(index_of_min_val(1)),"")

			ELSE IF (res_type2 == "ALL") THEN

				node_list="node 1:#"

				check_results = res_utl_extract_nodal_results(resultids, node_list , derivation_method,  @
				coordinate_identifier, data_type, no_of_node_identifiers, list_of_node_identifiers, results, index_of_min_val, index_of_max_val)

				IF (check_results != 0) THEN

					user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
							//"Please check the following items:\n" @ 
							//" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly\n" @
							//" - Make sure that NASTRAN works on your PC\n" @
							//" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							)
					RETURN

				END IF

				db_count_nodes (num_nodes3)

				FOR (l = 1 TO num_nodes3)

					text_write(channel7,"%E6%",1,results(l),"")

				END FOR

		
			END IF
			
		ELSE IF (res_type == "ELEMENTAL") THEN	
		
			IF (res_type2 == "MAX") THEN
		
				elem_list="elem 1:#"
				location="c"	
				check_results = res_utl_extract_elem_results(resultids, elem_list , derivation_method, location, @
				coordinate_identifier, data_type , result_location , @
				no_of_node_identifiers, list_of_node_identifiers, no_of_results_per_element, results, index_of_min_val, index_of_max_val)
		
				IF (check_results != 0) THEN

					user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
							//"Please check the following items:\n" @ 
							//" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly\n" @
							//" - Make sure that NASTRAN works on your PC\n" @
							//" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							)
					RETURN

				END IF

				text_write(channel7,"%E6%",1,results(index_of_max_val(1)),"")

			ELSE IF (res_type2 == "SPECIFIC") THEN
		
				elem_id=id_number
				elem_list="elem "//elem_id
				location="c"	
				check_results = res_utl_extract_elem_results(resultids, elem_list , derivation_method, location, @
				coordinate_identifier, data_type , result_location , @
				no_of_node_identifiers, list_of_node_identifiers, no_of_results_per_element, results, index_of_min_val, index_of_max_val)
		
				IF (check_results != 0) THEN

					user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
							//"Please check the following items:\n" @ 
							//" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly\n" @
							//" - Make sure that NASTRAN works on your PC\n" @
							//" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							)
					RETURN

				END IF

				text_write(channel7,"%E6%",1,results(1),"")

			ELSE IF (res_type2 == "MIN") THEN
		
				elem_list="elem 1:#"
				location="c"	
				check_results = res_utl_extract_elem_results(resultids, elem_list , derivation_method, location, @
				coordinate_identifier, data_type , result_location , @
				no_of_node_identifiers, list_of_node_identifiers, no_of_results_per_element, results, index_of_min_val, index_of_max_val)
			
				text_write(channel7,"%E6%",1,results(index_of_min_val(1)),"")

			ELSE IF (res_type2 == "ALL") THEN
				
				elem_list="elem 1:#"
				location="c"	
				check_results = res_utl_extract_elem_results(resultids, elem_list , derivation_method, location, @
				coordinate_identifier, data_type , result_location , @
				no_of_node_identifiers, list_of_node_identifiers, no_of_results_per_element, results, index_of_min_val, index_of_max_val)
				
				IF (check_results != 0) THEN

					user_message( "ERROR", 1, "COSSAN-PCL", "An error occured while trying to access the results\n" @
							//"Please check the following items:\n" @ 
							//" - Make sure that 'cossan_analysis.ses.01 file prepares 'cossan_analysis.bdf' file properly\n" @
							//" - Make sure that NASTRAN works on your PC\n" @
							//" - Make sure that running NASTRAN generates the cossan_analysis.xdb file which contains the results\n" @
							)
					RETURN

				END IF

				db_count_elems (num_elems3)

				FOR (l = 1 TO num_elems3)

					text_write(channel7,"%E6%",1,results(l),"")

				END FOR
				
			END IF

		END IF

	ELSE IF (anal_type == "modal") THEN

		IF (anal_type2 == "mode_no") THEN
			
			$****************************************************************************
			$ obtaining the natural frequencies corresponding to the first n modes
			$****************************************************************************
			
			FOR (r = 1 TO str_to_integer(mode_no))

				res_utl_get_loadcases(no_of_load_cases, load_case_ids, no_of_subcase_ids)
				mode_number=r
				res_utl_get_global_var_for_lc(load_case_ids(1),mode_number, "Frequency", ncomp, nat_freq)
							
				text_write(channel7,"%E6%",1,nat_freq(1),"")
			END FOR

			text_write_string(channel7, "End of Simulation  "//str_from_integer(i))

		ELSE IF (anal_type2 == "freq_range") THEN

			$****************************************************************************
			$ obtaining the natural frequencies corresponding a certain frequency range
			$****************************************************************************

			res_utl_get_loadcases(no_of_load_cases, load_case_ids, no_of_subcase_ids)
			res_utl_get_global_var_for_lc(load_case_ids(1),1, "Frequency", ncomp, nat_freq)
			text_write(channel7,"%E6%",1,nat_freq(1),"")
			freq_check(1)=nat_freq(1)
			r=2

			REPEAT
				res_utl_get_global_var_for_lc(load_case_ids(1),r, "Frequency", ncomp, nat_freq)
				text_write(channel7,"%E6%",1,nat_freq(1),"")				
				freq_check(r)=nat_freq(1)
				freq_diff = freq_check(r)-freq_check(r-1)
				r=r+1
			UNTIL (freq_diff <= 0.0001)

			text_write_string(channel7, "End of Simulation  "//str_from_integer(i))

		END IF
				
	END IF
	
	$****************************************
	$ Deleting the files created by patran
	$****************************************
	res_utl_clear_result()
	file_delete("cossan_analysis.bdf")
	file_delete("cossan_analysis.f06")
	file_delete("cossan_analysis.f04")
	file_delete("cossan_analysis.log")
	file_delete("cossan_analysis.DBALL")
	file_delete("patran.ses.01")
	analysis_main_tasks.delete_job( "MSC.Nastran", "cossan_analysis" )

END FOR

$**********************************
$ Closing previuosly opened files 
$**********************************

text_close(channel7," " )
text_close(channel5," " )


END FUNCTION


END CLASS

