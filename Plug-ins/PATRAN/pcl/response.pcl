$***************************
$ Written by Murat Panayirci
$***************************

$******************************
$ Last Modified on 20-Oct-2008
$******************************

$***************************************
$ Creating Response Specification Form
$*************************************** 

CLASS response

$*******************************************
$ Defining all the widgets used in the form
$*******************************************

CLASSWIDE widget res_form,close_button,spread_response,show_button,get_button,data_box1,data_box2,data_box3 
CLASSWIDE widget check_button,switch_button1,switch_button2,switch_button3,switch_button4

FUNCTION INIT()

GLOBAL STRING ResX[40](70),ResY[40](70)

$************************
$ Creating the main form
$************************

res_form=ui_form_create( "", 2, 0.3, "UL", 6.6, 9.5, "RESPONSE SPECIFICATION GUI", "" )

$********************
$ Creating buttons
$********************

close_button    = ui_button_create(res_form, "response_form_close", 5 , 8.8, 1.0, 0.5, "CLOSE", TRUE, TRUE)
show_button     = ui_button_create(res_form, "show_response", 3.5,0.3, 2.0, 0.0, "2.SHOW RESULTS", TRUE, TRUE)
get_button      = ui_button_create(res_form, "get_response", 0.5,5.2, 2.0, 0.0, "3.SELECT RESULT", TRUE, TRUE)
check_button    = ui_button_create(res_form, "check_response", 0.5,8.3, 2, 0.0, "5.CHECK RESULT", TRUE, TRUE)

$********************
$ Creating databoxes
$********************

data_box1 = ui_databox_create(res_form,"",2.7,8.05,1.0,2.0, "RESULT"," ",TRUE, "STRING", 1 )
data_box2 = ui_databox_create(res_form,"",3.8,6.4,1.0,1.0, "ENTER ID"," ",TRUE, "STRING", 1 )
data_box3 = ui_databox_create(res_form,"",3,5,3.0,3.0, "SELECTED RESPONSE"," ",TRUE, "STRING", 1 )

$************************
$ Creating switch buttons
$************************

switch_button1 = ui_switch_create(res_form, "get_response_type" ,0.5,5.9, 3, "4.Specify Quantity of Interest", TRUE )
switch_button2 = ui_switch_create(res_form, "get_response_type2" ,0.5,6.3, 3, " ", TRUE )
switch_button3 = ui_switch_create(res_form, "get_response_type3" ,0.5,7.0, 3, " ", TRUE )
switch_button4 = ui_switch_create(res_form, "select_analysis_type" ,0.5,0.2, 3, "1. Select Analysis Type ", TRUE )

$**************************************
$ Creating options for switch buttons
$**************************************

ui_item_create( switch_button1, "1", "Elemental", FALSE )
ui_item_create( switch_button1, "2", "Nodal", FALSE )
ui_item_create( switch_button2, "1", "Max", FALSE )
ui_item_create( switch_button2, "2", "Min", FALSE )
ui_item_create( switch_button2, "3", "Specific", FALSE )
ui_item_create( switch_button2, "4", "ALL", FALSE )
ui_item_create( switch_button3, "1", "XX", FALSE )
ui_item_create( switch_button3, "2", "YY", FALSE )
ui_item_create( switch_button3, "3", "ZZ", FALSE )
ui_item_create( switch_button3, "4", "MAG", FALSE )
ui_item_create( switch_button3, "5", "VONM", FALSE )
ui_item_create( switch_button4, "1", "Static", FALSE )
ui_item_create( switch_button4, "2", "Modal", FALSE )

$**********************************
$ Spreadsheet for Result Layers
$**********************************
ResX(1)="Primary"
ResX(1)="Primary"
ResX(2)="Primary"
ResX(3)="Primary"
ResX(4)="Primary"
ResX(5)="Primary"
ResX(6)="Primary"
ResX(7)="Primary"
ResX(8)="Primary"
ResX(9)="Primary"
ResX(10)="Secondary"
ResX(11)="Secondary"
ResX(12)="Secondary"
ResX(13)="Secondary"
ResX(14)="Secondary"
ResX(15)="Secondary"
ResX(16)="Secondary"
ResX(17)="Secondary"
ResX(18)="Secondary"
spread_response=ui_spread_create(res_form,"",0.5,0.8,5,4,0.1,2,2,7,9,ResX,ResY,"Select Response","","","SINGLE")


$***********************
$ Adjusting Visibility
$***********************
ui_wid_set(data_box2,"DISPLAY",FALSE)

END FUNCTION


$***************************************************************
$ Displaying the form
$***************************************************************
FUNCTION DISPLAY()
ui_form_display( "response")
END FUNCTION


$***************************************************************
$ Closing the form
$***************************************************************
FUNCTION response_form_close()
ui_form_hide( "response")
END FUNCTION


$***************************************************************
$ Switch button to select response type 1=element 2=node
$***************************************************************

FUNCTION select_analysis_type(item1, item2)

STRING item1 [], item2 []

GLOBAL STRING anal_type[40]

IF (item1== "1" && item2 == "ON" ) THEN

	anal_type = "static"

	ui_wid_set(spread_response,"DISPLAY",TRUE)
	ui_wid_set(data_box1,"DISPLAY",TRUE)	
	ui_wid_set(data_box3,"DISPLAY",TRUE)
	ui_wid_set(switch_button1,"DISPLAY",TRUE)
	ui_wid_set(switch_button2,"DISPLAY",TRUE)
	ui_wid_set(switch_button3,"DISPLAY",TRUE)
	ui_wid_set(show_button,"DISPLAY",TRUE)
	ui_wid_set(check_button,"DISPLAY",TRUE)
	ui_wid_set(get_button,"DISPLAY",TRUE)

ELSE IF (item1== "2" && item2 == "ON" ) THEN

	anal_type = "modal"
	
	ui_wid_set(spread_response,"DISPLAY",FALSE)
	ui_wid_set(data_box1,"DISPLAY",FALSE)
	ui_wid_set(data_box2,"DISPLAY",FALSE)
	ui_wid_set(data_box3,"DISPLAY",FALSE)
	ui_wid_set(switch_button1,"DISPLAY",FALSE)
	ui_wid_set(switch_button2,"DISPLAY",FALSE)
	ui_wid_set(switch_button3,"DISPLAY",FALSE)
	ui_wid_set(show_button,"DISPLAY",FALSE)
	ui_wid_set(check_button,"DISPLAY",FALSE)
	ui_wid_set(get_button,"DISPLAY",FALSE)


	user_message( "ERROR", 1, "COSSAN-PCL", "This feature is not fully implemented yet" )

	RETURN

END IF

END FUNCTION


$***************************************************************
$ Switch button to select response type 1=element 2=node
$***************************************************************

FUNCTION get_response_type(item1, item2)

STRING item1 [], item2 []

GLOBAL STRING res_type[40]

IF (item1== "1" && item2 == "ON" ) THEN

	res_type = "ELEMENTAL"

ELSE IF (item1== "2" && item2 == "ON" ) THEN

	res_type = "NODAL"

END IF

END FUNCTION


$***********************************************************************
$ Switch button to specify response 1=maximum 2=minimum 3=specific 4=all
$***********************************************************************

FUNCTION get_response_type2(item1, item2)

STRING item1 [], item2 []

GLOBAL STRING res_type2[40]


IF (item1== "1" && item2 == "ON" ) THEN

	res_type2 = "MAX"

	ui_wid_set(data_box2,"DISPLAY",FALSE)

ELSE IF (item1== "2" && item2 == "ON" ) THEN

	res_type2 = "MIN"

	ui_wid_set(data_box2,"DISPLAY",FALSE)

ELSE IF (item1== "3" && item2 == "ON" ) THEN

	res_type2 = "SPECIFIC"

	ui_wid_set(data_box2,"DISPLAY",TRUE)

ELSE IF (item1== "4" && item2 == "ON" ) THEN

	res_type2 = "ALL"

	ui_wid_set(data_box2,"DISPLAY",FALSE)

END IF

END FUNCTION


$***************************************************************
$ Switch button to specify component 1=magnitude 2=xx 3=yy 4=zz
$***************************************************************

FUNCTION get_response_type3(item1, item2)

STRING item1 [], item2 [] 

GLOBAL STRING res_type3[40]

IF (item1== "1" && item2 == "ON" ) THEN

	res_type3 = "XX"

ELSE IF (item1== "2" && item2 == "ON" ) THEN

	res_type3 = "YY"

ELSE IF (item1== "3" && item2 == "ON" ) THEN

	res_type3 = "ZZ"

ELSE IF (item1== "4" && item2 == "ON" ) THEN

	res_type3 = "MAG"

ELSE IF (item1== "5" && item2 == "ON" ) THEN

	res_type3 = "VONM"

END IF

END FUNCTION

$***************************************************************
$ Switch button to select response type 1=element 2=node
$***************************************************************

FUNCTION get_id()

GLOBAL STRING id_number[40]

ui_wid_get( data_box2, "VALUE", id_number )

END FUNCTION

$**************************************************
$ List the available result layers on spreadsheet
$**************************************************

FUNCTION show_response()

$********************************
$ Defining the variables
$********************************

STRING secondary_label_checker[100],secondary_label[100],primary_label[100], primary_label_checker[100], checker[100],tensor_label[100]
INTEGER  primary_id, secondary_id,i,j
GLOBAL STRING anal_type[40]

res_utl_clear_result()


$*****************************************************
$ Check if the analysis type is selected or not
$*****************************************************

IF (anal_type == " ") THEN

	user_message( "ERROR", 1, "COSSAN-PCL", "Please choose the analysis type first" )

	RETURN

END IF


$************************************
$ Initializing the the results table
$************************************

FOR (i = 1 TO 9)

	ui_spread_set_cell (spread_response, 1, 1 , i," " )

	FOR (j = 1 TO 7)

		ui_spread_set_cell (spread_response, 2, j , i, " " )

	END FOR

END FOR

$********************************
$ Getting the result labels 
$********************************

primary_label_checker = ""

FOR (i = 1 TO 9)

	primary_id = i

	db_get_primary_res_label (primary_id, primary_label)

	$***************************************************************************
	$ This if close makes sure that same Primary Layer is not written many times
	$***************************************************************************

	IF (primary_label != primary_label_checker) THEN						
	
		ui_spread_set_cell (spread_response, 1, 1 , i,primary_label )

	END IF

	primary_label_checker = primary_label

	secondary_label_checker = ""

	FOR (j = 1 TO 7)

		secondary_id = j

		db_get_secondary_res_label (primary_id, secondary_id, secondary_label)

		ui_spread_get_cell (spread_response, 1, 1 , i, checker )

		$*******************************************************************************************
		$ This if close makes sure that same Secondary Layer is not written many times
		$ And also that a secondary layer is not written to a layer which does not have any primary layer
		$********************************************************************************************

		IF (secondary_label != secondary_label_checker && checker != " ") THEN
			
			ui_spread_set_cell (spread_response, 2, j , i, secondary_label )

		END IF

		secondary_label_checker = secondary_label

	END FOR

END FOR

$****************************************************************************************
$ Assigning secondary label to stress tensor
$ This was necessary since the stupid primary label stress tensor doesnt have a sec layer
$****************************************************************************************

FOR (i = 1 TO 9)

	ui_spread_get_cell (spread_response, 1, 1 , i,tensor_label)

	IF (tensor_label == "Stress Tensor") THEN

		ui_spread_set_cell (spread_response, 2, 1 , i, "Components" )

	END IF

END FOR

END FUNCTION



$*******************************************************************
$ Getting the primary & secondary IDs according to user's choice
$********************************************************************

FUNCTION get_response()

INTEGER from_col, from_row, to_col, to_row, layer_rp
GLOBAL INTEGER prim_id, second_id
STRING prim_lay_text[50], sec_lay_text[50],result_text[100]
GLOBAL STRING anal_type[40]


$*****************************************************
$ Check if the analysis type is selected or not
$*****************************************************

IF (anal_type == " ") THEN

	user_message( "ERROR", 1, "COSSAN-PCL", "Please choose the analysis type first" )

	RETURN

END IF


ui_spread_get_selected (spread_response, from_col, from_row, to_col, to_row, layer_rp )

prim_id = layer_rp
second_id = from_row

ui_spread_get_cell (spread_response,from_col, from_row, layer_rp, sec_lay_text)
ui_spread_get_cell (spread_response,1, 1, layer_rp, prim_lay_text)

$*******************************************************************
$ This if close is to make sure user selected a sec id (not a prim id)
$********************************************************************

IF (prim_lay_text != sec_lay_text) THEN

	$*******************************************************************
	$ This if close is to cover the case for the prim layer stress tensors
	$********************************************************************
	IF (prim_lay_text == "Stress Tensor") THEN

		result_text= prim_lay_text//" - Components"
		ui_wid_set( data_box3, "VALUE", result_text )

	ELSE	
		result_text= prim_lay_text//" - "//sec_lay_text
		ui_wid_set( data_box3, "VALUE", result_text )

	END IF

END IF

END FUNCTION


$*******************************************************************
$ Getting the primary & secondary IDs according to user's choice
$********************************************************************

FUNCTION check_response()

GLOBAL STRING  anal_type[40],res_type[40],res_type2[40] , res_type3[40], id_number[40],elem_id[30] , node_id[40], response_check[40]
GLOBAL INTEGER prim_id, second_id

STRING  node_list[40],derivation_method[20],coordinate_identifier[10],location[10], elem_list[12] , labels[100](virtual)
INTEGER index_of_min_val(12), index_of_max_val(12) , no_of_results_per_element(VIRTUAL), channel8,num_elems4,l,num_nodes4
INTEGER no_of_load_cases, load_case_ids(virtual), no_of_subcase_ids(virtual) ,no_of_node_identifiers,subcase_ids(VIRTUAL)
INTEGER no_of_subcases,result_location, result_ids(4),no_of_layers, layer_ids(VIRTUAL), data_type ,resultids(5),list_of_node_identifiers(VIRTUAL),check_results
REAL    results(VIRTUAL)

$*********************************
$ Initialize the result check box
$*********************************

ui_wid_set( data_box1, "VALUE"," ")

$************************************************************************************
$ Perform some checks whether all options are selected by the user properly or not
$************************************************************************************

IF (anal_type == " ") THEN

	user_message( "ERROR", 1, "COSSAN-PCL", "Please choose the analysis type first" )

	RETURN

ELSE IF (res_type == " ") THEN

	user_message( "ERROR", 1, "COSSAN-PCL", "Please choose all parameters to specify response properly" )

	RETURN

ELSE IF (res_type2 == " ") THEN

	user_message( "ERROR", 1, "COSSAN-PCL", "Please choose all parameters to specify response properly" )

	RETURN

ELSE IF (res_type3 == " ") THEN

	user_message( "ERROR", 1, "COSSAN-PCL", "Please choose all parameters to specify response properly" )

	RETURN

END IF

$*****************************************************************************************************************
$ This variable is used to check whether the user has assigned a valid response to be extracted or not
$*****************************************************************************************************************
response_check = " "

$********************************
$ Getting the loadcases
$********************************
res_utl_get_loadcases(no_of_load_cases, load_case_ids, no_of_subcase_ids)

$********************************
$ Getting the subcases
$********************************

check_results = res_utl_get_subcases(load_case_ids(1), no_of_subcases, subcase_ids )

$*****************************************************
$ Check if the results are attached to the database
$*****************************************************

IF (check_results != 0) THEN

	user_message( "ERROR", 1, "COSSAN-PCL", "Please make sure that results (xdb file) are attached to the database" )

	RETURN

END IF


$********************************
$ Getting the result layers
$********************************
result_ids(1) = load_case_ids(1)
result_ids(2) = subcase_ids(1)
result_ids(3) = prim_id
result_ids(4) = second_id

check_results = res_utl_get_result_layers (result_ids, no_of_layers, layer_ids, labels)

$*****************************************************
$ Check if the results are attached to the database
$*****************************************************

IF (check_results != 0) THEN

	user_message( "ERROR", 1, "COSSAN-PCL", "Please make sure that results (xdb file) are attached properly to the database" )

	RETURN

END IF

check_results = 1

$********************************
$ Defining result ids
$********************************

resultids(1) = result_ids(1)
resultids(2) = result_ids(2)
resultids(3) = result_ids(3)
resultids(4) = result_ids(4)
resultids(5) = layer_ids(1)

coordinate_identifier=""
derivation_method=res_type3

$********************************
$ Extracting Nodal Results
$********************************

IF (res_type == "NODAL") THEN

	$********************************
	$ Extracting Max Nodal Result
	$********************************

	IF (res_type2 == "MAX") THEN

		node_list="node 1:#"
		
		check_results = res_utl_extract_nodal_results(resultids, node_list , derivation_method,  @
		coordinate_identifier, data_type, no_of_node_identifiers, list_of_node_identifiers, results, index_of_min_val, index_of_max_val)

		$*****************************************************
		$ Check if the results are attached to the database
		$*****************************************************

		IF (check_results != 0) THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "Please make sure that results (xdb file) are attached properly to the database" )

			RETURN

		END IF
					
		ui_wid_set( data_box1, "VALUE",str_from_real(results(index_of_max_val(1))))

		$*****************************************************************************************************
		$ This response check controls whether there is a response assigned by the user to be extracted or not
		$ This argument is then passed to msc_rv and msc_rf
		$*****************************************************************************************************

		response_check = str_from_real(results(index_of_max_val(1)))

	$***********************************************
	$ Extracting Nodal Results at a specified Node
	$***********************************************
		
	ELSE IF (res_type2 == "SPECIFIC") THEN

		ui_wid_get( data_box2, "VALUE", id_number )

		$*****************************************************
		$ Check whether Node ID is selected or not
		$*****************************************************

		IF (id_number== " ") THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "Please choose an ID number first" )

			RETURN

		END IF
		
		node_id= id_number
		node_list="node "//node_id
	
		check_results = res_utl_extract_nodal_results(resultids, node_list , derivation_method,  @
		coordinate_identifier, data_type, no_of_node_identifiers, list_of_node_identifiers, results, index_of_min_val, index_of_max_val)

		$*****************************************************
		$ Check if the results are attached to the database
		$*****************************************************

		IF (check_results != 0) THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "Please make sure that results (xdb file) are attached properly to the database" )

			RETURN

		END IF


		ui_wid_set( data_box1, "VALUE",str_from_real(results(1)))

		response_check = str_from_real(results(1))

	$********************************
	$ Extracting Min Nodal Result
	$********************************

	ELSE IF (res_type2 == "MIN") THEN

		node_list="node 1:#"
		
		check_results = res_utl_extract_nodal_results(resultids, node_list , derivation_method,  @
		coordinate_identifier, data_type, no_of_node_identifiers, list_of_node_identifiers, results, index_of_min_val, index_of_max_val)
				
		$*****************************************************
		$ Check if the results are attached to the database
		$*****************************************************

		IF (check_results != 0) THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "Please make sure that results (xdb file) are attached properly to the database" )

			RETURN

		END IF
	
		ui_wid_set( data_box1, "VALUE",str_from_real(results(index_of_min_val(1))))

		response_check = str_from_real(results(index_of_min_val(1)))

	ELSE IF (res_type2 == "ALL") THEN

		node_list="node 1:#"
	
		check_results = res_utl_extract_nodal_results(resultids, node_list , derivation_method,  @
		coordinate_identifier, data_type, no_of_node_identifiers, list_of_node_identifiers, results, index_of_min_val, index_of_max_val)

		$*****************************************************
		$ Check if the results are attached to the database
		$*****************************************************

		IF (check_results != 0) THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "Please make sure that results (xdb file) are attached properly to the database" )

			RETURN

		END IF

		ui_wid_set( data_box1, "VALUE","OK")

		response_check = "OK"

		text_open("Results_All_Nodal.dat", "NOW", 0, 0, channel8)               

		db_count_nodes (num_nodes4)

		FOR (l = 1 TO num_nodes4)
		     text_write(channel8,"%E6%",1,results(l),"")
		END FOR

		text_close(channel8," " )

	END IF

$********************************
$ Extracting Elemental Results
$********************************
	
ELSE IF (res_type == "ELEMENTAL") THEN	

	IF (res_type2 == "MAX") THEN

		$********************************
		$ Extracting Max Elemental Result
		$********************************

		elem_list="elem 1:#"
		location="c"	
		check_results = res_utl_extract_elem_results(resultids, elem_list , derivation_method, location, @
		coordinate_identifier, data_type , result_location , @
		no_of_node_identifiers, list_of_node_identifiers, no_of_results_per_element, results, index_of_min_val, index_of_max_val)

		$*****************************************************
		$ Check if the results are attached to the database
		$*****************************************************

		IF (check_results != 0) THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "Please make sure that results (xdb file) are attached properly to the database" )

			RETURN

		END IF

		ui_wid_set( data_box1, "VALUE",str_from_real(results(index_of_max_val(1))))

		response_check = str_from_real(results(index_of_max_val(1)))
		
	ELSE IF (res_type2 == "SPECIFIC") THEN

		$*****************************************************
		$ Extracting Elemental Results at a specified Element
		$*****************************************************

		ui_wid_get( data_box2, "VALUE", id_number )

		$*****************************************************
		$ Check whether Node ID is selected or not
		$*****************************************************

		IF (id_number== " ") THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "Please choose an ID number first" )

			RETURN

		END IF

		elem_id=id_number
		elem_list="elem "//elem_id
		location="c"	
		check_results = res_utl_extract_elem_results(resultids, elem_list , derivation_method, location, @
		coordinate_identifier, data_type , result_location , @
		no_of_node_identifiers, list_of_node_identifiers, no_of_results_per_element, results, index_of_min_val, index_of_max_val)

		$*****************************************************
		$ Check if the results are attached to the database
		$*****************************************************

		IF (check_results != 0) THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "Please make sure that results (xdb file) are attached properly to the database" )

			RETURN

		END IF

		ui_wid_set( data_box1, "VALUE",str_from_real(results(1)))

		response_check = str_from_real(results(1))

	ELSE IF (res_type2 == "MIN") THEN

		$********************************
		$ Extracting Min Elemental Result
		$********************************

		elem_list="elem 1:#"
		location="c"	
		check_results = res_utl_extract_elem_results(resultids, elem_list , derivation_method, location, @
		coordinate_identifier, data_type , result_location , @
		no_of_node_identifiers, list_of_node_identifiers, no_of_results_per_element, results, index_of_min_val, index_of_max_val)

		$*****************************************************
		$ Check if the results are attached to the database
		$*****************************************************

		IF (check_results != 0) THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "Please make sure that results (xdb file) are attached properly to the database" )

			RETURN

		END IF

		ui_wid_set( data_box1, "VALUE",str_from_real(results(index_of_min_val(1))))

		response_check = str_from_real(results(index_of_min_val(1)))

	ELSE IF (res_type2 == "ALL") THEN

		$**************************************
		$ Extracting Results for all elements
		$**************************************

		elem_list="elem 1:#"
		location="c"	

		check_results = res_utl_extract_elem_results(resultids, elem_list , derivation_method, location, @
		coordinate_identifier, data_type , result_location , @
		no_of_node_identifiers, list_of_node_identifiers, no_of_results_per_element, results, index_of_min_val, index_of_max_val)
 
		$*****************************************************
		$ Check if the results are attached to the database
		$*****************************************************

		IF (check_results != 0) THEN

			user_message( "ERROR", 1, "COSSAN-PCL", "Please make sure that results (xdb file) are attached properly to the database" )

			RETURN

		END IF

		ui_wid_set( data_box1, "VALUE","OK")

		response_check = "OK"

		text_open("Results_All_Elemental.dat", "NOW", 0, 0, channel8)               

		db_count_elems (num_elems4)

		FOR (l = 1 TO num_elems4)
		     text_write(channel8,"%E6%",1,results(l),"")
		END FOR

		text_close(channel8," " )
					
	END IF
			
END IF



END FUNCTION


END CLASS